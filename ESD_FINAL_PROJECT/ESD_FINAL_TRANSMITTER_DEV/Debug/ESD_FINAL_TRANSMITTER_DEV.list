
ESD_FINAL_TRANSMITTER_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e98  08010278  08010278  00011278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011110  08011110  00013200  2**0
                  CONTENTS
  4 .ARM          00000008  08011110  08011110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011118  08011118  00013200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011118  08011118  00012118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801111c  0801111c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08011120  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  20000200  08011320  00013200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e94  08011320  00013e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001271f  00000000  00000000  00013230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bdd  00000000  00000000  0002594f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00029530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  0002a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a857  00000000  00000000  0002b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4de  00000000  00000000  00045b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdb2  00000000  00000000  0006000d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecdbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ccc  00000000  00000000  000ece04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f2ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801025c 	.word	0x0801025c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0801025c 	.word	0x0801025c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <I2C_init_config>:
/* -------------------------------------------------- */
//          FUNCTION DEFINITIONS
/* -------------------------------------------------- */

void I2C_init_config()
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <I2C_init_config+0xdc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	4a34      	ldr	r2, [pc, #208]	@ (80010f0 <I2C_init_config+0xdc>)
 800101e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001022:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // send clock for I2C1 and port B
 8001024:	4b32      	ldr	r3, [pc, #200]	@ (80010f0 <I2C_init_config+0xdc>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001028:	4a31      	ldr	r2, [pc, #196]	@ (80010f0 <I2C_init_config+0xdc>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	@ 0x30

	// declare as alternate func
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER8, ESF_GPIO_MODER_ALT_FUNC);
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <I2C_init_config+0xe0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001038:	4a2e      	ldr	r2, [pc, #184]	@ (80010f4 <I2C_init_config+0xe0>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103e:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER9, ESF_GPIO_MODER_ALT_FUNC);
 8001040:	4b2c      	ldr	r3, [pc, #176]	@ (80010f4 <I2C_init_config+0xe0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8001048:	4a2a      	ldr	r2, [pc, #168]	@ (80010f4 <I2C_init_config+0xe0>)
 800104a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800104e:	6013      	str	r3, [r2, #0]

	// PB8 scl PB9 sda
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL8, 4);
 8001050:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <I2C_init_config+0xe0>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001054:	f023 030f 	bic.w	r3, r3, #15
 8001058:	4a26      	ldr	r2, [pc, #152]	@ (80010f4 <I2C_init_config+0xe0>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6253      	str	r3, [r2, #36]	@ 0x24
	MODIFY_FIELD(GPIOB->AFR[1], GPIO_AFRH_AFSEL9, 4);
 8001060:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <I2C_init_config+0xe0>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001068:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <I2C_init_config+0xe0>)
 800106a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800106e:	6253      	str	r3, [r2, #36]	@ 0x24

	// configure as output open drain
	MODIFY_FIELD(GPIOB->OTYPER, GPIO_OTYPER_OT8, 1);
 8001070:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <I2C_init_config+0xe0>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a1f      	ldr	r2, [pc, #124]	@ (80010f4 <I2C_init_config+0xe0>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107a:	6053      	str	r3, [r2, #4]
	MODIFY_FIELD(GPIOB->OTYPER, GPIO_OTYPER_OT9, 1);
 800107c:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <I2C_init_config+0xe0>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <I2C_init_config+0xe0>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001086:	6053      	str	r3, [r2, #4]

	// set speed
	GPIOB->OSPEEDR |= (3 << 16) | (3 << 18);
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <I2C_init_config+0xe0>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4a19      	ldr	r2, [pc, #100]	@ (80010f4 <I2C_init_config+0xe0>)
 800108e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001092:	6093      	str	r3, [r2, #8]

	// select pull up
	GPIOB->PUPDR |= (1 << 16) | (1 << 18);
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <I2C_init_config+0xe0>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <I2C_init_config+0xe0>)
 800109a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800109e:	60d3      	str	r3, [r2, #12]

	// i2c setup begins
	// first reset i2c
	I2C1->CR1 = I2C_CR1_SWRST;
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <I2C_init_config+0xe4>)
 80010a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010a6:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 80010a8:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <I2C_init_config+0xe4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <I2C_init_config+0xe4>)
 80010ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80010b2:	6013      	str	r3, [r2, #0]

	// setup peripheral clock freq
	I2C1->CR2 |= 0x18 << 0; // its 24 mhz hex of 24 ! see ioc file
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <I2C_init_config+0xe4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <I2C_init_config+0xe4>)
 80010ba:	f043 0318 	orr.w	r3, r3, #24
 80010be:	6053      	str	r3, [r2, #4]

	// i2c ccrr value see thigh calc its 120 in decimal 1000+4000/(1/pckl which is 24))
	I2C1->CCR |= 0x78 << 0;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <I2C_init_config+0xe4>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <I2C_init_config+0xe4>)
 80010c6:	f043 0378 	orr.w	r3, r3, #120	@ 0x78
 80010ca:	61d3      	str	r3, [r2, #28]

	// set trise
	I2C1->TRISE |= 0x19 << 0; // 1000/(1pcll)+1
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <I2C_init_config+0xe4>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <I2C_init_config+0xe4>)
 80010d2:	f043 0319 	orr.w	r3, r3, #25
 80010d6:	6213      	str	r3, [r2, #32]

	// enable i2c peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <I2C_init_config+0xe4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <I2C_init_config+0xe4>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40005400 	.word	0x40005400

080010fc <I2C_START_COMS>:

void I2C_START_COMS()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	// start bit
	I2C1->CR1 |= I2C_CR1_ACK; // enable ACK
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <I2C_START_COMS+0x34>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <I2C_START_COMS+0x34>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_START;
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <I2C_START_COMS+0x34>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <I2C_START_COMS+0x34>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6013      	str	r3, [r2, #0]
	while (I2C1->CR2 & I2C_SR1_SB)
 8001118:	bf00      	nop
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <I2C_START_COMS+0x34>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <I2C_START_COMS+0x1e>
	{
	} // wait for start condition to generate
	delay(2);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 feb4 	bl	8001e94 <delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40005400 	.word	0x40005400

08001134 <I2C_WRITE_DATA>:

void I2C_WRITE_DATA(uint8_t data)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & I2C_SR1_TXE))
 800113e:	bf00      	nop
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <I2C_WRITE_DATA+0x3c>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f9      	beq.n	8001140 <I2C_WRITE_DATA+0xc>
		; // wait for TXE bit to set
	I2C1->DR = data;
 800114c:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <I2C_WRITE_DATA+0x3c>)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF))
 8001152:	bf00      	nop
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <I2C_WRITE_DATA+0x3c>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f9      	beq.n	8001154 <I2C_WRITE_DATA+0x20>
		; // wait for byte transmission
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40005400 	.word	0x40005400

08001174 <I2C_SEND_ADDRESS>:

void I2C_SEND_ADDRESS(uint8_t address)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = address;
 800117e:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <I2C_SEND_ADDRESS+0x3c>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	6113      	str	r3, [r2, #16]
	// delay(4);
	while (!(I2C1->SR1 & (1 << 1)))
 8001184:	bf00      	nop
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <I2C_SEND_ADDRESS+0x3c>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <I2C_SEND_ADDRESS+0x12>
		; // wait for address bit to be set
	// This bit is cleared by software reading SR1 register followed reading SR2, or by hardware
	uint8_t temp_clear = I2C1->SR1 | I2C1->SR2;
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <I2C_SEND_ADDRESS+0x3c>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <I2C_SEND_ADDRESS+0x3c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	73fb      	strb	r3, [r7, #15]
	;
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400

080011b4 <I2C_STOP_COMS>:

void I2C_STOP_COMS()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	I2C1->CR1 |= I2C_CR1_STOP; // stop condition
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <I2C_STOP_COMS+0x1c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <I2C_STOP_COMS+0x1c>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6013      	str	r3, [r2, #0]
	delay(2);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fe65 	bl	8001e94 <delay>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40005400 	.word	0x40005400

080011d4 <I2C_READ>:

void I2C_READ(uint8_t address_slave, uint8_t *buffer_recv, uint8_t recv_buff_size)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
	uint8_t remaining_bytes = recv_buff_size;
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	73fb      	strb	r3, [r7, #15]
	// if only one byte has to read
	// refrence Master receiver https://www.st.com/resource/en/reference_manual/dm00119316-stm32f411xc-e-advanced-arm-based-32bit-mcus-stmicroelectronics.pdf
	if (recv_buff_size == 1)
	{
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d126      	bne.n	800123c <I2C_READ+0x68>
		I2C1->DR = address_slave;
		while (!(I2C1->SR1 & I2C_SR1_ADDR))
 80011ee:	4a3c      	ldr	r2, [pc, #240]	@ (80012e0 <I2C_READ+0x10c>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	6113      	str	r3, [r2, #16]
			;										// wait for address bit to be set
 80011f4:	bf00      	nop
 80011f6:	4b3a      	ldr	r3, [pc, #232]	@ (80012e0 <I2C_READ+0x10c>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f9      	beq.n	80011f6 <I2C_READ+0x22>
		I2C1->CR1 &= ~(1 << 10);					// clear ack
		uint8_t temp_clear = I2C1->SR1 | I2C1->SR2; // ev6
 8001202:	4b37      	ldr	r3, [pc, #220]	@ (80012e0 <I2C_READ+0x10c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a36      	ldr	r2, [pc, #216]	@ (80012e0 <I2C_READ+0x10c>)
 8001208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800120c:	6013      	str	r3, [r2, #0]
		I2C_STOP_COMS();
 800120e:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <I2C_READ+0x10c>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <I2C_READ+0x10c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	73bb      	strb	r3, [r7, #14]
		while (!(I2C1->SR1 & I2C_SR1_RXNE))
 800121e:	f7ff ffc9 	bl	80011b4 <I2C_STOP_COMS>
			;
 8001222:	bf00      	nop
 8001224:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <I2C_READ+0x10c>)
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f9      	beq.n	8001224 <I2C_READ+0x50>
		buffer_recv[0] = I2C1->DR; // recieve data
		return;
 8001230:	4b2b      	ldr	r3, [pc, #172]	@ (80012e0 <I2C_READ+0x10c>)
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	701a      	strb	r2, [r3, #0]
	}
 800123a:	e04e      	b.n	80012da <I2C_READ+0x106>
		I2C_SEND_ADDRESS(address_slave);
		// keep reading and storing in loop also send acks
		while (remaining_bytes > 2)
		{
			while (!(I2C1->SR1 & I2C_SR1_RXNE))
				;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff98 	bl	8001174 <I2C_SEND_ADDRESS>
			buffer_recv[recv_buff_size - remaining_bytes] = I2C1->DR;
			I2C1->CR1 |= I2C_CR1_ACK; // send ack master sends this !!
 8001244:	e019      	b.n	800127a <I2C_READ+0xa6>
			remaining_bytes--;
		}
 8001246:	bf00      	nop
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <I2C_READ+0x10c>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f9      	beq.n	8001248 <I2C_READ+0x74>

		// second last byte nack condition
 8001254:	4b22      	ldr	r3, [pc, #136]	@ (80012e0 <I2C_READ+0x10c>)
 8001256:	6919      	ldr	r1, [r3, #16]
 8001258:	79ba      	ldrb	r2, [r7, #6]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	461a      	mov	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4413      	add	r3, r2
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
		while (!(I2C1->SR1 & I2C_SR1_RXNE))
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <I2C_READ+0x10c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1c      	ldr	r2, [pc, #112]	@ (80012e0 <I2C_READ+0x10c>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001272:	6013      	str	r3, [r2, #0]
			;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	3b01      	subs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
			I2C1->CR1 |= I2C_CR1_ACK; // send ack master sends this !!
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d8e2      	bhi.n	8001246 <I2C_READ+0x72>
		buffer_recv[recv_buff_size - remaining_bytes] = I2C1->DR;
		I2C1->CR1 &= ~(1 << 10); // clear ack
		I2C_STOP_COMS();		 // stop is sent at n-1 byte
		remaining_bytes--;
 8001280:	bf00      	nop
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <I2C_READ+0x10c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f9      	beq.n	8001282 <I2C_READ+0xae>
		// last byte is read after stop is sent
		while (!(I2C1->SR1 & I2C_SR1_RXNE))
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <I2C_READ+0x10c>)
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	79ba      	ldrb	r2, [r7, #6]
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	461a      	mov	r2, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
			;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <I2C_READ+0x10c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0e      	ldr	r2, [pc, #56]	@ (80012e0 <I2C_READ+0x10c>)
 80012a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80012ac:	6013      	str	r3, [r2, #0]
		buffer_recv[recv_buff_size - remaining_bytes] = I2C1->DR;
 80012ae:	f7ff ff81 	bl	80011b4 <I2C_STOP_COMS>
	}
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
}
 80012b8:	bf00      	nop
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <I2C_READ+0x10c>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f9      	beq.n	80012ba <I2C_READ+0xe6>
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <I2C_READ+0x10c>)
 80012c8:	6919      	ldr	r1, [r3, #16]
 80012ca:	79ba      	ldrb	r2, [r7, #6]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	4413      	add	r3, r2
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40005400 	.word	0x40005400
 80012e4:	00000000 	.word	0x00000000

080012e8 <decodeGGA>:
 * 	0: Success
 * 	1: Error in GPS Fix
 * 	2: Error in Buffer Length for storing the data
 */
int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 80012e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012ec:	b08c      	sub	sp, #48	@ 0x30
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
	inx = 0;
 80012f4:	4b73      	ldr	r3, [pc, #460]	@ (80014c4 <decodeGGA+0x1dc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80012fe:	e004      	b.n	800130a <decodeGGA+0x22>
 8001300:	4b70      	ldr	r3, [pc, #448]	@ (80014c4 <decodeGGA+0x1dc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	4a6f      	ldr	r2, [pc, #444]	@ (80014c4 <decodeGGA+0x1dc>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b6e      	ldr	r3, [pc, #440]	@ (80014c4 <decodeGGA+0x1dc>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b2c      	cmp	r3, #44	@ 0x2c
 8001318:	d1f2      	bne.n	8001300 <decodeGGA+0x18>
	inx++;
 800131a:	4b6a      	ldr	r3, [pc, #424]	@ (80014c4 <decodeGGA+0x1dc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3301      	adds	r3, #1
 8001320:	4a68      	ldr	r2, [pc, #416]	@ (80014c4 <decodeGGA+0x1dc>)
 8001322:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8001324:	e004      	b.n	8001330 <decodeGGA+0x48>
 8001326:	4b67      	ldr	r3, [pc, #412]	@ (80014c4 <decodeGGA+0x1dc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a65      	ldr	r2, [pc, #404]	@ (80014c4 <decodeGGA+0x1dc>)
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b64      	ldr	r3, [pc, #400]	@ (80014c4 <decodeGGA+0x1dc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b2c      	cmp	r3, #44	@ 0x2c
 800133e:	d1f2      	bne.n	8001326 <decodeGGA+0x3e>
	inx++;
 8001340:	4b60      	ldr	r3, [pc, #384]	@ (80014c4 <decodeGGA+0x1dc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a5f      	ldr	r2, [pc, #380]	@ (80014c4 <decodeGGA+0x1dc>)
 8001348:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 800134a:	e004      	b.n	8001356 <decodeGGA+0x6e>
 800134c:	4b5d      	ldr	r3, [pc, #372]	@ (80014c4 <decodeGGA+0x1dc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	4a5c      	ldr	r2, [pc, #368]	@ (80014c4 <decodeGGA+0x1dc>)
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b5b      	ldr	r3, [pc, #364]	@ (80014c4 <decodeGGA+0x1dc>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b2c      	cmp	r3, #44	@ 0x2c
 8001364:	d1f2      	bne.n	800134c <decodeGGA+0x64>
	inx++;
 8001366:	4b57      	ldr	r3, [pc, #348]	@ (80014c4 <decodeGGA+0x1dc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a55      	ldr	r2, [pc, #340]	@ (80014c4 <decodeGGA+0x1dc>)
 800136e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8001370:	e004      	b.n	800137c <decodeGGA+0x94>
 8001372:	4b54      	ldr	r3, [pc, #336]	@ (80014c4 <decodeGGA+0x1dc>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <decodeGGA+0x1dc>)
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <decodeGGA+0x1dc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b2c      	cmp	r3, #44	@ 0x2c
 800138a:	d1f2      	bne.n	8001372 <decodeGGA+0x8a>
	inx++;
 800138c:	4b4d      	ldr	r3, [pc, #308]	@ (80014c4 <decodeGGA+0x1dc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	3301      	adds	r3, #1
 8001392:	4a4c      	ldr	r2, [pc, #304]	@ (80014c4 <decodeGGA+0x1dc>)
 8001394:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001396:	e004      	b.n	80013a2 <decodeGGA+0xba>
 8001398:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <decodeGGA+0x1dc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <decodeGGA+0x1dc>)
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b48      	ldr	r3, [pc, #288]	@ (80014c4 <decodeGGA+0x1dc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b2c      	cmp	r3, #44	@ 0x2c
 80013b0:	d1f2      	bne.n	8001398 <decodeGGA+0xb0>
	inx++;
 80013b2:	4b44      	ldr	r3, [pc, #272]	@ (80014c4 <decodeGGA+0x1dc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a42      	ldr	r2, [pc, #264]	@ (80014c4 <decodeGGA+0x1dc>)
 80013ba:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 80013bc:	e004      	b.n	80013c8 <decodeGGA+0xe0>
 80013be:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <decodeGGA+0x1dc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	4a3f      	ldr	r2, [pc, #252]	@ (80014c4 <decodeGGA+0x1dc>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b3e      	ldr	r3, [pc, #248]	@ (80014c4 <decodeGGA+0x1dc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b2c      	cmp	r3, #44	@ 0x2c
 80013d6:	d1f2      	bne.n	80013be <decodeGGA+0xd6>
	inx++;  // reached the character to identify the GPS Position Fix
 80013d8:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <decodeGGA+0x1dc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a39      	ldr	r2, [pc, #228]	@ (80014c4 <decodeGGA+0x1dc>)
 80013e0:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 80013e2:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <decodeGGA+0x1dc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b31      	cmp	r3, #49	@ 0x31
 80013f0:	d00f      	beq.n	8001412 <decodeGGA+0x12a>
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <decodeGGA+0x1dc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b32      	cmp	r3, #50	@ 0x32
 8001400:	d007      	beq.n	8001412 <decodeGGA+0x12a>
 8001402:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <decodeGGA+0x1dc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b36      	cmp	r3, #54	@ 0x36
 8001410:	d106      	bne.n	8001420 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	611a      	str	r2, [r3, #16]
		inx = 0;   // reset the index and extract information now
 8001418:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <decodeGGA+0x1dc>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800141e:	e009      	b.n	8001434 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
		return 1;  // return error
 8001426:	2301      	movs	r3, #1
 8001428:	e14d      	b.n	80016c6 <decodeGGA+0x3de>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800142a:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <decodeGGA+0x1dc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	4a24      	ldr	r2, [pc, #144]	@ (80014c4 <decodeGGA+0x1dc>)
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <decodeGGA+0x1dc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b2c      	cmp	r3, #44	@ 0x2c
 8001442:	d1f2      	bne.n	800142a <decodeGGA+0x142>

	// Get Latitude Information
	inx++;   // Reach the first number in the latitude
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <decodeGGA+0x1dc>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <decodeGGA+0x1dc>)
 800144c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	220c      	movs	r2, #12
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f00a f8a8 	bl	800b5ac <memset>
	i=0;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 8001460:	e013      	b.n	800148a <decodeGGA+0x1a2>
	{
		buffer[i] = GGAbuffer[inx];
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <decodeGGA+0x1dc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	7819      	ldrb	r1, [r3, #0]
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001474:	4413      	add	r3, r2
 8001476:	460a      	mov	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
		i++;
 800147a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147c:	3301      	adds	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <decodeGGA+0x1dc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <decodeGGA+0x1dc>)
 8001488:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <decodeGGA+0x1dc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b2c      	cmp	r3, #44	@ 0x2c
 8001498:	d1e3      	bne.n	8001462 <decodeGGA+0x17a>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fefe 	bl	80002a0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d801      	bhi.n	80014ae <decodeGGA+0x1c6>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e10b      	b.n	80016c6 <decodeGGA+0x3de>
	int16_t num = (atoi(buffer));
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4618      	mov	r0, r3
 80014b4:	f008 ff26 	bl	800a304 <atoi>
 80014b8:	4603      	mov	r3, r0
 80014ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int j = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80014c0:	e005      	b.n	80014ce <decodeGGA+0x1e6>
 80014c2:	bf00      	nop
 80014c4:	2000021c 	.word	0x2000021c
 80014c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ca:	3301      	adds	r3, #1
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80014da:	d1f5      	bne.n	80014c8 <decodeGGA+0x1e0>
	j++;
 80014dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014de:	3301      	adds	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe feda 	bl	80002a0 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);
 80014f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f6:	f107 020c 	add.w	r2, r7, #12
 80014fa:	4413      	add	r3, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f008 ff01 	bl	800a304 <atoi>
 8001502:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));
 8001504:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f823 	bl	8000554 <__aeabi_i2d>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b71      	ldr	r3, [pc, #452]	@ (80016d8 <decodeGGA+0x3f0>)
 8001514:	f7ff f9b2 	bl	800087c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4690      	mov	r8, r2
 800151e:	4699      	mov	r9, r3
 8001520:	69f8      	ldr	r0, [r7, #28]
 8001522:	f7ff f817 	bl	8000554 <__aeabi_i2d>
 8001526:	4604      	mov	r4, r0
 8001528:	460d      	mov	r5, r1
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	3302      	adds	r3, #2
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f810 	bl	8000554 <__aeabi_i2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	ec43 2b11 	vmov	d1, r2, r3
 800153c:	ed9f 0b64 	vldr	d0, [pc, #400]	@ 80016d0 <decodeGGA+0x3e8>
 8001540:	f00d ff2e 	bl	800f3a0 <pow>
 8001544:	ec53 2b10 	vmov	r2, r3, d0
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7ff f996 	bl	800087c <__aeabi_ddiv>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4640      	mov	r0, r8
 8001556:	4649      	mov	r1, r9
 8001558:	f7fe feb0 	bl	80002bc <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff fb58 	bl	8000c18 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the latitude data into the structure
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	601a      	str	r2, [r3, #0]
	inx++;  
 8001572:	4b5a      	ldr	r3, [pc, #360]	@ (80016dc <decodeGGA+0x3f4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <decodeGGA+0x3f4>)
 800157a:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 800157c:	4b57      	ldr	r3, [pc, #348]	@ (80016dc <decodeGGA+0x3f4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	711a      	strb	r2, [r3, #4]


	// Get Longitude Information
	inx++;  // ',' after NS character
 800158c:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <decodeGGA+0x3f4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a52      	ldr	r2, [pc, #328]	@ (80016dc <decodeGGA+0x3f4>)
 8001594:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001596:	4b51      	ldr	r3, [pc, #324]	@ (80016dc <decodeGGA+0x3f4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	4a4f      	ldr	r2, [pc, #316]	@ (80016dc <decodeGGA+0x3f4>)
 800159e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	220c      	movs	r2, #12
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f009 ffff 	bl	800b5ac <memset>
	i=0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (GGAbuffer[inx] != ',')
 80015b2:	e013      	b.n	80015dc <decodeGGA+0x2f4>
	{
		buffer[i] = GGAbuffer[inx];
 80015b4:	4b49      	ldr	r3, [pc, #292]	@ (80016dc <decodeGGA+0x3f4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	7819      	ldrb	r1, [r3, #0]
 80015c0:	f107 020c 	add.w	r2, r7, #12
 80015c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
		i++;
 80015cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ce:	3301      	adds	r3, #1
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		inx++;
 80015d2:	4b42      	ldr	r3, [pc, #264]	@ (80016dc <decodeGGA+0x3f4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3301      	adds	r3, #1
 80015d8:	4a40      	ldr	r2, [pc, #256]	@ (80016dc <decodeGGA+0x3f4>)
 80015da:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80015dc:	4b3f      	ldr	r3, [pc, #252]	@ (80016dc <decodeGGA+0x3f4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b2c      	cmp	r3, #44	@ 0x2c
 80015ea:	d1e3      	bne.n	80015b4 <decodeGGA+0x2cc>
	}
	num = (atoi(buffer));
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4618      	mov	r0, r3
 80015f2:	f008 fe87 	bl	800a304 <atoi>
 80015f6:	4603      	mov	r3, r0
 80015f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	j = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	while (buffer[j] != '.') j++;
 80015fe:	e002      	b.n	8001606 <decodeGGA+0x31e>
 8001600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001602:	3301      	adds	r3, #1
 8001604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001606:	f107 020c 	add.w	r2, r7, #12
 800160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b2e      	cmp	r3, #46	@ 0x2e
 8001612:	d1f5      	bne.n	8001600 <decodeGGA+0x318>
	j++;
 8001614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001616:	3301      	adds	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe3e 	bl	80002a0 <strlen>
 8001624:	4602      	mov	r2, r0
 8001626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162e:	f107 020c 	add.w	r2, r7, #12
 8001632:	4413      	add	r3, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f008 fe65 	bl	800a304 <atoi>
 800163a:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));
 800163c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff87 	bl	8000554 <__aeabi_i2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <decodeGGA+0x3f0>)
 800164c:	f7ff f916 	bl	800087c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4690      	mov	r8, r2
 8001656:	4699      	mov	r9, r3
 8001658:	69f8      	ldr	r0, [r7, #28]
 800165a:	f7fe ff7b 	bl	8000554 <__aeabi_i2d>
 800165e:	4604      	mov	r4, r0
 8001660:	460d      	mov	r5, r1
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	3302      	adds	r3, #2
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff74 	bl	8000554 <__aeabi_i2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	ec43 2b11 	vmov	d1, r2, r3
 8001674:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80016d0 <decodeGGA+0x3e8>
 8001678:	f00d fe92 	bl	800f3a0 <pow>
 800167c:	ec53 2b10 	vmov	r2, r3, d0
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7ff f8fa 	bl	800087c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe fe14 	bl	80002bc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fabc 	bl	8000c18 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the structure
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	609a      	str	r2, [r3, #8]
	inx++;
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <decodeGGA+0x3f4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <decodeGGA+0x3f4>)
 80016b2:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <decodeGGA+0x3f4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	731a      	strb	r2, [r3, #12]

	return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016d0:	00000000 	.word	0x00000000
 80016d4:	40240000 	.word	0x40240000
 80016d8:	40590000 	.word	0x40590000
 80016dc:	2000021c 	.word	0x2000021c

080016e0 <print>:
/* -------------------------------------------------- */
//          FUNCTION DEFINITIONS
/* -------------------------------------------------- */

void print(uint8_t data[], uint32_t len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	int i = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
	while (data[i])
 80016ee:	e009      	b.n	8001704 <print+0x24>
	{
		putchar(data[i]);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f009 fdcd 	bl	800b298 <putchar>
		i++;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
	while (data[i])
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ef      	bne.n	80016f0 <print+0x10>
	}
	printf("\n \r");
 8001710:	4803      	ldr	r0, [pc, #12]	@ (8001720 <print+0x40>)
 8001712:	f009 fdaf 	bl	800b274 <iprintf>
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08010278 	.word	0x08010278

08001724 <init_CSN_CE_PINS>:
PA5->CE
PA6-> no ack led
PA7-> ack led
*/
void init_CSN_CE_PINS()
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <init_CSN_CE_PINS+0x5c>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <init_CSN_CE_PINS+0x5c>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // CSN pin
 8001734:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <init_CSN_CE_PINS+0x60>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800173c:	4a11      	ldr	r2, [pc, #68]	@ (8001784 <init_CSN_CE_PINS+0x60>)
 800173e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001742:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // CE pin
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <init_CSN_CE_PINS+0x60>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0303 	bic.w	r3, r3, #3
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <init_CSN_CE_PINS+0x60>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER6, ESF_GPIO_MODER_OUTPUT); // no ack led
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <init_CSN_CE_PINS+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800175c:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <init_CSN_CE_PINS+0x64>)
 800175e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001762:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER7, ESF_GPIO_MODER_OUTPUT); //  ack led
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <init_CSN_CE_PINS+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800176c:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <init_CSN_CE_PINS+0x64>)
 800176e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400

0800178c <CSN_SELECT_NRF>:

void CSN_SELECT_NRF()
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR_4; // pull low to enable nrf
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <CSN_SELECT_NRF+0x1c>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <CSN_SELECT_NRF+0x1c>)
 8001796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800179a:	6193      	str	r3, [r2, #24]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40020000 	.word	0x40020000

080017ac <CSN_UNSELECT_NRF>:

void CSN_UNSELECT_NRF()
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS_4; // make high to disable
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <CSN_UNSELECT_NRF+0x1c>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <CSN_UNSELECT_NRF+0x1c>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6193      	str	r3, [r2, #24]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40020000 	.word	0x40020000

080017cc <NRF_ENABLE>:

void NRF_ENABLE()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS_0; // enable nrf
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <NRF_ENABLE+0x1c>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <NRF_ENABLE+0x1c>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6193      	str	r3, [r2, #24]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40020000 	.word	0x40020000

080017ec <NRF_DISABLE>:

void NRF_DISABLE()
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR_0; // disable nrf
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <NRF_DISABLE+0x1c>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <NRF_DISABLE+0x1c>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fa:	6193      	str	r3, [r2, #24]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40020000 	.word	0x40020000

0800180c <NRF_WRITE_REGISTER>:

void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS, uint8_t data)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
	uint8_t trans_buff[2];					  // create a temporary transmit buffer
	trans_buff[0] = REG_ADDRESS | W_REGISTER; // send register address with Write command to nrf
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f043 0320 	orr.w	r3, r3, #32
 8001822:	b2db      	uxtb	r3, r3
 8001824:	733b      	strb	r3, [r7, #12]
	trans_buff[1] = data;
 8001826:	79bb      	ldrb	r3, [r7, #6]
 8001828:	737b      	strb	r3, [r7, #13]
	CSN_SELECT_NRF();
 800182a:	f7ff ffaf 	bl	800178c <CSN_SELECT_NRF>
	SPI_TX_MULTI(trans_buff, 2); // transmit via spi
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2102      	movs	r1, #2
 8001834:	4618      	mov	r0, r3
 8001836:	f000 fa77 	bl	8001d28 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 800183a:	f7ff ffb7 	bl	80017ac <CSN_UNSELECT_NRF>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <NRF_WRITE_REG_MULTI_BYTES>:

void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS, uint8_t *data_trans, int size_trans)
{ // this function is mainlu used to write the address of the ptx or prx node
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
	uint8_t trans_buff[2];
	trans_buff[0] = REG_ADDRESS | W_REGISTER;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	f043 0320 	orr.w	r3, r3, #32
 800185a:	b2db      	uxtb	r3, r3
 800185c:	753b      	strb	r3, [r7, #20]
	CSN_SELECT_NRF();
 800185e:	f7ff ff95 	bl	800178c <CSN_SELECT_NRF>
	SPI_TX_MULTI(trans_buff, 1);		  // send register address with Write command to nrf
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2101      	movs	r1, #1
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fa5d 	bl	8001d28 <SPI_TX_MULTI>
	SPI_TX_MULTI(data_trans, size_trans); // transmit the data_trans buffer in one shot
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	68b8      	ldr	r0, [r7, #8]
 8001872:	f000 fa59 	bl	8001d28 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 8001876:	f7ff ff99 	bl	80017ac <CSN_UNSELECT_NRF>
}
 800187a:	bf00      	nop
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <NRF_READ_REGISTER>:

uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
	uint8_t data_returned = 0; // a variable to store data read from register
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
	CSN_SELECT_NRF();
 8001890:	f7ff ff7c 	bl	800178c <CSN_SELECT_NRF>
	SPI_TX_MULTI(&REG_ADDRESS, 1); // send register address
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	2101      	movs	r1, #1
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fa45 	bl	8001d28 <SPI_TX_MULTI>
	SPI_READ_MULTI(&data_returned, 1);
 800189e:	f107 030f 	add.w	r3, r7, #15
 80018a2:	2101      	movs	r1, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fa77 	bl	8001d98 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 80018aa:	f7ff ff7f 	bl	80017ac <CSN_UNSELECT_NRF>
	return data_returned; // return data
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <NRF_PTX_CONFIG>:
	SPI_READ_MULTI(RECV_BUFFER, RECV_BUFFER_SIZE); // read RECV_BUFFER_SIZE number of bytes and store in  RECV_BUFFER
	CSN_UNSELECT_NRF();
}

void NRF_PTX_CONFIG(uint8_t *Address, uint8_t channel)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]
	NRF_DISABLE();									// first disable nrf
 80018c4:	f7ff ff92 	bl	80017ec <NRF_DISABLE>
	NRF_WRITE_REGISTER(RF_CH, channel);				// select channel
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	4619      	mov	r1, r3
 80018cc:	2005      	movs	r0, #5
 80018ce:	f7ff ff9d 	bl	800180c <NRF_WRITE_REGISTER>
	NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, Address, 5); // set address
 80018d2:	2205      	movs	r2, #5
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	2010      	movs	r0, #16
 80018d8:	f7ff ffb5 	bl	8001846 <NRF_WRITE_REG_MULTI_BYTES>

	uint8_t current_pipe_status = NRF_READ_REGISTER(EN_RXADDR);
 80018dc:	2002      	movs	r0, #2
 80018de:	f7ff ffd0 	bl	8001882 <NRF_READ_REGISTER>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
	current_pipe_status = current_pipe_status | (1 << 0); // enable pipe 0
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
	NRF_WRITE_REGISTER(EN_RXADDR, current_pipe_status);	  // enable pipe 0 as receiving pipe as well
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	4619      	mov	r1, r3
 80018f2:	2002      	movs	r0, #2
 80018f4:	f7ff ff8a 	bl	800180c <NRF_WRITE_REGISTER>
	NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, Address, 5);	  // pipe address
 80018f8:	2205      	movs	r2, #5
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	200a      	movs	r0, #10
 80018fe:	f7ff ffa2 	bl	8001846 <NRF_WRITE_REG_MULTI_BYTES>

	NRF_WRITE_REGISTER(CONFIG, 0x0a); // power on device and keep in tx mode
 8001902:	210a      	movs	r1, #10
 8001904:	2000      	movs	r0, #0
 8001906:	f7ff ff81 	bl	800180c <NRF_WRITE_REGISTER>
	delay(5);
 800190a:	2005      	movs	r0, #5
 800190c:	f000 fac2 	bl	8001e94 <delay>
	// NRF_ENABLE(); //nrf should be kept disabled
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b07      	cmp	r3, #7
 8001926:	d104      	bne.n	8001932 <nrf24_reset+0x1a>
	{
		NRF_WRITE_REGISTER(STATUS, 0x00);
 8001928:	2100      	movs	r1, #0
 800192a:	2007      	movs	r0, #7
 800192c:	f7ff ff6e 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
		NRF_WRITE_REGISTER(DYNPD, 0);
		NRF_WRITE_REGISTER(FEATURE, 0);
	}
}
 8001930:	e059      	b.n	80019e6 <nrf24_reset+0xce>
	else if (REG == FIFO_STATUS)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b17      	cmp	r3, #23
 8001936:	d104      	bne.n	8001942 <nrf24_reset+0x2a>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 8001938:	2111      	movs	r1, #17
 800193a:	2017      	movs	r0, #23
 800193c:	f7ff ff66 	bl	800180c <NRF_WRITE_REGISTER>
}
 8001940:	e051      	b.n	80019e6 <nrf24_reset+0xce>
		NRF_WRITE_REGISTER(CONFIG, 0x08);
 8001942:	2108      	movs	r1, #8
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff ff61 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_AA, 0x3F);
 800194a:	213f      	movs	r1, #63	@ 0x3f
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff ff5d 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(EN_RXADDR, 0x03);
 8001952:	2103      	movs	r1, #3
 8001954:	2002      	movs	r0, #2
 8001956:	f7ff ff59 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_AW, 0x03);
 800195a:	2103      	movs	r1, #3
 800195c:	2003      	movs	r0, #3
 800195e:	f7ff ff55 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(SETUP_RETR, 0x03);
 8001962:	2103      	movs	r1, #3
 8001964:	2004      	movs	r0, #4
 8001966:	f7ff ff51 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_CH, 0x02);
 800196a:	2102      	movs	r1, #2
 800196c:	2005      	movs	r0, #5
 800196e:	f7ff ff4d 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(RF_SETUP, 0x0E);
 8001972:	210e      	movs	r1, #14
 8001974:	2006      	movs	r0, #6
 8001976:	f7ff ff49 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(STATUS, 0x00);
 800197a:	2100      	movs	r1, #0
 800197c:	2007      	movs	r0, #7
 800197e:	f7ff ff45 	bl	800180c <NRF_WRITE_REGISTER>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001982:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <nrf24_reset+0xd8>)
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	e892 0003 	ldmia.w	r2, {r0, r1}
 800198c:	6018      	str	r0, [r3, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	7019      	strb	r1, [r3, #0]
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001992:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <nrf24_reset+0xdc>)
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199c:	6018      	str	r0, [r3, #0]
 800199e:	3304      	adds	r3, #4
 80019a0:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P1, rx_addr_p1_def, 5);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2205      	movs	r2, #5
 80019a8:	4619      	mov	r1, r3
 80019aa:	200b      	movs	r0, #11
 80019ac:	f7ff ff4b 	bl	8001846 <NRF_WRITE_REG_MULTI_BYTES>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80019b0:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <nrf24_reset+0xd8>)
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ba:	6018      	str	r0, [r3, #0]
 80019bc:	3304      	adds	r3, #4
 80019be:	7019      	strb	r1, [r3, #0]
		NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, tx_addr_def, 5);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	2205      	movs	r2, #5
 80019c6:	4619      	mov	r1, r3
 80019c8:	2010      	movs	r0, #16
 80019ca:	f7ff ff3c 	bl	8001846 <NRF_WRITE_REG_MULTI_BYTES>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11);
 80019ce:	2111      	movs	r1, #17
 80019d0:	2017      	movs	r0, #23
 80019d2:	f7ff ff1b 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(DYNPD, 0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	201c      	movs	r0, #28
 80019da:	f7ff ff17 	bl	800180c <NRF_WRITE_REGISTER>
		NRF_WRITE_REGISTER(FEATURE, 0);
 80019de:	2100      	movs	r1, #0
 80019e0:	201d      	movs	r0, #29
 80019e2:	f7ff ff13 	bl	800180c <NRF_WRITE_REGISTER>
}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	0801027c 	.word	0x0801027c
 80019f4:	08010284 	.word	0x08010284

080019f8 <NRF_INIT>:

void NRF_INIT()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	SPI_INIT();			// initalize spi communication
 80019fc:	f000 f918 	bl	8001c30 <SPI_INIT>
	init_CSN_CE_PINS(); // initalize chip select and chip enable pin
 8001a00:	f7ff fe90 	bl	8001724 <init_CSN_CE_PINS>
	NRF_DISABLE();		// disable the chip
 8001a04:	f7ff fef2 	bl	80017ec <NRF_DISABLE>
	nrf24_reset(0);		// reset the register
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff ff85 	bl	8001918 <nrf24_reset>

	NRF_WRITE_REGISTER(CONFIG, 0); // during inital config leaving it as default
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fefb 	bl	800180c <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(EN_RXADDR, 0); // during inital config leaving it as defaul
 8001a16:	2100      	movs	r1, #0
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f7ff fef7 	bl	800180c <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(SETUP_AW, 0x03); // 0x03 corresponds to 5 bytes for rx/tx address
 8001a1e:	2103      	movs	r1, #3
 8001a20:	2003      	movs	r0, #3
 8001a22:	f7ff fef3 	bl	800180c <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(RF_CH, 0); // during inital config leaving it as default
 8001a26:	2100      	movs	r1, #0
 8001a28:	2005      	movs	r0, #5
 8001a2a:	f7ff feef 	bl	800180c <NRF_WRITE_REGISTER>
	auto ack with payload feature of the NRF. This is crucial for setting up the
	bidirectional communication b/w the 2 boards
	*/

	// for DYNP NRF require EN_AA and Requires EN_DPL and ENAA_P0
	NRF_WRITE_REGISTER(DYNPD, 0x3f);	  // enable dynamic payload with ack
 8001a2e:	213f      	movs	r1, #63	@ 0x3f
 8001a30:	201c      	movs	r0, #28
 8001a32:	f7ff feeb 	bl	800180c <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(FEATURE, 0x6);	  // enable dynamic payload length
 8001a36:	2106      	movs	r1, #6
 8001a38:	201d      	movs	r0, #29
 8001a3a:	f7ff fee7 	bl	800180c <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(EN_AA, 0x3f);	  // enable auto ack
 8001a3e:	213f      	movs	r1, #63	@ 0x3f
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fee3 	bl	800180c <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 8001a46:	21ff      	movs	r1, #255	@ 0xff
 8001a48:	2004      	movs	r0, #4
 8001a4a:	f7ff fedf 	bl	800180c <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(RF_SETUP, 0x0e); // Power= 0db, data rate = 2Mbps
 8001a4e:	210e      	movs	r1, #14
 8001a50:	2006      	movs	r0, #6
 8001a52:	f7ff fedb 	bl	800180c <NRF_WRITE_REGISTER>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <NRD_SEND_CMD>:

void NRD_SEND_CMD(uint8_t cmd)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	4603      	mov	r3, r0
 8001a62:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CSN_SELECT_NRF();
 8001a64:	f7ff fe92 	bl	800178c <CSN_SELECT_NRF>

	SPI_TX_MULTI(&cmd, 1);
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f95b 	bl	8001d28 <SPI_TX_MULTI>

	// Pull the CS HIGH to release the device
	CSN_UNSELECT_NRF();
 8001a72:	f7ff fe9b 	bl	80017ac <CSN_UNSELECT_NRF>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <NRF_TX_DATA>:

uint8_t NRF_TX_DATA(uint8_t *data_ptr, uint8_t sizeofdata)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
	uint8_t status_reg; // a variable to store  status_reg info
	/*
	the data sheet specifies that first data has to be written with TX command and then
	a pulse on the CE pin for atleast 10uS actually transmits the data
	*/
	CSN_SELECT_NRF();
 8001a8c:	f7ff fe7e 	bl	800178c <CSN_SELECT_NRF>
	uint8_t cmd = W_TX_PAYLOAD; // send write payload command
 8001a90:	23a0      	movs	r3, #160	@ 0xa0
 8001a92:	737b      	strb	r3, [r7, #13]
	SPI_TX_MULTI(&cmd, 1);
 8001a94:	f107 030d 	add.w	r3, r7, #13
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f944 	bl	8001d28 <SPI_TX_MULTI>
	SPI_TX_MULTI(data_ptr, sizeofdata); // send payload
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f93f 	bl	8001d28 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 8001aaa:	f7ff fe7f 	bl	80017ac <CSN_UNSELECT_NRF>
	// pulse ce
	NRF_ENABLE();
 8001aae:	f7ff fe8d 	bl	80017cc <NRF_ENABLE>
	delay(10);
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f000 f9ee 	bl	8001e94 <delay>
	NRF_DISABLE();
 8001ab8:	f7ff fe98 	bl	80017ec <NRF_DISABLE>
	tx_fifo_stat = NRF_READ_REGISTER(FIFO_STATUS);
 8001abc:	2017      	movs	r0, #23
 8001abe:	f7ff fee0 	bl	8001882 <NRF_READ_REGISTER>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]
	// read status register
	status_reg = NRF_READ_REGISTER(STATUS);
 8001ac6:	2007      	movs	r0, #7
 8001ac8:	f7ff fedb 	bl	8001882 <NRF_READ_REGISTER>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73bb      	strb	r3, [r7, #14]
	/*post transmission the ptx is converted to receiver and checks for an ack message*/
	NRF_ENABLE(); // enable nrf to conver it into receiver mode
 8001ad0:	f7ff fe7c 	bl	80017cc <NRF_ENABLE>
	delay(10);
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f000 f9dd 	bl	8001e94 <delay>
	// chceck for data on pipe 0
	if (is_data_on_pipe(0) == 1)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f868 	bl	8001bb0 <is_data_on_pipe>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d11d      	bne.n	8001b22 <NRF_TX_DATA+0xa2>
	{
		// if data is received on pipe 0 means an ack message is recieved
		// we blink ack (green) led
		GPIOB->BSRR |= GPIO_BSRR_BS_7;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a2c      	ldr	r2, [pc, #176]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	6193      	str	r3, [r2, #24]
		delay(300);
 8001af2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001af6:	f000 f9cd 	bl	8001e94 <delay>
		GPIOB->BSRR |= GPIO_BSRR_BR_7;
 8001afa:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	4a27      	ldr	r2, [pc, #156]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001b00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b04:	6193      	str	r3, [r2, #24]
		delay(300);
 8001b06:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b0a:	f000 f9c3 	bl	8001e94 <delay>
		print_success("ACK RECIEVED FROM PRX NODE ! \n \r");
 8001b0e:	4824      	ldr	r0, [pc, #144]	@ (8001ba0 <NRF_TX_DATA+0x120>)
 8001b10:	f000 feee 	bl	80028f0 <print_success>
		NRF_RECV_DATA(command_ack); // call receive function to read payload
 8001b14:	4823      	ldr	r0, [pc, #140]	@ (8001ba4 <NRF_TX_DATA+0x124>)
 8001b16:	f000 f865 	bl	8001be4 <NRF_RECV_DATA>
		print(command_ack, 32);		// print the payload
 8001b1a:	2120      	movs	r1, #32
 8001b1c:	4821      	ldr	r0, [pc, #132]	@ (8001ba4 <NRF_TX_DATA+0x124>)
 8001b1e:	f7ff fddf 	bl	80016e0 <print>
	}
	/*error handling*/
	if (status_reg & (MAX_NUMBER_OF_RETRANSMISSION_MASK))
 8001b22:	7bbb      	ldrb	r3, [r7, #14]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d031      	beq.n	8001b90 <NRF_TX_DATA+0x110>
	{
		// if max number of retranmission is rached and no ack is received the bit has to be cleared to enable
		// further communication
		print_error("\n\rMax number of retransmission Reached !\n \r");
 8001b2c:	481e      	ldr	r0, [pc, #120]	@ (8001ba8 <NRF_TX_DATA+0x128>)
 8001b2e:	f000 fefb 	bl	8002928 <print_error>
		// blink no-ack (red led)
		GPIOB->BSRR |= GPIO_BSRR_BS_6;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	4a19      	ldr	r2, [pc, #100]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3c:	6193      	str	r3, [r2, #24]
		delay(300);
 8001b3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b42:	f000 f9a7 	bl	8001e94 <delay>
		GPIOB->BSRR |= GPIO_BSRR_BR_6;
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a14      	ldr	r2, [pc, #80]	@ (8001b9c <NRF_TX_DATA+0x11c>)
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b50:	6193      	str	r3, [r2, #24]
		delay(300);
 8001b52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b56:	f000 f99d 	bl	8001e94 <delay>
		// clear MAX_NUMBER_OF_RETRANSMISSION_MASK bit by writing a one
		status_reg = status_reg | (1 << 4) | (1 << 5);
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001b60:	73bb      	strb	r3, [r7, #14]
		NRF_WRITE_REGISTER(STATUS, status_reg);
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	4619      	mov	r1, r3
 8001b66:	2007      	movs	r0, #7
 8001b68:	f7ff fe50 	bl	800180c <NRF_WRITE_REGISTER>
		status_reg = NRF_READ_REGISTER(STATUS);
 8001b6c:	2007      	movs	r0, #7
 8001b6e:	f7ff fe88 	bl	8001882 <NRF_READ_REGISTER>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73bb      	strb	r3, [r7, #14]
		print_info("Clearing MAX retransmission flag ! \n \r");
 8001b76:	480d      	ldr	r0, [pc, #52]	@ (8001bac <NRF_TX_DATA+0x12c>)
 8001b78:	f000 fec8 	bl	800290c <print_info>
		cmd = FLUSH_TX; // flush transmit buffer
 8001b7c:	23e1      	movs	r3, #225	@ 0xe1
 8001b7e:	737b      	strb	r3, [r7, #13]
		NRD_SEND_CMD(cmd);
 8001b80:	7b7b      	ldrb	r3, [r7, #13]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff69 	bl	8001a5a <NRD_SEND_CMD>
		NRF_WRITE_REGISTER(FIFO_STATUS, 0x11); // reset fifo
 8001b88:	2111      	movs	r1, #17
 8001b8a:	2017      	movs	r0, #23
 8001b8c:	f7ff fe3e 	bl	800180c <NRF_WRITE_REGISTER>
	}

	return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	0801028c 	.word	0x0801028c
 8001ba4:	20000220 	.word	0x20000220
 8001ba8:	080102b0 	.word	0x080102b0
 8001bac:	080102dc 	.word	0x080102dc

08001bb0 <is_data_on_pipe>:

uint8_t is_data_on_pipe(uint8_t pipenum)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t status_reg = NRF_READ_REGISTER(STATUS);
 8001bba:	2007      	movs	r0, #7
 8001bbc:	f7ff fe61 	bl	8001882 <NRF_READ_REGISTER>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]
	// if 6 th bit is set and respective data pipe is set
	if (status_reg & (NEW_DATA_ON_RX_FIFO))
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <is_data_on_pipe+0x2a>
	{
		// clear rx_dr
		NRF_WRITE_REGISTER(STATUS, (NEW_DATA_ON_RX_FIFO));
 8001bce:	2140      	movs	r1, #64	@ 0x40
 8001bd0:	2007      	movs	r0, #7
 8001bd2:	f7ff fe1b 	bl	800180c <NRF_WRITE_REGISTER>
		return 1; // data received
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <is_data_on_pipe+0x2c>
	}
	return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <NRF_RECV_DATA>:

void NRF_RECV_DATA(uint8_t *data_ptr_RECV)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	uint8_t cmd = R_RX_PL_WID;
 8001bec:	2360      	movs	r3, #96	@ 0x60
 8001bee:	73bb      	strb	r3, [r7, #14]
	uint8_t payLoad_width = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
	CSN_SELECT_NRF();
 8001bf4:	f7ff fdca 	bl	800178c <CSN_SELECT_NRF>
	cmd = R_RX_PAYLOAD; // send command to read the payload data
 8001bf8:	2361      	movs	r3, #97	@ 0x61
 8001bfa:	73bb      	strb	r3, [r7, #14]
	SPI_TX_MULTI(&cmd, 1);
 8001bfc:	f107 030e 	add.w	r3, r7, #14
 8001c00:	2101      	movs	r1, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f890 	bl	8001d28 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV, 10); // fetch payload
 8001c08:	210a      	movs	r1, #10
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f8c4 	bl	8001d98 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8001c10:	f7ff fdcc 	bl	80017ac <CSN_UNSELECT_NRF>
	delay(10);
 8001c14:	200a      	movs	r0, #10
 8001c16:	f000 f93d 	bl	8001e94 <delay>
	cmd = FLUSH_RX;
 8001c1a:	23e2      	movs	r3, #226	@ 0xe2
 8001c1c:	73bb      	strb	r3, [r7, #14]
	NRD_SEND_CMD(cmd); // flush rx fifo
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff1a 	bl	8001a5a <NRD_SEND_CMD>
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <SPI_INIT>:
 * This file contains definitions for spi config and basic read write operations.
   ---------------------------------------------------------------------------------*/

/* -------------------------------------------------- */
//          INCLUDES & DEFINES
/* -------------------------------------------------- */
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
#include "SPI.h"
#include "stdio.h"
 8001c34:	4b39      	ldr	r3, [pc, #228]	@ (8001d1c <SPI_INIT+0xec>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	4a38      	ldr	r2, [pc, #224]	@ (8001d1c <SPI_INIT+0xec>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6313      	str	r3, [r2, #48]	@ 0x30

/* -------------------------------------------------- */
//          FUNCTION DEFINITIONS
 8001c40:	4b37      	ldr	r3, [pc, #220]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001c48:	4a35      	ldr	r2, [pc, #212]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c4a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c4e:	6013      	str	r3, [r2, #0]
/* -------------------------------------------------- */
 8001c50:	4b33      	ldr	r3, [pc, #204]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c58:	4a31      	ldr	r2, [pc, #196]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c5e:	6013      	str	r3, [r2, #0]

 8001c60:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c68:	4a2d      	ldr	r2, [pc, #180]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6e:	6013      	str	r3, [r2, #0]
void SPI_INIT()
{
 8001c70:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001c78:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c7a:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001c7e:	6213      	str	r3, [r2, #32]
	// enable clock for gpioA peripheral
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001c88:	4a25      	ldr	r2, [pc, #148]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c8a:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8001c8e:	6213      	str	r3, [r2, #32]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001c90:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001c98:	4a21      	ldr	r2, [pc, #132]	@ (8001d20 <SPI_INIT+0xf0>)
 8001c9a:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8001c9e:	6213      	str	r3, [r2, #32]

	// declare pa5,pa6,pa7 as alternate functional pins
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER5, ESF_GPIO_MODER_ALT_FUNC); // PA5-> SPI1_SCK
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER6, ESF_GPIO_MODER_ALT_FUNC); // PA6-> SPI1_MISO
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <SPI_INIT+0xec>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <SPI_INIT+0xec>)
 8001ca6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001caa:	6453      	str	r3, [r2, #68]	@ 0x44
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER7, ESF_GPIO_MODER_ALT_FUNC); // PA7-> SPI1_MOSI

 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cb2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001cb6:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL5, 5);
	MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL6, 5);
	MODIFY_FIELD(GPIOA->AFR[0], GPIO_AFRL_AFSEL7, 5);
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6013      	str	r3, [r2, #0]

	// enable clock for spi1 peripheral
 8001cc4:	4b17      	ldr	r3, [pc, #92]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001ccc:	4a15      	ldr	r2, [pc, #84]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cce:	f043 0318 	orr.w	r3, r3, #24
 8001cd2:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
	// enable software slave management
 8001cd4:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <SPI_INIT+0xf4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <SPI_INIT+0xf4>)
 8001ce6:	f023 0302 	bic.w	r3, r3, #2
 8001cea:	6013      	str	r3, [r2, #0]

	// configure spi in master mode
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6053      	str	r3, [r2, #4]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <SPI_INIT+0xf4>)
 8001cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d02:	6013      	str	r3, [r2, #0]
	// set spi baud rate
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR, 3);
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <SPI_INIT+0xf4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a06      	ldr	r2, [pc, #24]	@ (8001d24 <SPI_INIT+0xf4>)
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0e:	6013      	str	r3, [r2, #0]
	// set cpol and cpha as 0,0 spi mode 0
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40013000 	.word	0x40013000

08001d28 <SPI_TX_MULTI>:
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);

 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	SPI1->CR2 |= 0x4;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
	SPI1->CR1 |= 0x40;
	// Enabling SPI SPI peripheral
 8001d36:	e00f      	b.n	8001d58 <SPI_TX_MULTI+0x30>
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8001d38:	bf00      	nop
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <SPI_TX_MULTI+0x6c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f9      	beq.n	8001d3a <SPI_TX_MULTI+0x12>
}
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <SPI_TX_MULTI+0x6c>)
 8001d50:	60da      	str	r2, [r3, #12]

 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
	// Enabling SPI SPI peripheral
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbeb      	blt.n	8001d38 <SPI_TX_MULTI+0x10>
// send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr, int size)
{
 8001d60:	bf00      	nop
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <SPI_TX_MULTI+0x6c>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f9      	beq.n	8001d62 <SPI_TX_MULTI+0x3a>
	int i = 0;

	while (i < size)
 8001d6e:	bf00      	nop
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <SPI_TX_MULTI+0x6c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f9      	bne.n	8001d70 <SPI_TX_MULTI+0x48>
	{
		while (!(SPI1->SR & (SPI_SR_TXE)))
		{
		}
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SPI_TX_MULTI+0x6c>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	72fb      	strb	r3, [r7, #11]
		SPI1->DR = data_ptr[i];
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SPI_TX_MULTI+0x6c>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	72fb      	strb	r3, [r7, #11]
		i++;
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40013000 	.word	0x40013000

08001d98 <SPI_READ_MULTI>:
	}
	/*Wait until TXE is set*/
	while (!(SPI1->SR & (SPI_SR_TXE)))
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	{
 8001da2:	e013      	b.n	8001dcc <SPI_READ_MULTI+0x34>
	}

	/*Wait for BUSY flag to reset*/
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <SPI_READ_MULTI+0x48>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
	while ((SPI1->SR & (SPI_SR_BSY)))
	{
	}
 8001daa:	bf00      	nop
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <SPI_READ_MULTI+0x48>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f9      	beq.n	8001dac <SPI_READ_MULTI+0x14>

	uint8_t software_clear_OVR_FLAG;
	/*read DR first and then SR to clear OVR flag to avoid interruptions in spi*/
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <SPI_READ_MULTI+0x48>)
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
	software_clear_OVR_FLAG = SPI1->DR;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	603b      	str	r3, [r7, #0]
	{
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1e8      	bne.n	8001da4 <SPI_READ_MULTI+0xc>
	software_clear_OVR_FLAG = SPI1->SR;
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40013000 	.word	0x40013000

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <delay_init>:
extern int VCCTimeout;
extern uint16_t Timer1, Timer2;

volatile uint64_t mil;

void delay_init(){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0

	SysTick->LOAD = SYSTICK_LOAD; //20 ms each tick
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <delay_init+0x28>)
 8001e3e:	f241 726f 	movw	r2, #5999	@ 0x176f
 8001e42:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, 3);
 8001e44:	2103      	movs	r1, #3
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4a:	f7ff ffcb 	bl	8001de4 <__NVIC_SetPriority>
	SysTick->VAL = 0;
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <delay_init+0x28>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <delay_init+0x28>)
 8001e56:	2203      	movs	r2, #3
 8001e58:	601a      	str	r2, [r3, #0]

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <millis>:



uint64_t millis()
	{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6a:	b672      	cpsid	i
}
 8001e6c:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <millis+0x2c>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e78:	b662      	cpsie	i
}
 8001e7a:	bf00      	nop
	__enable_irq();
	return ml;
 8001e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000240 	.word	0x20000240

08001e94 <delay>:



void delay(uint32_t time)
	{
 8001e94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 8001e9e:	f7ff ffe1 	bl	8001e64 <millis>
 8001ea2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffdc 	bl	8001e64 <millis>
 8001eac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb0:	1a84      	subs	r4, r0, r2
 8001eb2:	eb61 0503 	sbc.w	r5, r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	4698      	mov	r8, r3
 8001ebc:	4691      	mov	r9, r2
 8001ebe:	4544      	cmp	r4, r8
 8001ec0:	eb75 0309 	sbcs.w	r3, r5, r9
 8001ec4:	d3f0      	bcc.n	8001ea8 <delay+0x14>

	}
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001ed4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	mil++;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <SysTick_Handler+0x70>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	1c50      	adds	r0, r2, #1
 8001ee0:	f143 0100 	adc.w	r1, r3, #0
 8001ee4:	4b17      	ldr	r3, [pc, #92]	@ (8001f44 <SysTick_Handler+0x70>)
 8001ee6:	e9c3 0100 	strd	r0, r1, [r3]
    if (timeout > 0)  timeout--;
 8001eea:	4b17      	ldr	r3, [pc, #92]	@ (8001f48 <SysTick_Handler+0x74>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <SysTick_Handler+0x2a>
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <SysTick_Handler+0x74>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <SysTick_Handler+0x74>)
 8001efc:	801a      	strh	r2, [r3, #0]
	if (VCCTimeout>0) VCCTimeout--;
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <SysTick_Handler+0x78>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	dd04      	ble.n	8001f10 <SysTick_Handler+0x3c>
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <SysTick_Handler+0x78>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <SysTick_Handler+0x78>)
 8001f0e:	6013      	str	r3, [r2, #0]
	if (Timer1 > 0){
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <SysTick_Handler+0x7c>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <SysTick_Handler+0x50>
		Timer1--;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <SysTick_Handler+0x7c>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <SysTick_Handler+0x7c>)
 8001f22:	801a      	strh	r2, [r3, #0]
	}
	if (Timer2 > 0){
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <SysTick_Handler+0x80>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <SysTick_Handler+0x64>
		Timer2--;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <SysTick_Handler+0x80>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <SysTick_Handler+0x80>)
 8001f36:	801a      	strh	r2, [r3, #0]
	}
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000240 	.word	0x20000240
 8001f48:	200006ec 	.word	0x200006ec
 8001f4c:	20000004 	.word	0x20000004
 8001f50:	20000248 	.word	0x20000248
 8001f54:	2000024a 	.word	0x2000024a

08001f58 <SELECT>:
 *
 * Returns:
 * 	None
 */
static void SELECT(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f62:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <SELECT+0x1c>)
 8001f64:	f003 f95c 	bl	8005220 <HAL_GPIO_WritePin>
  delay(10);
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f7ff ff93 	bl	8001e94 <delay>
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020400 	.word	0x40020400

08001f78 <DESELECT>:
 *
 * Returns:
 * 	None
 */
static void DESELECT(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f82:	4804      	ldr	r0, [pc, #16]	@ (8001f94 <DESELECT+0x1c>)
 8001f84:	f003 f94c 	bl	8005220 <HAL_GPIO_WritePin>
  delay(10);
 8001f88:	200a      	movs	r0, #10
 8001f8a:	f7ff ff83 	bl	8001e94 <delay>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020400 	.word	0x40020400

08001f98 <SPI_TxByte>:
 *
 * Returns:
 * 	None
 */
static void SPI_TxByte(uint8_t data)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fa2:	bf00      	nop
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <SPI_TxByte+0x30>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d1f8      	bne.n	8001fa4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001fb2:	1df9      	adds	r1, r7, #7
 8001fb4:	2364      	movs	r3, #100	@ 0x64
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4803      	ldr	r0, [pc, #12]	@ (8001fc8 <SPI_TxByte+0x30>)
 8001fba:	f003 fe6c 	bl	8005c96 <HAL_SPI_Transmit>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000304 	.word	0x20000304

08001fcc <SPI_TxBuffer>:
 *
 * Returns:
 * 	None
 */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001fd8:	bf00      	nop
 8001fda:	4b08      	ldr	r3, [pc, #32]	@ (8001ffc <SPI_TxBuffer+0x30>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d1f8      	bne.n	8001fda <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	2364      	movs	r3, #100	@ 0x64
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <SPI_TxBuffer+0x30>)
 8001ff0:	f003 fe51 	bl	8005c96 <HAL_SPI_Transmit>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000304 	.word	0x20000304

08002000 <SPI_RxByte>:
 *
 * Returns:
 * 	data: Returns the byte received
 */
static uint8_t SPI_RxByte(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af02      	add	r7, sp, #8
  uint8_t temp_data, data;
  temp_data = 0xFF;
 8002006:	23ff      	movs	r3, #255	@ 0xff
 8002008:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800200a:	bf00      	nop
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <SPI_RxByte+0x34>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d1f8      	bne.n	800200c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &temp_data, &data, 1, SPI_TIMEOUT);
 800201a:	1dba      	adds	r2, r7, #6
 800201c:	1df9      	adds	r1, r7, #7
 800201e:	2364      	movs	r3, #100	@ 0x64
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2301      	movs	r3, #1
 8002024:	4803      	ldr	r0, [pc, #12]	@ (8002034 <SPI_RxByte+0x34>)
 8002026:	f003 ff7a 	bl	8005f1e <HAL_SPI_TransmitReceive>
  return data;
 800202a:	79bb      	ldrb	r3, [r7, #6]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000304 	.word	0x20000304

08002038 <SPI_RxBytePtr>:
 *
 * Returns:
 * 	buff: Pointer to the buffer with the received data.
 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002040:	f7ff ffde 	bl	8002000 <SPI_RxByte>
 8002044:	4603      	mov	r3, r0
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	701a      	strb	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <SD_ReadyWait>:
 *
 * Returns:
 * 	res: Receives 0xff when SD card is ready
 */
static uint8_t SD_ReadyWait(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  uint8_t res;
  Timer2 = 500; /* timeout 500ms */
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <SD_ReadyWait+0x30>)
 800205c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002060:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002062:	f7ff ffcd 	bl	8002000 <SPI_RxByte>
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2bff      	cmp	r3, #255	@ 0xff
 800206e:	d003      	beq.n	8002078 <SD_ReadyWait+0x24>
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <SD_ReadyWait+0x30>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1f4      	bne.n	8002062 <SD_ReadyWait+0xe>
  return res;
 8002078:	79fb      	ldrb	r3, [r7, #7]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000024a 	.word	0x2000024a

08002088 <SD_PowerOn>:
 *
 * Returns:
 * 	None
 */
static void SD_PowerOn(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800208e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8002092:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8002094:	f7ff ff70 	bl	8001f78 <DESELECT>
  for(int i = 0; i < 10; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	e005      	b.n	80020aa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800209e:	20ff      	movs	r0, #255	@ 0xff
 80020a0:	f7ff ff7a 	bl	8001f98 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	ddf6      	ble.n	800209e <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80020b0:	f7ff ff52 	bl	8001f58 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0: GO_IDLE_STATE */
 80020b4:	2340      	movs	r3, #64	@ 0x40
 80020b6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80020c8:	2395      	movs	r3, #149	@ 0x95
 80020ca:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80020cc:	463b      	mov	r3, r7
 80020ce:	2106      	movs	r1, #6
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff7b 	bl	8001fcc <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80020d6:	e002      	b.n	80020de <SD_PowerOn+0x56>
  {
    cnt--;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3b01      	subs	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80020de:	f7ff ff8f 	bl	8002000 <SPI_RxByte>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d002      	beq.n	80020ee <SD_PowerOn+0x66>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f4      	bne.n	80020d8 <SD_PowerOn+0x50>
  }

  DESELECT();
 80020ee:	f7ff ff43 	bl	8001f78 <DESELECT>
  SPI_TxByte(0XFF);
 80020f2:	20ff      	movs	r0, #255	@ 0xff
 80020f4:	f7ff ff50 	bl	8001f98 <SPI_TxByte>

  PowerFlag = 1;
 80020f8:	4b03      	ldr	r3, [pc, #12]	@ (8002108 <SD_PowerOn+0x80>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000024d 	.word	0x2000024d

0800210c <SD_PowerOff>:
 *
 * Returns:
 * 	None
 */
static void SD_PowerOff(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <SD_PowerOff+0x14>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	2000024d 	.word	0x2000024d

08002124 <SD_CheckPower>:
 *
 * Returns:
 * 	None
 */
static uint8_t SD_CheckPower(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <SD_CheckPower+0x14>)
 800212a:	781b      	ldrb	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	2000024d 	.word	0x2000024d

0800213c <SD_RxDataBlock>:
 * Returns:
 * 	TRUE(1): On Success
 * 	FALSE(0): On Failure
 */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint8_t token;
  Timer1 = 200;   /* timeout 200ms */
 8002146:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <SD_RxDataBlock+0x58>)
 8002148:	22c8      	movs	r2, #200	@ 0xc8
 800214a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800214c:	f7ff ff58 	bl	8002000 <SPI_RxByte>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2bff      	cmp	r3, #255	@ 0xff
 8002158:	d103      	bne.n	8002162 <SD_RxDataBlock+0x26>
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <SD_RxDataBlock+0x58>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f4      	bne.n	800214c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2bfe      	cmp	r3, #254	@ 0xfe
 8002166:	d001      	beq.n	800216c <SD_RxDataBlock+0x30>
 8002168:	2300      	movs	r3, #0
 800216a:	e00f      	b.n	800218c <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff60 	bl	8002038 <SPI_RxBytePtr>
  } while(len--);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	1e5a      	subs	r2, r3, #1
 800217c:	603a      	str	r2, [r7, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f4      	bne.n	800216c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8002182:	f7ff ff3d 	bl	8002000 <SPI_RxByte>
  SPI_RxByte();
 8002186:	f7ff ff3b 	bl	8002000 <SPI_RxByte>

  return TRUE;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000248 	.word	0x20000248

08002198 <SD_TxDataBlock>:
 * 	TRUE(1): On Success
 * 	FALSE(0): On Failure
 */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80021a8:	f7ff ff54 	bl	8002054 <SD_ReadyWait>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2bff      	cmp	r3, #255	@ 0xff
 80021b0:	d001      	beq.n	80021b6 <SD_TxDataBlock+0x1e>
 80021b2:	2300      	movs	r3, #0
 80021b4:	e02f      	b.n	8002216 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff feed 	bl	8001f98 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	2bfd      	cmp	r3, #253	@ 0xfd
 80021c2:	d020      	beq.n	8002206 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80021c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff feff 	bl	8001fcc <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80021ce:	f7ff ff17 	bl	8002000 <SPI_RxByte>
    SPI_RxByte();
 80021d2:	f7ff ff15 	bl	8002000 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80021d6:	e00b      	b.n	80021f0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80021d8:	f7ff ff12 	bl	8002000 <SPI_RxByte>
 80021dc:	4603      	mov	r3, r0
 80021de:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d006      	beq.n	80021f8 <SD_TxDataBlock+0x60>
      i++;
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	3301      	adds	r3, #1
 80021ee:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	2b40      	cmp	r3, #64	@ 0x40
 80021f4:	d9f0      	bls.n	80021d8 <SD_TxDataBlock+0x40>
 80021f6:	e000      	b.n	80021fa <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80021f8:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80021fa:	bf00      	nop
 80021fc:	f7ff ff00 	bl	8002000 <SPI_RxByte>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0fa      	beq.n	80021fc <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	2b05      	cmp	r3, #5
 800220e:	d101      	bne.n	8002214 <SD_TxDataBlock+0x7c>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <SD_TxDataBlock+0x7e>

  return FALSE;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <SD_SendCmd>:
 * Returns:
 * 	Response Byte from the SD Card
 * 	0xFF: On Failure
 */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	6039      	str	r1, [r7, #0]
 8002228:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800222a:	f7ff ff13 	bl	8002054 <SD_ReadyWait>
 800222e:	4603      	mov	r3, r0
 8002230:	2bff      	cmp	r3, #255	@ 0xff
 8002232:	d001      	beq.n	8002238 <SD_SendCmd+0x1a>
 8002234:	23ff      	movs	r3, #255	@ 0xff
 8002236:	e042      	b.n	80022be <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff feac 	bl	8001f98 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	0e1b      	lsrs	r3, r3, #24
 8002244:	b2db      	uxtb	r3, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fea6 	bl	8001f98 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	0c1b      	lsrs	r3, r3, #16
 8002250:	b2db      	uxtb	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fea0 	bl	8001f98 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fe9a 	bl	8001f98 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fe95 	bl	8001f98 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b40      	cmp	r3, #64	@ 0x40
 8002272:	d102      	bne.n	800227a <SD_SendCmd+0x5c>
 8002274:	2395      	movs	r3, #149	@ 0x95
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e007      	b.n	800228a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b48      	cmp	r3, #72	@ 0x48
 800227e:	d102      	bne.n	8002286 <SD_SendCmd+0x68>
 8002280:	2387      	movs	r3, #135	@ 0x87
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e001      	b.n	800228a <SD_SendCmd+0x6c>
  else crc = 1;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fe83 	bl	8001f98 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b4c      	cmp	r3, #76	@ 0x4c
 8002296:	d101      	bne.n	800229c <SD_SendCmd+0x7e>
 8002298:	f7ff feb2 	bl	8002000 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 800229c:	230a      	movs	r3, #10
 800229e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80022a0:	f7ff feae 	bl	8002000 <SPI_RxByte>
 80022a4:	4603      	mov	r3, r0
 80022a6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80022a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da05      	bge.n	80022bc <SD_SendCmd+0x9e>
 80022b0:	7bbb      	ldrb	r3, [r7, #14]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	73bb      	strb	r3, [r7, #14]
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f1      	bne.n	80022a0 <SD_SendCmd+0x82>

  return res;
 80022bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <SD_disk_initialize>:
 *
 * Returns:
 * 	Disk Status (based on Disk Status Bits (DSTATUS) in diskio.h)
 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SD_disk_initialize+0x14>
 80022d8:	2301      	movs	r3, #1
 80022da:	e0d1      	b.n	8002480 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80022dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002488 <SD_disk_initialize+0x1c0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <SD_disk_initialize+0x2a>
 80022ea:	4b67      	ldr	r3, [pc, #412]	@ (8002488 <SD_disk_initialize+0x1c0>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	e0c6      	b.n	8002480 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 80022f2:	f7ff fec9 	bl	8002088 <SD_PowerOn>

  /* slave select */
  SELECT();
 80022f6:	f7ff fe2f 	bl	8001f58 <SELECT>

  /* check disk type */
  type = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80022fe:	2100      	movs	r1, #0
 8002300:	2040      	movs	r0, #64	@ 0x40
 8002302:	f7ff ff8c 	bl	800221e <SD_SendCmd>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	f040 80a1 	bne.w	8002450 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800230e:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <SD_disk_initialize+0x1c4>)
 8002310:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002314:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002316:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800231a:	2048      	movs	r0, #72	@ 0x48
 800231c:	f7ff ff7f 	bl	800221e <SD_SendCmd>
 8002320:	4603      	mov	r3, r0
 8002322:	2b01      	cmp	r3, #1
 8002324:	d155      	bne.n	80023d2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e00c      	b.n	8002346 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800232c:	7bfc      	ldrb	r4, [r7, #15]
 800232e:	f7ff fe67 	bl	8002000 <SPI_RxByte>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	f104 0310 	add.w	r3, r4, #16
 800233a:	443b      	add	r3, r7
 800233c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	3301      	adds	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d9ef      	bls.n	800232c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800234c:	7abb      	ldrb	r3, [r7, #10]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d17e      	bne.n	8002450 <SD_disk_initialize+0x188>
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	2baa      	cmp	r3, #170	@ 0xaa
 8002356:	d17b      	bne.n	8002450 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002358:	2100      	movs	r1, #0
 800235a:	2077      	movs	r0, #119	@ 0x77
 800235c:	f7ff ff5f 	bl	800221e <SD_SendCmd>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d807      	bhi.n	8002376 <SD_disk_initialize+0xae>
 8002366:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800236a:	2069      	movs	r0, #105	@ 0x69
 800236c:	f7ff ff57 	bl	800221e <SD_SendCmd>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8002376:	4b45      	ldr	r3, [pc, #276]	@ (800248c <SD_disk_initialize+0x1c4>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ec      	bne.n	8002358 <SD_disk_initialize+0x90>
 800237e:	e000      	b.n	8002382 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002380:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002382:	4b42      	ldr	r3, [pc, #264]	@ (800248c <SD_disk_initialize+0x1c4>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d062      	beq.n	8002450 <SD_disk_initialize+0x188>
 800238a:	2100      	movs	r1, #0
 800238c:	207a      	movs	r0, #122	@ 0x7a
 800238e:	f7ff ff46 	bl	800221e <SD_SendCmd>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d15b      	bne.n	8002450 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e00c      	b.n	80023b8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800239e:	7bfc      	ldrb	r4, [r7, #15]
 80023a0:	f7ff fe2e 	bl	8002000 <SPI_RxByte>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461a      	mov	r2, r3
 80023a8:	f104 0310 	add.w	r3, r4, #16
 80023ac:	443b      	add	r3, r7
 80023ae:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	3301      	adds	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d9ef      	bls.n	800239e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80023be:	7a3b      	ldrb	r3, [r7, #8]
 80023c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <SD_disk_initialize+0x104>
 80023c8:	230c      	movs	r3, #12
 80023ca:	e000      	b.n	80023ce <SD_disk_initialize+0x106>
 80023cc:	2304      	movs	r3, #4
 80023ce:	73bb      	strb	r3, [r7, #14]
 80023d0:	e03e      	b.n	8002450 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80023d2:	2100      	movs	r1, #0
 80023d4:	2077      	movs	r0, #119	@ 0x77
 80023d6:	f7ff ff22 	bl	800221e <SD_SendCmd>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d808      	bhi.n	80023f2 <SD_disk_initialize+0x12a>
 80023e0:	2100      	movs	r1, #0
 80023e2:	2069      	movs	r0, #105	@ 0x69
 80023e4:	f7ff ff1b 	bl	800221e <SD_SendCmd>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d801      	bhi.n	80023f2 <SD_disk_initialize+0x12a>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e000      	b.n	80023f4 <SD_disk_initialize+0x12c>
 80023f2:	2301      	movs	r3, #1
 80023f4:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 80023f6:	7bbb      	ldrb	r3, [r7, #14]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d10e      	bne.n	800241a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80023fc:	2100      	movs	r1, #0
 80023fe:	2077      	movs	r0, #119	@ 0x77
 8002400:	f7ff ff0d 	bl	800221e <SD_SendCmd>
 8002404:	4603      	mov	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d80e      	bhi.n	8002428 <SD_disk_initialize+0x160>
 800240a:	2100      	movs	r1, #0
 800240c:	2069      	movs	r0, #105	@ 0x69
 800240e:	f7ff ff06 	bl	800221e <SD_SendCmd>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d107      	bne.n	8002428 <SD_disk_initialize+0x160>
 8002418:	e00c      	b.n	8002434 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800241a:	2100      	movs	r1, #0
 800241c:	2041      	movs	r0, #65	@ 0x41
 800241e:	f7ff fefe 	bl	800221e <SD_SendCmd>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8002428:	4b18      	ldr	r3, [pc, #96]	@ (800248c <SD_disk_initialize+0x1c4>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e2      	bne.n	80023f6 <SD_disk_initialize+0x12e>
 8002430:	e000      	b.n	8002434 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002432:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002434:	4b15      	ldr	r3, [pc, #84]	@ (800248c <SD_disk_initialize+0x1c4>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <SD_disk_initialize+0x184>
 800243c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002440:	2050      	movs	r0, #80	@ 0x50
 8002442:	f7ff feec 	bl	800221e <SD_SendCmd>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SD_disk_initialize+0x188>
 800244c:	2300      	movs	r3, #0
 800244e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8002450:	4a0f      	ldr	r2, [pc, #60]	@ (8002490 <SD_disk_initialize+0x1c8>)
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8002456:	f7ff fd8f 	bl	8001f78 <DESELECT>
  SPI_RxByte();
 800245a:	f7ff fdd1 	bl	8002000 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 800245e:	7bbb      	ldrb	r3, [r7, #14]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <SD_disk_initialize+0x1c0>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f023 0301 	bic.w	r3, r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <SD_disk_initialize+0x1c0>)
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e001      	b.n	800247a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002476:	f7ff fe49 	bl	800210c <SD_PowerOff>
  }

  return Stat;
 800247a:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <SD_disk_initialize+0x1c0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	20000000 	.word	0x20000000
 800248c:	20000248 	.word	0x20000248
 8002490:	2000024c 	.word	0x2000024c

08002494 <SD_disk_status>:
 *
 * Returns:
 * 	Disk Status (based on Disk Status Bits (DSTATUS) in diskio.h)
 */
DSTATUS SD_disk_status(BYTE drv)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <SD_disk_status+0x14>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e002      	b.n	80024ae <SD_disk_status+0x1a>
  return Stat;
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <SD_disk_status+0x28>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <SD_disk_read>:
 *
 * Returns:
 * 	Disk Operation Flags (based on enumeration DRESULT in diskio.h)
 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	4603      	mov	r3, r0
 80024ce:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <SD_disk_read+0x1c>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <SD_disk_read+0x20>
 80024dc:	2304      	movs	r3, #4
 80024de:	e051      	b.n	8002584 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024e0:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <SD_disk_read+0xcc>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <SD_disk_read+0x32>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e048      	b.n	8002584 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80024f2:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <SD_disk_read+0xd0>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <SD_disk_read+0x44>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	607b      	str	r3, [r7, #4]

  SELECT();
 8002504:	f7ff fd28 	bl	8001f58 <SELECT>

  if (count == 1)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d111      	bne.n	8002532 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	2051      	movs	r0, #81	@ 0x51
 8002512:	f7ff fe84 	bl	800221e <SD_SendCmd>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d129      	bne.n	8002570 <SD_disk_read+0xb0>
 800251c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002520:	68b8      	ldr	r0, [r7, #8]
 8002522:	f7ff fe0b 	bl	800213c <SD_RxDataBlock>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d021      	beq.n	8002570 <SD_disk_read+0xb0>
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	e01e      	b.n	8002570 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	2052      	movs	r0, #82	@ 0x52
 8002536:	f7ff fe72 	bl	800221e <SD_SendCmd>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d117      	bne.n	8002570 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8002540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002544:	68b8      	ldr	r0, [r7, #8]
 8002546:	f7ff fdf9 	bl	800213c <SD_RxDataBlock>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <SD_disk_read+0xa6>
        buff += 512;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002556:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1ed      	bne.n	8002540 <SD_disk_read+0x80>
 8002564:	e000      	b.n	8002568 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8002566:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8002568:	2100      	movs	r1, #0
 800256a:	204c      	movs	r0, #76	@ 0x4c
 800256c:	f7ff fe57 	bl	800221e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8002570:	f7ff fd02 	bl	8001f78 <DESELECT>
  SPI_RxByte();
 8002574:	f7ff fd44 	bl	8002000 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf14      	ite	ne
 800257e:	2301      	movne	r3, #1
 8002580:	2300      	moveq	r3, #0
 8002582:	b2db      	uxtb	r3, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000000 	.word	0x20000000
 8002590:	2000024c 	.word	0x2000024c

08002594 <SD_disk_write>:
 * Returns:
 * 	Disk Operation Flags (based on enumeration DRESULT in diskio.h)
 */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <SD_disk_write+0x1c>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <SD_disk_write+0x20>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e06b      	b.n	800268c <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80025b4:	4b37      	ldr	r3, [pc, #220]	@ (8002694 <SD_disk_write+0x100>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <SD_disk_write+0x32>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e062      	b.n	800268c <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80025c6:	4b33      	ldr	r3, [pc, #204]	@ (8002694 <SD_disk_write+0x100>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <SD_disk_write+0x44>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e059      	b.n	800268c <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80025d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <SD_disk_write+0x104>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <SD_disk_write+0x56>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	025b      	lsls	r3, r3, #9
 80025e8:	607b      	str	r3, [r7, #4]

  SELECT();
 80025ea:	f7ff fcb5 	bl	8001f58 <SELECT>

  if (count == 1)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d110      	bne.n	8002616 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	2058      	movs	r0, #88	@ 0x58
 80025f8:	f7ff fe11 	bl	800221e <SD_SendCmd>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d13a      	bne.n	8002678 <SD_disk_write+0xe4>
 8002602:	21fe      	movs	r1, #254	@ 0xfe
 8002604:	68b8      	ldr	r0, [r7, #8]
 8002606:	f7ff fdc7 	bl	8002198 <SD_TxDataBlock>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d033      	beq.n	8002678 <SD_disk_write+0xe4>
      count = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	e030      	b.n	8002678 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8002616:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <SD_disk_write+0x104>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002622:	2100      	movs	r1, #0
 8002624:	2077      	movs	r0, #119	@ 0x77
 8002626:	f7ff fdfa 	bl	800221e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800262a:	6839      	ldr	r1, [r7, #0]
 800262c:	2057      	movs	r0, #87	@ 0x57
 800262e:	f7ff fdf6 	bl	800221e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	2059      	movs	r0, #89	@ 0x59
 8002636:	f7ff fdf2 	bl	800221e <SD_SendCmd>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d11b      	bne.n	8002678 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002640:	21fc      	movs	r1, #252	@ 0xfc
 8002642:	68b8      	ldr	r0, [r7, #8]
 8002644:	f7ff fda8 	bl	8002198 <SD_TxDataBlock>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <SD_disk_write+0xd0>
        buff += 512;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002654:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <SD_disk_write+0xac>
 8002662:	e000      	b.n	8002666 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002664:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8002666:	21fd      	movs	r1, #253	@ 0xfd
 8002668:	2000      	movs	r0, #0
 800266a:	f7ff fd95 	bl	8002198 <SD_TxDataBlock>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <SD_disk_write+0xe4>
      {
        count = 1;
 8002674:	2301      	movs	r3, #1
 8002676:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8002678:	f7ff fc7e 	bl	8001f78 <DESELECT>
  SPI_RxByte();
 800267c:	f7ff fcc0 	bl	8002000 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20000000 	.word	0x20000000
 8002698:	2000024c 	.word	0x2000024c

0800269c <SD_disk_ioctl>:
 *
 * Returns:
 * 	Disk Operation Flags (based on enumeration DRESULT in diskio.h)
 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b08b      	sub	sp, #44	@ 0x2c
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	603a      	str	r2, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	460b      	mov	r3, r1
 80026aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <SD_disk_ioctl+0x1e>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e113      	b.n	80028e2 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d124      	bne.n	8002710 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d012      	beq.n	80026f4 <SD_disk_ioctl+0x58>
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	dc1a      	bgt.n	8002708 <SD_disk_ioctl+0x6c>
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <SD_disk_ioctl+0x40>
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d006      	beq.n	80026e8 <SD_disk_ioctl+0x4c>
 80026da:	e015      	b.n	8002708 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80026dc:	f7ff fd16 	bl	800210c <SD_PowerOff>
      res = RES_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026e6:	e0fa      	b.n	80028de <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80026e8:	f7ff fcce 	bl	8002088 <SD_PowerOn>
      res = RES_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026f2:	e0f4      	b.n	80028de <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	1c5c      	adds	r4, r3, #1
 80026f8:	f7ff fd14 	bl	8002124 <SD_CheckPower>
 80026fc:	4603      	mov	r3, r0
 80026fe:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002706:	e0ea      	b.n	80028de <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8002708:	2304      	movs	r3, #4
 800270a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800270e:	e0e6      	b.n	80028de <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002710:	4b76      	ldr	r3, [pc, #472]	@ (80028ec <SD_disk_ioctl+0x250>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SD_disk_ioctl+0x86>
 800271e:	2303      	movs	r3, #3
 8002720:	e0df      	b.n	80028e2 <SD_disk_ioctl+0x246>

    SELECT();
 8002722:	f7ff fc19 	bl	8001f58 <SELECT>

    switch (ctrl)
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	2b0d      	cmp	r3, #13
 800272a:	f200 80c9 	bhi.w	80028c0 <SD_disk_ioctl+0x224>
 800272e:	a201      	add	r2, pc, #4	@ (adr r2, 8002734 <SD_disk_ioctl+0x98>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	0800282b 	.word	0x0800282b
 8002738:	0800276d 	.word	0x0800276d
 800273c:	0800281b 	.word	0x0800281b
 8002740:	080028c1 	.word	0x080028c1
 8002744:	080028c1 	.word	0x080028c1
 8002748:	080028c1 	.word	0x080028c1
 800274c:	080028c1 	.word	0x080028c1
 8002750:	080028c1 	.word	0x080028c1
 8002754:	080028c1 	.word	0x080028c1
 8002758:	080028c1 	.word	0x080028c1
 800275c:	080028c1 	.word	0x080028c1
 8002760:	0800283d 	.word	0x0800283d
 8002764:	08002861 	.word	0x08002861
 8002768:	08002885 	.word	0x08002885
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800276c:	2100      	movs	r1, #0
 800276e:	2049      	movs	r0, #73	@ 0x49
 8002770:	f7ff fd55 	bl	800221e <SD_SendCmd>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80a6 	bne.w	80028c8 <SD_disk_ioctl+0x22c>
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	2110      	movs	r1, #16
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fcda 	bl	800213c <SD_RxDataBlock>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 809c 	beq.w	80028c8 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8002790:	7b3b      	ldrb	r3, [r7, #12]
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10d      	bne.n	80027b6 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800279a:	7d7b      	ldrb	r3, [r7, #21]
 800279c:	461a      	mov	r2, r3
 800279e:	7d3b      	ldrb	r3, [r7, #20]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80027ac:	8bfb      	ldrh	r3, [r7, #30]
 80027ae:	029a      	lsls	r2, r3, #10
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	e02d      	b.n	8002812 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80027b6:	7c7b      	ldrb	r3, [r7, #17]
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	7dbb      	ldrb	r3, [r7, #22]
 80027c0:	09db      	lsrs	r3, r3, #7
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	7d7b      	ldrb	r3, [r7, #21]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 0306 	and.w	r3, r3, #6
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	3302      	adds	r3, #2
 80027da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80027de:	7d3b      	ldrb	r3, [r7, #20]
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	7cbb      	ldrb	r3, [r7, #18]
 80027f2:	029b      	lsls	r3, r3, #10
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3301      	adds	r3, #1
 8002802:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002804:	8bfa      	ldrh	r2, [r7, #30]
 8002806:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800280a:	3b09      	subs	r3, #9
 800280c:	409a      	lsls	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002818:	e056      	b.n	80028c8 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002820:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002828:	e055      	b.n	80028d6 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800282a:	f7ff fc13 	bl	8002054 <SD_ReadyWait>
 800282e:	4603      	mov	r3, r0
 8002830:	2bff      	cmp	r3, #255	@ 0xff
 8002832:	d14b      	bne.n	80028cc <SD_disk_ioctl+0x230>
 8002834:	2300      	movs	r3, #0
 8002836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800283a:	e047      	b.n	80028cc <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800283c:	2100      	movs	r1, #0
 800283e:	2049      	movs	r0, #73	@ 0x49
 8002840:	f7ff fced 	bl	800221e <SD_SendCmd>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d142      	bne.n	80028d0 <SD_disk_ioctl+0x234>
 800284a:	2110      	movs	r1, #16
 800284c:	6a38      	ldr	r0, [r7, #32]
 800284e:	f7ff fc75 	bl	800213c <SD_RxDataBlock>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03b      	beq.n	80028d0 <SD_disk_ioctl+0x234>
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800285e:	e037      	b.n	80028d0 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002860:	2100      	movs	r1, #0
 8002862:	204a      	movs	r0, #74	@ 0x4a
 8002864:	f7ff fcdb 	bl	800221e <SD_SendCmd>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d132      	bne.n	80028d4 <SD_disk_ioctl+0x238>
 800286e:	2110      	movs	r1, #16
 8002870:	6a38      	ldr	r0, [r7, #32]
 8002872:	f7ff fc63 	bl	800213c <SD_RxDataBlock>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d02b      	beq.n	80028d4 <SD_disk_ioctl+0x238>
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002882:	e027      	b.n	80028d4 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002884:	2100      	movs	r1, #0
 8002886:	207a      	movs	r0, #122	@ 0x7a
 8002888:	f7ff fcc9 	bl	800221e <SD_SendCmd>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002898:	e00b      	b.n	80028b2 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800289a:	6a3c      	ldr	r4, [r7, #32]
 800289c:	1c63      	adds	r3, r4, #1
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	f7ff fbae 	bl	8002000 <SPI_RxByte>
 80028a4:	4603      	mov	r3, r0
 80028a6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80028a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028ac:	3301      	adds	r3, #1
 80028ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80028b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d9ef      	bls.n	800289a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 80028c0:	2304      	movs	r3, #4
 80028c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80028c6:	e006      	b.n	80028d6 <SD_disk_ioctl+0x23a>
      break;
 80028c8:	bf00      	nop
 80028ca:	e004      	b.n	80028d6 <SD_disk_ioctl+0x23a>
      break;
 80028cc:	bf00      	nop
 80028ce:	e002      	b.n	80028d6 <SD_disk_ioctl+0x23a>
      break;
 80028d0:	bf00      	nop
 80028d2:	e000      	b.n	80028d6 <SD_disk_ioctl+0x23a>
      break;
 80028d4:	bf00      	nop
    }

    DESELECT();
 80028d6:	f7ff fb4f 	bl	8001f78 <DESELECT>
    SPI_RxByte();
 80028da:	f7ff fb91 	bl	8002000 <SPI_RxByte>
  }

  return res;
 80028de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	372c      	adds	r7, #44	@ 0x2c
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <print_success>:


#include"formated_printf.h"


void print_success(char * str){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
    printf("\033[32m%s\033[0m\n \r", str);
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4803      	ldr	r0, [pc, #12]	@ (8002908 <print_success+0x18>)
 80028fc:	f008 fcba 	bl	800b274 <iprintf>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	08010304 	.word	0x08010304

0800290c <print_info>:


void print_info(char * str){
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    printf("\033[33m%s\033[0m\n\r", str);
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4803      	ldr	r0, [pc, #12]	@ (8002924 <print_info+0x18>)
 8002918:	f008 fcac 	bl	800b274 <iprintf>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	08010314 	.word	0x08010314

08002928 <print_error>:

void print_error(char * str){
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
    printf("\033[31m%s\033[0m\n \r", str);
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4803      	ldr	r0, [pc, #12]	@ (8002940 <print_error+0x18>)
 8002934:	f008 fc9e 	bl	800b274 <iprintf>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	08010324 	.word	0x08010324

08002944 <parse_gps_output>:
 *
 * Returns:
 * 	None
 */
void parse_gps_output(float *latitude, char *NS, float *longitude, char *EW)
{
 8002944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002946:	b08b      	sub	sp, #44	@ 0x2c
 8002948:	af06      	add	r7, sp, #24
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
	  count++;
 8002952:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <parse_gps_output+0xd8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	4a30      	ldr	r2, [pc, #192]	@ (8002a1c <parse_gps_output+0xd8>)
 800295a:	6013      	str	r3, [r2, #0]
	  if (Wait_for("GGA") == 1)
 800295c:	4830      	ldr	r0, [pc, #192]	@ (8002a20 <parse_gps_output+0xdc>)
 800295e:	f001 ff49 	bl	80047f4 <Wait_for>
 8002962:	4603      	mov	r3, r0
 8002964:	2b01      	cmp	r3, #1
 8002966:	d116      	bne.n	8002996 <parse_gps_output+0x52>
	  {
		  VCCTimeout = timeout_value;  // Reset the VCC Timeout once we know GGA is being received
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <parse_gps_output+0xe0>)
 800296a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800296e:	601a      	str	r2, [r3, #0]
		  Copy_upto("*", GGA);
 8002970:	492d      	ldr	r1, [pc, #180]	@ (8002a28 <parse_gps_output+0xe4>)
 8002972:	482e      	ldr	r0, [pc, #184]	@ (8002a2c <parse_gps_output+0xe8>)
 8002974:	f001 febe 	bl	80046f4 <Copy_upto>
		  // Call the decodeGGA function to obtain the GPS information
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = true;
 8002978:	492d      	ldr	r1, [pc, #180]	@ (8002a30 <parse_gps_output+0xec>)
 800297a:	482b      	ldr	r0, [pc, #172]	@ (8002a28 <parse_gps_output+0xe4>)
 800297c:	f7fe fcb4 	bl	80012e8 <decodeGGA>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d103      	bne.n	800298e <parse_gps_output+0x4a>
 8002986:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <parse_gps_output+0xf0>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e007      	b.n	800299e <parse_gps_output+0x5a>
		  else flagGGA = false;
 800298e:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <parse_gps_output+0xf0>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e003      	b.n	800299e <parse_gps_output+0x5a>
	  } else {
		  print_error("TIMEOUT of GPS!\n\r");
 8002996:	4828      	ldr	r0, [pc, #160]	@ (8002a38 <parse_gps_output+0xf4>)
 8002998:	f7ff ffc6 	bl	8002928 <print_error>
		  return;
 800299c:	e03b      	b.n	8002a16 <parse_gps_output+0xd2>
	  }

	  if (flagGGA == true)
 800299e:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <parse_gps_output+0xf0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d137      	bne.n	8002a16 <parse_gps_output+0xd2>
	  {
		  memset(gpsBuffer, '\0', buffer_value);
 80029a6:	2232      	movs	r2, #50	@ 0x32
 80029a8:	2100      	movs	r1, #0
 80029aa:	4824      	ldr	r0, [pc, #144]	@ (8002a3c <parse_gps_output+0xf8>)
 80029ac:	f008 fdfe 	bl	800b5ac <memset>
		  sprintf (gpsBuffer, "%.2f%c,%.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80029b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <parse_gps_output+0xec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fddf 	bl	8000578 <__aeabi_f2d>
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <parse_gps_output+0xec>)
 80029c0:	791b      	ldrb	r3, [r3, #4]
 80029c2:	461e      	mov	r6, r3
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 80029c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <parse_gps_output+0xec>)
 80029c6:	689b      	ldr	r3, [r3, #8]
		  sprintf (gpsBuffer, "%.2f%c,%.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fd fdd5 	bl	8000578 <__aeabi_f2d>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 80029d2:	4917      	ldr	r1, [pc, #92]	@ (8002a30 <parse_gps_output+0xec>)
 80029d4:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (gpsBuffer, "%.2f%c,%.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80029d6:	9104      	str	r1, [sp, #16]
 80029d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029dc:	9600      	str	r6, [sp, #0]
 80029de:	4622      	mov	r2, r4
 80029e0:	462b      	mov	r3, r5
 80029e2:	4917      	ldr	r1, [pc, #92]	@ (8002a40 <parse_gps_output+0xfc>)
 80029e4:	4815      	ldr	r0, [pc, #84]	@ (8002a3c <parse_gps_output+0xf8>)
 80029e6:	f008 fcbd 	bl	800b364 <siprintf>
		  print_success("\n\rGPS DATA SUCCESS");
 80029ea:	4816      	ldr	r0, [pc, #88]	@ (8002a44 <parse_gps_output+0x100>)
 80029ec:	f7ff ff80 	bl	80028f0 <print_success>
		  print_success(gpsBuffer);
 80029f0:	4812      	ldr	r0, [pc, #72]	@ (8002a3c <parse_gps_output+0xf8>)
 80029f2:	f7ff ff7d 	bl	80028f0 <print_success>
		    // Use sscanf to extract the values
		  if (sscanf(gpsBuffer, "%f%c,%f%c", latitude, NS, longitude, EW) != info_value) {
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4911      	ldr	r1, [pc, #68]	@ (8002a48 <parse_gps_output+0x104>)
 8002a04:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <parse_gps_output+0xf8>)
 8002a06:	f008 fccd 	bl	800b3a4 <siscanf>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d002      	beq.n	8002a16 <parse_gps_output+0xd2>
			  print_error("Error: Unable to parse the input string.\n");
 8002a10:	480e      	ldr	r0, [pc, #56]	@ (8002a4c <parse_gps_output+0x108>)
 8002a12:	f7ff ff89 	bl	8002928 <print_error>
		  }
	  }
}
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1c:	20000300 	.word	0x20000300
 8002a20:	08010334 	.word	0x08010334
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000264 	.word	0x20000264
 8002a2c:	08010338 	.word	0x08010338
 8002a30:	20000250 	.word	0x20000250
 8002a34:	200002c8 	.word	0x200002c8
 8002a38:	0801033c 	.word	0x0801033c
 8002a3c:	200002cc 	.word	0x200002cc
 8002a40:	08010350 	.word	0x08010350
 8002a44:	08010360 	.word	0x08010360
 8002a48:	08010374 	.word	0x08010374
 8002a4c:	08010380 	.word	0x08010380

08002a50 <main>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI2_Init(void);

int main(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b094      	sub	sp, #80	@ 0x50
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  HAL_Init();
 8002a56:	f002 f85d 	bl	8004b14 <HAL_Init>

  SystemClock_Config();
 8002a5a:	f000 f863 	bl	8002b24 <SystemClock_Config>

  usart_init();
 8002a5e:	f001 ffaf 	bl	80049c0 <usart_init>
  delay_init();
 8002a62:	f7ff f9e9 	bl	8001e38 <delay_init>

  print_info("\n\rCalling INIT MAX30102\n\r");
 8002a66:	4828      	ldr	r0, [pc, #160]	@ (8002b08 <main+0xb8>)
 8002a68:	f7ff ff50 	bl	800290c <print_info>

  MAX30102_init();
 8002a6c:	f000 f98a 	bl	8002d84 <MAX30102_init>

  print_info("MAX30102 DETECTED AND INITALIZED!");
 8002a70:	4826      	ldr	r0, [pc, #152]	@ (8002b0c <main+0xbc>)
 8002a72:	f7ff ff4b 	bl	800290c <print_info>
  printf("\n \r");
 8002a76:	4826      	ldr	r0, [pc, #152]	@ (8002b10 <main+0xc0>)
 8002a78:	f008 fbfc 	bl	800b274 <iprintf>

  uint8_t TxAddress[] = {0xB3, 0xB4, 0xB5, 0xB6, 0x05};
 8002a7c:	4a25      	ldr	r2, [pc, #148]	@ (8002b14 <main+0xc4>)
 8002a7e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a86:	6018      	str	r0, [r3, #0]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	7019      	strb	r1, [r3, #0]

  uint8_t channel = 10;
 8002a8c:	230a      	movs	r3, #10
 8002a8e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  delay(4000);
 8002a92:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002a96:	f7ff f9fd 	bl	8001e94 <delay>
  print_info("Calling NRF INIT\n\r");
 8002a9a:	481f      	ldr	r0, [pc, #124]	@ (8002b18 <main+0xc8>)
 8002a9c:	f7ff ff36 	bl	800290c <print_info>
  NRF_INIT();
 8002aa0:	f7fe ffaa 	bl	80019f8 <NRF_INIT>

  NRF_PTX_CONFIG(TxAddress, channel);
 8002aa4:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8002aa8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe ff02 	bl	80018b8 <NRF_PTX_CONFIG>

  print_info("SETTING NODE AS PRIMARY TRANSMITTER \n \r ");
 8002ab4:	4819      	ldr	r0, [pc, #100]	@ (8002b1c <main+0xcc>)
 8002ab6:	f7ff ff29 	bl	800290c <print_info>

  for (int i = 0; i <= 0x1D; i++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002abe:	e00d      	b.n	8002adc <main+0x8c>
  {

    printf("\n \r register %x is value %x \n \r", i, NRF_READ_REGISTER(i));
 8002ac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fedc 	bl	8001882 <NRF_READ_REGISTER>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ad0:	4813      	ldr	r0, [pc, #76]	@ (8002b20 <main+0xd0>)
 8002ad2:	f008 fbcf 	bl	800b274 <iprintf>
  for (int i = 0; i <= 0x1D; i++)
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ad8:	3301      	adds	r3, #1
 8002ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ade:	2b1d      	cmp	r3, #29
 8002ae0:	ddee      	ble.n	8002ac0 <main+0x70>
  }

  StateMachine SM;

  FSM_INIT(&SM);
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 f953 	bl	8003d90 <FSM_INIT>

  MX_GPIO_Init();
 8002aea:	f000 f8e5 	bl	8002cb8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002aee:	f000 f8b9 	bl	8002c64 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8002af2:	f000 f881 	bl	8002bf8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002af6:	f004 fbb5 	bl	8007264 <MX_FATFS_Init>

  Ringbuf_init();
 8002afa:	f001 fd4b 	bl	8004594 <Ringbuf_init>

  while (1)
  {
    execute_sm(&SM);
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f97b 	bl	8003dfc <execute_sm>
 8002b06:	e7fa      	b.n	8002afe <main+0xae>
 8002b08:	080103ac 	.word	0x080103ac
 8002b0c:	080103c8 	.word	0x080103c8
 8002b10:	080103ec 	.word	0x080103ec
 8002b14:	08010450 	.word	0x08010450
 8002b18:	080103f0 	.word	0x080103f0
 8002b1c:	08010404 	.word	0x08010404
 8002b20:	08010430 	.word	0x08010430

08002b24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b094      	sub	sp, #80	@ 0x50
 8002b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2a:	f107 0320 	add.w	r3, r7, #32
 8002b2e:	2230      	movs	r2, #48	@ 0x30
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f008 fd3a 	bl	800b5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	4b28      	ldr	r3, [pc, #160]	@ (8002bf0 <SystemClock_Config+0xcc>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a27      	ldr	r2, [pc, #156]	@ (8002bf0 <SystemClock_Config+0xcc>)
 8002b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b58:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <SystemClock_Config+0xcc>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <SystemClock_Config+0xd0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a21      	ldr	r2, [pc, #132]	@ (8002bf4 <SystemClock_Config+0xd0>)
 8002b6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b1f      	ldr	r3, [pc, #124]	@ (8002bf4 <SystemClock_Config+0xd0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b80:	2302      	movs	r3, #2
 8002b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b84:	2301      	movs	r3, #1
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b88:	2310      	movs	r3, #16
 8002b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b94:	2308      	movs	r3, #8
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002b98:	23c0      	movs	r3, #192	@ 0xc0
 8002b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ba4:	f107 0320 	add.w	r3, r7, #32
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fb53 	bl	8005254 <HAL_RCC_OscConfig>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bb4:	f000 f8e0 	bl	8002d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bb8:	230f      	movs	r3, #15
 8002bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bc4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002bd0:	f107 030c 	add.w	r3, r7, #12
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fdb4 	bl	8005744 <HAL_RCC_ClockConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002be2:	f000 f8c9 	bl	8002d78 <Error_Handler>
  }
}
 8002be6:	bf00      	nop
 8002be8:	3750      	adds	r7, #80	@ 0x50
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000

08002bf8 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bfc:	4b17      	ldr	r3, [pc, #92]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <MX_SPI2_Init+0x68>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c02:	4b16      	ldr	r3, [pc, #88]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c10:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c16:	4b11      	ldr	r3, [pc, #68]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c22:	4b0e      	ldr	r3, [pc, #56]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c30:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c36:	4b09      	ldr	r3, [pc, #36]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c42:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c44:	220a      	movs	r2, #10
 8002c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c48:	4804      	ldr	r0, [pc, #16]	@ (8002c5c <MX_SPI2_Init+0x64>)
 8002c4a:	f002 ff9b 	bl	8005b84 <HAL_SPI_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002c54:	f000 f890 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000304 	.word	0x20000304
 8002c60:	40003800 	.word	0x40003800

08002c64 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <MX_USART1_UART_Init+0x50>)
 8002c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c88:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_USART1_UART_Init+0x4c>)
 8002c9c:	f003 fbc4 	bl	8006428 <HAL_UART_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ca6:	f000 f867 	bl	8002d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000035c 	.word	0x2000035c
 8002cb4:	40011000 	.word	0x40011000

08002cb8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a26      	ldr	r2, [pc, #152]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	4a18      	ldr	r2, [pc, #96]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <MX_GPIO_Init+0xb8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d44:	480b      	ldr	r0, [pc, #44]	@ (8002d74 <MX_GPIO_Init+0xbc>)
 8002d46:	f002 fa6b 	bl	8005220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d50:	2301      	movs	r3, #1
 8002d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4804      	ldr	r0, [pc, #16]	@ (8002d74 <MX_GPIO_Init+0xbc>)
 8002d64:	f002 f8d8 	bl	8004f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002d68:	bf00      	nop
 8002d6a:	3728      	adds	r7, #40	@ 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020400 	.word	0x40020400

08002d78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7c:	b672      	cpsid	i
}
 8002d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <Error_Handler+0x8>

08002d84 <MAX30102_init>:
 uint8_t tail;
} sense_struct; //This is our circular buffer of readings from the sensor

sense_struct sense;

void MAX30102_init(){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	I2C_init_config(); //initalize i2c
 8002d88:	f7fe f944 	bl	8001014 <I2C_init_config>

	    // Reset the sensor
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x40); // Reset the device
 8002d8c:	2140      	movs	r1, #64	@ 0x40
 8002d8e:	2009      	movs	r0, #9
 8002d90:	f000 f81e 	bl	8002dd0 <MAX30102_WRITE_REGISTER>

	    //led brightness as 60
	    MAX30102_WRITE_REGISTER(LED1_PA_REG, 0x3c); //power set as 60
 8002d94:	213c      	movs	r1, #60	@ 0x3c
 8002d96:	200c      	movs	r0, #12
 8002d98:	f000 f81a 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(LED2_PA_REG, 0x3c); // power set as 60
 8002d9c:	213c      	movs	r1, #60	@ 0x3c
 8002d9e:	200d      	movs	r0, #13
 8002da0:	f000 f816 	bl	8002dd0 <MAX30102_WRITE_REGISTER>

	    //led mode 3 both ir and red led are needed
	    MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x3); // spo2
 8002da4:	2103      	movs	r1, #3
 8002da6:	2009      	movs	r0, #9
 8002da8:	f000 f812 	bl	8002dd0 <MAX30102_WRITE_REGISTER>

	    //sample average as 4 and enable fifo rollover 0x50 0101 0000
	    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x50); //
 8002dac:	2150      	movs	r1, #80	@ 0x50
 8002dae:	2008      	movs	r0, #8
 8002db0:	f000 f80e 	bl	8002dd0 <MAX30102_WRITE_REGISTER>

	    //spo2 config adc range as 4096  samples as 100 led pulse as 411
	    MAX30102_WRITE_REGISTER(SPO2_CONFIG_REG, 0x27);
 8002db4:	2127      	movs	r1, #39	@ 0x27
 8002db6:	200a      	movs	r0, #10
 8002db8:	f000 f80a 	bl	8002dd0 <MAX30102_WRITE_REGISTER>

	    // FIFO pointers
	    MAX30102_WRITE_REGISTER(FIFO_READ_PTR, 0x00); // Reset FIFO write pointer
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2006      	movs	r0, #6
 8002dc0:	f000 f806 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
	    MAX30102_WRITE_REGISTER(FIFO_WR_PTR, 0x00); // Reset FIFO read pointer
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2004      	movs	r0, #4
 8002dc8:	f000 f802 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <MAX30102_WRITE_REGISTER>:
    // FIFO Configuration
    MAX30102_WRITE_REGISTER(FIFO_CONFIG_REG, 0x02);
    // FIFO_Average: No averaging, direct samples
}

void MAX30102_WRITE_REGISTER(uint8_t register_Address, uint8_t data){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71bb      	strb	r3, [r7, #6]
	I2C_START_COMS();
 8002de0:	f7fe f98c 	bl	80010fc <I2C_START_COMS>
	uint8_t write_masked_address=0xAE;
 8002de4:	23ae      	movs	r3, #174	@ 0xae
 8002de6:	73fb      	strb	r3, [r7, #15]
	I2C_SEND_ADDRESS(write_masked_address); //same as AE
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe f9c2 	bl	8001174 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address);
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe f99e 	bl	8001134 <I2C_WRITE_DATA>
	I2C_WRITE_DATA(data);
 8002df8:	79bb      	ldrb	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f99a 	bl	8001134 <I2C_WRITE_DATA>
	I2C_STOP_COMS();
 8002e00:	f7fe f9d8 	bl	80011b4 <I2C_STOP_COMS>
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <MAX30102_READ_REGISTER>:


void MAX30102_READ_REGISTER(uint8_t register_Address, uint8_t *recv_buff, uint8_t recv_size){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71bb      	strb	r3, [r7, #6]

	uint8_t write_masked_address=0xAE;
 8002e1c:	23ae      	movs	r3, #174	@ 0xae
 8002e1e:	73fb      	strb	r3, [r7, #15]
	uint8_t read_masked_address=0xAF; //should be AF
 8002e20:	23af      	movs	r3, #175	@ 0xaf
 8002e22:	73bb      	strb	r3, [r7, #14]
	I2C_START_COMS(); //start i2c
 8002e24:	f7fe f96a 	bl	80010fc <I2C_START_COMS>
	I2C_SEND_ADDRESS(write_masked_address); //first send slave address
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe f9a2 	bl	8001174 <I2C_SEND_ADDRESS>
	I2C_WRITE_DATA(register_Address); //send register address
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f97e 	bl	8001134 <I2C_WRITE_DATA>
	I2C_START_COMS(); //repeated start
 8002e38:	f7fe f960 	bl	80010fc <I2C_START_COMS>
	I2C_READ(read_masked_address,recv_buff,recv_size); //this should be slave with read
 8002e3c:	79ba      	ldrb	r2, [r7, #6]
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f9c6 	bl	80011d4 <I2C_READ>
//	I2C_STOP_COMS(); this caused 2 hours of debugging
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <MAX30102_Start_Temperature_Measurement>:

void MAX30102_Start_Temperature_Measurement() {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
    MAX30102_WRITE_REGISTER(TEMP_CONFIG_REG, 0x01); // Start temperature conversion
 8002e54:	2101      	movs	r1, #1
 8002e56:	2021      	movs	r0, #33	@ 0x21
 8002e58:	f7ff ffba 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
    MAX30102_WRITE_REGISTER(DIE_TEMP_RDY_EN, 0x02); // Start temperature conversion
 8002e5c:	2102      	movs	r1, #2
 8002e5e:	2003      	movs	r0, #3
 8002e60:	f7ff ffb6 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <MAX30102_Read_Temperature>:


float MAX30102_Read_Temperature() {
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
    uint8_t temp_int, temp_frac;

    // Read the temperature integer part
    MAX30102_READ_REGISTER(TEMP_INT_REG, &temp_int, 1);
 8002e6e:	1cfb      	adds	r3, r7, #3
 8002e70:	2201      	movs	r2, #1
 8002e72:	4619      	mov	r1, r3
 8002e74:	201f      	movs	r0, #31
 8002e76:	f7ff ffc9 	bl	8002e0c <MAX30102_READ_REGISTER>

    // Read the temperature fractional part
    MAX30102_READ_REGISTER(TEMP_FRAC_REG, &temp_frac, 1);
 8002e7a:	1cbb      	adds	r3, r7, #2
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2020      	movs	r0, #32
 8002e82:	f7ff ffc3 	bl	8002e0c <MAX30102_READ_REGISTER>

    // Combine the integer and fractional parts
    float temperature = temp_int + (temp_frac * 0.0625);
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb63 	bl	8000554 <__aeabi_i2d>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	78bb      	ldrb	r3, [r7, #2]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fb5d 	bl	8000554 <__aeabi_i2d>
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <MAX30102_Read_Temperature+0x68>)
 8002ea0:	f7fd fbc2 	bl	8000628 <__aeabi_dmul>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4629      	mov	r1, r5
 8002eac:	f7fd fa06 	bl	80002bc <__adddf3>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4610      	mov	r0, r2
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f7fd feae 	bl	8000c18 <__aeabi_d2f>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	607b      	str	r3, [r7, #4]
    //printf("hi one read was done but then something happened %d \n \r",temp_frac);
    return temperature;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	ee07 3a90 	vmov	s15, r3
}
 8002ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed0:	3fb00000 	.word	0x3fb00000

08002ed4 <MAX30102_get_Read_ptr>:

uint8_t MAX30102_get_Read_ptr(){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	uint8_t read_ptr;
 MAX30102_READ_REGISTER(FIFO_READ_PTR,&read_ptr,1);
 8002eda:	1dfb      	adds	r3, r7, #7
 8002edc:	2201      	movs	r2, #1
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2006      	movs	r0, #6
 8002ee2:	f7ff ff93 	bl	8002e0c <MAX30102_READ_REGISTER>
	return read_ptr;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <MAX30102_get_WR_ptr>:

uint8_t MAX30102_get_WR_ptr(){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
	uint8_t wr_ptr;
    MAX30102_READ_REGISTER(FIFO_WR_PTR,&wr_ptr,1);
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4619      	mov	r1, r3
 8002efc:	2004      	movs	r0, #4
 8002efe:	f7ff ff85 	bl	8002e0c <MAX30102_READ_REGISTER>
	return wr_ptr;
 8002f02:	79fb      	ldrb	r3, [r7, #7]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <available>:

uint8_t available(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
  int8_t numberOfSamples = sense.head - sense.tail;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	@ (8002f44 <available+0x38>)
 8002f14:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <available+0x38>)
 8002f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	71fb      	strb	r3, [r7, #7]
  if (numberOfSamples < 0) numberOfSamples += STORAGE_SIZE;
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	da03      	bge.n	8002f34 <available+0x28>
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	71fb      	strb	r3, [r7, #7]

  return (numberOfSamples);
 8002f34:	79fb      	ldrb	r3, [r7, #7]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	200003a4 	.word	0x200003a4

08002f48 <check_new_data>:


uint16_t check_new_data(){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
	uint8_t writePointer=MAX30102_get_WR_ptr();
 8002f4e:	f7ff ffcf 	bl	8002ef0 <MAX30102_get_WR_ptr>
 8002f52:	4603      	mov	r3, r0
 8002f54:	74fb      	strb	r3, [r7, #19]
	uint8_t readPointer=MAX30102_get_Read_ptr();
 8002f56:	f7ff ffbd 	bl	8002ed4 <MAX30102_get_Read_ptr>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	74bb      	strb	r3, [r7, #18]
	int numberOfSamples = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
	if(readPointer!=writePointer){
 8002f62:	7cba      	ldrb	r2, [r7, #18]
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d064      	beq.n	8003034 <check_new_data+0xec>
		 numberOfSamples = writePointer - readPointer;
 8002f6a:	7cfa      	ldrb	r2, [r7, #19]
 8002f6c:	7cbb      	ldrb	r3, [r7, #18]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	61fb      	str	r3, [r7, #28]
		 if (numberOfSamples < 0) numberOfSamples += 32; //Wrap condition
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da02      	bge.n	8002f7e <check_new_data+0x36>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	3320      	adds	r3, #32
 8002f7c:	61fb      	str	r3, [r7, #28]
		    //We now have the number of readings, now calc bytes to read
		    //For this example we are just doing Red and IR (3 bytes each)
		    int bytesLeftToRead = numberOfSamples * 2 * 3;
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
		    while (bytesLeftToRead > 0)
 8002f8a:	e050      	b.n	800302e <check_new_data+0xe6>
		     {
		       int toGet = bytesLeftToRead;
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
		       if (toGet > I2C_BUFFER_LENGTH)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	dd01      	ble.n	8002f9a <check_new_data+0x52>
		       {
		         //If toGet is 32 this is bad because we read 6 bytes (Red+IR * 3 = 6) at a time
		         //32 % 6 = 2 left over. We don't want to request 32 bytes, we want to request 30.
		         //32 % 9 (Red+IR+GREEN) = 5 left over. We want to request 27.

		         toGet = I2C_BUFFER_LENGTH - (I2C_BUFFER_LENGTH % (2 * 3)); //Trim toGet to be a multiple of the samples we need to read
 8002f96:	231e      	movs	r3, #30
 8002f98:	617b      	str	r3, [r7, #20]
		       }

		       bytesLeftToRead -= toGet;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	61bb      	str	r3, [r7, #24]

		       //Request toGet number of bytes from sensor

		       while (toGet > 0)
 8002fa2:	e041      	b.n	8003028 <check_new_data+0xe0>
		       {
		         sense.head++; //Advance the head of the storage struct
 8002fa4:	4b26      	ldr	r3, [pc, #152]	@ (8003040 <check_new_data+0xf8>)
 8002fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002faa:	3301      	adds	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b24      	ldr	r3, [pc, #144]	@ (8003040 <check_new_data+0xf8>)
 8002fb0:	f883 2020 	strb.w	r2, [r3, #32]
		         sense.head %= STORAGE_SIZE; //Wrap condition
 8002fb4:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <check_new_data+0xf8>)
 8002fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <check_new_data+0xf8>)
 8002fc2:	f883 2020 	strb.w	r2, [r3, #32]
		         uint32_t red_led,ir_led;

		         uint8_t fifo_data[6]; // To store 6 bytes of FIFO data (3 bytes for red, 3 bytes for IR)

		         // Read 6 bytes from FIFO_DATA register
		         MAX30102_READ_REGISTER(FIFO_DATA_REG, fifo_data, 6);
 8002fc6:	463b      	mov	r3, r7
 8002fc8:	2206      	movs	r2, #6
 8002fca:	4619      	mov	r1, r3
 8002fcc:	2007      	movs	r0, #7
 8002fce:	f7ff ff1d 	bl	8002e0c <MAX30102_READ_REGISTER>

		         // Combine the bytes for red LED
		         red_led = ((uint32_t)fifo_data[0] << 16) | ((uint32_t)fifo_data[1] << 8) | fifo_data[2];
 8002fd2:	783b      	ldrb	r3, [r7, #0]
 8002fd4:	041a      	lsls	r2, r3, #16
 8002fd6:	787b      	ldrb	r3, [r7, #1]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	78ba      	ldrb	r2, [r7, #2]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
		         red_led &= 0x03FFFF; // Mask to 18 bits
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002fe8:	60fb      	str	r3, [r7, #12]
		         sense.red[sense.head] = red_led;
 8002fea:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <check_new_data+0xf8>)
 8002fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4a13      	ldr	r2, [pc, #76]	@ (8003040 <check_new_data+0xf8>)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		         // Combine the bytes for IR LED
		         ir_led = ((uint32_t)fifo_data[3] << 16) | ((uint32_t)fifo_data[4] << 8) | fifo_data[5];
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	041a      	lsls	r2, r3, #16
 8002ffe:	793b      	ldrb	r3, [r7, #4]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	4313      	orrs	r3, r2
 8003004:	797a      	ldrb	r2, [r7, #5]
 8003006:	4313      	orrs	r3, r2
 8003008:	60bb      	str	r3, [r7, #8]
		         ir_led &= 0x03FFFF; // Mask to 18 bits
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003010:	60bb      	str	r3, [r7, #8]
		         sense.IR[sense.head] = ir_led;
 8003012:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <check_new_data+0xf8>)
 8003014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003018:	4909      	ldr	r1, [pc, #36]	@ (8003040 <check_new_data+0xf8>)
 800301a:	3304      	adds	r3, #4
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		         toGet -= 2 * 3;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3b06      	subs	r3, #6
 8003026:	617b      	str	r3, [r7, #20]
		       while (toGet > 0)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b00      	cmp	r3, #0
 800302c:	dcba      	bgt.n	8002fa4 <check_new_data+0x5c>
		    while (bytesLeftToRead > 0)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	dcab      	bgt.n	8002f8c <check_new_data+0x44>

		     } //End while (bytesLeftToRead > 0)

		   } //End readPtr != writePtr

		   return (numberOfSamples); //Let the world know how much new data we found
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	b29b      	uxth	r3, r3
	}
 8003038:	4618      	mov	r0, r3
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	200003a4 	.word	0x200003a4

08003044 <safeCheck>:


bool safeCheck(uint16_t maxTimeToCheck)
{
 8003044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	80fb      	strh	r3, [r7, #6]
  uint32_t markTime = millis();
 8003050:	f7fe ff08 	bl	8001e64 <millis>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4613      	mov	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

  while(1)
  {
	if(millis() - markTime > maxTimeToCheck) return(false);
 800305c:	f7fe ff02 	bl	8001e64 <millis>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	2000      	movs	r0, #0
 8003068:	4688      	mov	r8, r1
 800306a:	4681      	mov	r9, r0
 800306c:	ebb2 0408 	subs.w	r4, r2, r8
 8003070:	eb63 0509 	sbc.w	r5, r3, r9
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2200      	movs	r2, #0
 8003078:	469a      	mov	sl, r3
 800307a:	4693      	mov	fp, r2
 800307c:	45a2      	cmp	sl, r4
 800307e:	eb7b 0305 	sbcs.w	r3, fp, r5
 8003082:	d201      	bcs.n	8003088 <safeCheck+0x44>
 8003084:	2300      	movs	r3, #0
 8003086:	e00a      	b.n	800309e <safeCheck+0x5a>

	if(check_new_data() == true) //We found new data!
 8003088:	f7ff ff5e 	bl	8002f48 <check_new_data>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <safeCheck+0x52>
	  return(true);
 8003092:	2301      	movs	r3, #1
 8003094:	e003      	b.n	800309e <safeCheck+0x5a>

	delay(1);
 8003096:	2001      	movs	r0, #1
 8003098:	f7fe fefc 	bl	8001e94 <delay>
	if(millis() - markTime > maxTimeToCheck) return(false);
 800309c:	e7de      	b.n	800305c <safeCheck+0x18>
  }
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030a8 <getRed>:
    *ir_led &= 0x03FFFF; // Mask to 18 bits
}

//Report the most recent red value
uint32_t getRed(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(2500))
 80030ac:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80030b0:	f7ff ffc8 	bl	8003044 <safeCheck>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <getRed+0x22>
    return (sense.red[sense.head]);
 80030ba:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <getRed+0x28>)
 80030bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <getRed+0x28>)
 80030c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c8:	e000      	b.n	80030cc <getRed+0x24>
  else
    return(0); //Sensor failed to find new data
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	200003a4 	.word	0x200003a4

080030d4 <getIR>:

uint32_t getIR(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  //Check the sensor for new data for 250ms
	if(safeCheck(2500))
 80030d8:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80030dc:	f7ff ffb2 	bl	8003044 <safeCheck>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <getIR+0x22>
    return (sense.IR[sense.head]);
 80030e6:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <getIR+0x28>)
 80030e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ec:	4a03      	ldr	r2, [pc, #12]	@ (80030fc <getIR+0x28>)
 80030ee:	3304      	adds	r3, #4
 80030f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f4:	e000      	b.n	80030f8 <getIR+0x24>
  else
    return(0); //Sensor failed to find new data
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200003a4 	.word	0x200003a4

08003100 <nextSample>:

//Advance the tail
void nextSample(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  if(available()) //Only advance the tail if new data is available
 8003104:	f7ff ff02 	bl	8002f0c <available>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <nextSample+0x30>
  {
    sense.tail++;
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <nextSample+0x34>)
 8003110:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003114:	3301      	adds	r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <nextSample+0x34>)
 800311a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    sense.tail %= STORAGE_SIZE; //Wrap condition
 800311e:	4b05      	ldr	r3, [pc, #20]	@ (8003134 <nextSample+0x34>)
 8003120:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	4b02      	ldr	r3, [pc, #8]	@ (8003134 <nextSample+0x34>)
 800312c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }
}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200003a4 	.word	0x200003a4

08003138 <acquire_max_30102_data>:
void acquire_max_30102_data(uint32_t num_ters,int8_t* heart_rate_status,int32_t* spo2_var,int32_t* heart_rate_var,int8_t* valid_spo2,bool *status)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	f5ad 7d53 	sub.w	sp, sp, #844	@ 0x34c
 800313e:	af04      	add	r7, sp, #16
 8003140:	f507 744e 	add.w	r4, r7, #824	@ 0x338
 8003144:	f5a4 744b 	sub.w	r4, r4, #812	@ 0x32c
 8003148:	6020      	str	r0, [r4, #0]
 800314a:	f507 704e 	add.w	r0, r7, #824	@ 0x338
 800314e:	f5a0 704c 	sub.w	r0, r0, #816	@ 0x330
 8003152:	6001      	str	r1, [r0, #0]
 8003154:	f507 714e 	add.w	r1, r7, #824	@ 0x338
 8003158:	f5a1 714d 	sub.w	r1, r1, #820	@ 0x334
 800315c:	600a      	str	r2, [r1, #0]
 800315e:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8003162:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8003166:	6013      	str	r3, [r2, #0]
	uint32_t irBuffer[100]; //infrared LED sensor data
	uint32_t redBuffer[100];  //red LED sensor data
	int32_t bufferLength;


	bufferLength=100;
 8003168:	2364      	movs	r3, #100	@ 0x64
 800316a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 800316e:	2300      	movs	r3, #0
 8003170:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 8003174:	e023      	b.n	80031be <acquire_max_30102_data+0x86>
	  {
	    while (available() == false) //do we have new data?
	    	check_new_data(); //Check the sensor for new data
 8003176:	f7ff fee7 	bl	8002f48 <check_new_data>
	    while (available() == false) //do we have new data?
 800317a:	f7ff fec7 	bl	8002f0c <available>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f8      	beq.n	8003176 <acquire_max_30102_data+0x3e>

	    redBuffer[i] = getRed();
 8003184:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 8003188:	f7ff ff8e 	bl	80030a8 <getRed>
 800318c:	4602      	mov	r2, r0
 800318e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003192:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003196:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    irBuffer[i] =  getIR();
 800319a:	f897 4337 	ldrb.w	r4, [r7, #823]	@ 0x337
 800319e:	f7ff ff99 	bl	80030d4 <getIR>
 80031a2:	4602      	mov	r2, r0
 80031a4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80031a8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031ac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	    nextSample(); //We're finished with this sample so move to next sample
 80031b0:	f7ff ffa6 	bl	8003100 <nextSample>
	  for (uint8_t i = 0 ; i < bufferLength ; i++)
 80031b4:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80031b8:	3301      	adds	r3, #1
 80031ba:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
 80031be:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80031c2:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 80031c6:	429a      	cmp	r2, r3
 80031c8:	dcd7      	bgt.n	800317a <acquire_max_30102_data+0x42>
	  }
	  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 80031ca:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80031ce:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80031d2:	f107 0110 	add.w	r1, r7, #16
 80031d6:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80031da:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80031de:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	9202      	str	r2, [sp, #8]
 80031e6:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80031ea:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	9201      	str	r2, [sp, #4]
 80031f2:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 80031f6:	9200      	str	r2, [sp, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	460a      	mov	r2, r1
 80031fc:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 8003200:	f000 f938 	bl	8003474 <maxim_heart_rate_and_oxygen_saturation>
	    if(*valid_spo2==1){
 8003204:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8003208:	f993 3000 	ldrsb.w	r3, [r3]
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 808a 	bne.w	8003326 <acquire_max_30102_data+0x1ee>
		    	*status=true;
 8003212:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
		    return ;
 800321a:	e097      	b.n	800334c <acquire_max_30102_data+0x214>
		    }
	//  uint32_t start_time = millis();
	  while (--num_ters)
	  {
	    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
	    for (uint8_t i = 25; i < 100; i++)
 800321c:	2319      	movs	r3, #25
 800321e:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 8003222:	e028      	b.n	8003276 <acquire_max_30102_data+0x13e>
	    {
	      redBuffer[i - 25] = redBuffer[i];
 8003224:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 8003228:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800322c:	f1a3 0219 	sub.w	r2, r3, #25
 8003230:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003234:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003238:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800323c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003240:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	      irBuffer[i - 25] = irBuffer[i];
 8003248:	f897 1336 	ldrb.w	r1, [r7, #822]	@ 0x336
 800324c:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8003250:	f1a3 0219 	sub.w	r2, r3, #25
 8003254:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003258:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800325c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003260:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003264:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    for (uint8_t i = 25; i < 100; i++)
 800326c:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 8003270:	3301      	adds	r3, #1
 8003272:	f887 3336 	strb.w	r3, [r7, #822]	@ 0x336
 8003276:	f897 3336 	ldrb.w	r3, [r7, #822]	@ 0x336
 800327a:	2b63      	cmp	r3, #99	@ 0x63
 800327c:	d9d2      	bls.n	8003224 <acquire_max_30102_data+0xec>
	    }

	    //take 25 sets of samples before calculating the heart rate.
	    for (uint8_t i = 75; i < 100; i++)
 800327e:	234b      	movs	r3, #75	@ 0x4b
 8003280:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 8003284:	e02e      	b.n	80032e4 <acquire_max_30102_data+0x1ac>
	    {
	      while (available() == false) //do we have new data?
	    	  check_new_data(); //Check the sensor for new data
 8003286:	f7ff fe5f 	bl	8002f48 <check_new_data>
	      while (available() == false) //do we have new data?
 800328a:	f7ff fe3f 	bl	8002f0c <available>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f8      	beq.n	8003286 <acquire_max_30102_data+0x14e>



	      redBuffer[i] = getRed();
 8003294:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 8003298:	f7ff ff06 	bl	80030a8 <getRed>
 800329c:	4602      	mov	r2, r0
 800329e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80032a2:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 80032a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	      irBuffer[i] = getIR();
 80032aa:	f897 4335 	ldrb.w	r4, [r7, #821]	@ 0x335
 80032ae:	f7ff ff11 	bl	80030d4 <getIR>
 80032b2:	4602      	mov	r2, r0
 80032b4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80032b8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80032bc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	     nextSample(); //We're finished with this sample so move to next sample
 80032c0:	f7ff ff1e 	bl	8003100 <nextSample>

		    if(*valid_spo2==1){
 80032c4:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80032c8:	f993 3000 	ldrsb.w	r3, [r3]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d104      	bne.n	80032da <acquire_max_30102_data+0x1a2>
			    	*status=true;
 80032d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
			    return ;
 80032d8:	e038      	b.n	800334c <acquire_max_30102_data+0x214>
	    for (uint8_t i = 75; i < 100; i++)
 80032da:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 80032de:	3301      	adds	r3, #1
 80032e0:	f887 3335 	strb.w	r3, [r7, #821]	@ 0x335
 80032e4:	f897 3335 	ldrb.w	r3, [r7, #821]	@ 0x335
 80032e8:	2b63      	cmp	r3, #99	@ 0x63
 80032ea:	d9ce      	bls.n	800328a <acquire_max_30102_data+0x152>
			    }
	   }
	    //After gathering 25 new samples recalculate HR and SP02

	    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, spo2_var, valid_spo2, heart_rate_var, heart_rate_status);
 80032ec:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80032f0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80032f4:	f107 0110 	add.w	r1, r7, #16
 80032f8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80032fc:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8003300:	f5a2 724c 	sub.w	r2, r2, #816	@ 0x330
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	9202      	str	r2, [sp, #8]
 8003308:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 800330c:	f5a2 724e 	sub.w	r2, r2, #824	@ 0x338
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8003318:	9200      	str	r2, [sp, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	460a      	mov	r2, r1
 800331e:	f8d7 1330 	ldr.w	r1, [r7, #816]	@ 0x330
 8003322:	f000 f8a7 	bl	8003474 <maxim_heart_rate_and_oxygen_saturation>
	  while (--num_ters)
 8003326:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800332a:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 800332e:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8003332:	f5a2 724b 	sub.w	r2, r2, #812	@ 0x32c
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	3a01      	subs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8003340:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	f47f af68 	bne.w	800321c <acquire_max_30102_data+0xe4>
	  }

}
 800334c:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}

08003354 <process_SD_card>:
 *
 * Returns:
 * 	None
 */
void process_SD_card(char log_str[])
{
 8003354:	b580      	push	{r7, lr}
 8003356:	f5ad 5d01 	sub.w	sp, sp, #8256	@ 0x2040
 800335a:	b08e      	sub	sp, #56	@ 0x38
 800335c:	af00      	add	r7, sp, #0
 800335e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003362:	f843 0c74 	str.w	r0, [r3, #-116]
  FRESULT     file_result;                // Result Flag after Operations

  do
  {
    // Mount the SD Card
	file_result = f_mount(&Fat_handler, "", 1);
 8003366:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800336a:	f103 0318 	add.w	r3, r3, #24
 800336e:	3b1c      	subs	r3, #28
 8003370:	2201      	movs	r2, #1
 8003372:	4938      	ldr	r1, [pc, #224]	@ (8003454 <process_SD_card+0x100>)
 8003374:	4618      	mov	r0, r3
 8003376:	f006 f9bd 	bl	80096f4 <f_mount>
 800337a:	4603      	mov	r3, r0
 800337c:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8003380:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8003384:	7013      	strb	r3, [r2, #0]
    if (file_result != FR_OK)
 8003386:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 800338a:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <process_SD_card+0x54>
    {
      printf("No SD Card found : (%i)\r\n", file_result);
 8003394:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8003398:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	482d      	ldr	r0, [pc, #180]	@ (8003458 <process_SD_card+0x104>)
 80033a2:	f007 ff67 	bl	800b274 <iprintf>
      break;
 80033a6:	e046      	b.n	8003436 <process_SD_card+0xe2>
    }
    print_success("\n\rSD Card Mounted Successfully!\r\n");
 80033a8:	482c      	ldr	r0, [pc, #176]	@ (800345c <process_SD_card+0x108>)
 80033aa:	f7ff faa1 	bl	80028f0 <print_success>

    // Open the File in Append Mode to Write Data
    file_result = f_open(&file_var, "logger.txt", FA_OPEN_APPEND| FA_WRITE);
 80033ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033b2:	3b2c      	subs	r3, #44	@ 0x2c
 80033b4:	2232      	movs	r2, #50	@ 0x32
 80033b6:	492a      	ldr	r1, [pc, #168]	@ (8003460 <process_SD_card+0x10c>)
 80033b8:	4618      	mov	r0, r3
 80033ba:	f006 f9e1 	bl	8009780 <f_open>
 80033be:	4603      	mov	r3, r0
 80033c0:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 80033c4:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 80033c8:	7013      	strb	r3, [r2, #0]
    if(file_result != FR_OK)
 80033ca:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80033ce:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <process_SD_card+0x98>
    {
      printf("File creation/open Error : (%i)\r\n", file_result);
 80033d8:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80033dc:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	4619      	mov	r1, r3
 80033e4:	481f      	ldr	r0, [pc, #124]	@ (8003464 <process_SD_card+0x110>)
 80033e6:	f007 ff45 	bl	800b274 <iprintf>
      break;
 80033ea:	e024      	b.n	8003436 <process_SD_card+0xe2>
    }

    printf("\n\rWriting data to logger.txt!\r\n");
 80033ec:	481e      	ldr	r0, [pc, #120]	@ (8003468 <process_SD_card+0x114>)
 80033ee:	f007 ffb1 	bl	800b354 <puts>
    strcat(log_str, "\n\r"); // Adding \n\r to add the data to new line in the file
 80033f2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80033f6:	f853 0c74 	ldr.w	r0, [r3, #-116]
 80033fa:	f7fc ff51 	bl	80002a0 <strlen>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003406:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800340a:	4413      	add	r3, r2
 800340c:	4a17      	ldr	r2, [pc, #92]	@ (800346c <process_SD_card+0x118>)
 800340e:	8811      	ldrh	r1, [r2, #0]
 8003410:	7892      	ldrb	r2, [r2, #2]
 8003412:	8019      	strh	r1, [r3, #0]
 8003414:	709a      	strb	r2, [r3, #2]

    // Write the data into the text file
    f_puts(log_str, &file_var);
 8003416:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800341a:	3b2c      	subs	r3, #44	@ 0x2c
 800341c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8003420:	4619      	mov	r1, r3
 8003422:	f852 0c74 	ldr.w	r0, [r2, #-116]
 8003426:	f006 fe26 	bl	800a076 <f_puts>

    // Close the text file after adding the data
    f_close(&file_var);
 800342a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800342e:	3b2c      	subs	r3, #44	@ 0x2c
 8003430:	4618      	mov	r0, r3
 8003432:	f006 fd7f 	bl	8009f34 <f_close>
  } while(false);

  // Unmount the SD Card
  f_mount(NULL, "", 0);
 8003436:	2200      	movs	r2, #0
 8003438:	4906      	ldr	r1, [pc, #24]	@ (8003454 <process_SD_card+0x100>)
 800343a:	2000      	movs	r0, #0
 800343c:	f006 f95a 	bl	80096f4 <f_mount>
  print_success("\n\rSD Card Unmounted Successfully!\r\n");
 8003440:	480b      	ldr	r0, [pc, #44]	@ (8003470 <process_SD_card+0x11c>)
 8003442:	f7ff fa55 	bl	80028f0 <print_success>
}
 8003446:	bf00      	nop
 8003448:	f507 5701 	add.w	r7, r7, #8256	@ 0x2040
 800344c:	3738      	adds	r7, #56	@ 0x38
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	08010458 	.word	0x08010458
 8003458:	0801045c 	.word	0x0801045c
 800345c:	08010478 	.word	0x08010478
 8003460:	0801049c 	.word	0x0801049c
 8003464:	080104a8 	.word	0x080104a8
 8003468:	080104cc 	.word	0x080104cc
 800346c:	080104ec 	.word	0x080104ec
 8003470:	080104f0 	.word	0x080104f0

08003474 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b0b0      	sub	sp, #192	@ 0xc0
 8003478:	af04      	add	r7, sp, #16
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  int32_t n_peak_interval_sum;

  int32_t n_y_ac, n_x_ac;
  int32_t n_spo2_calc;
  int32_t n_y_dc_max, n_x_dc_max;
  int32_t n_y_dc_max_idx = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int32_t n_x_dc_max_idx = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int32_t an_ratio[5], n_ratio_average;
  int32_t n_nume, n_denom ;

  // calculates DC mean and subtract DC from ir
  un_ir_mean =0;
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  for (k=0 ; k<n_ir_buffer_length ; k++ ) un_ir_mean += pun_ir_buffer[k] ;
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800349a:	e00f      	b.n	80034bc <maxim_heart_rate_and_oxygen_saturation+0x48>
 800349c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4413      	add	r3, r2
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034ac:	4413      	add	r3, r2
 80034ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034b6:	3301      	adds	r3, #1
 80034b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034bc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	dbea      	blt.n	800349c <maxim_heart_rate_and_oxygen_saturation+0x28>
  un_ir_mean =un_ir_mean/n_ir_buffer_length ;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  // remove DC and invert signal so that we can use peak detector as valley detector
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034da:	e013      	b.n	8003504 <maxim_heart_rate_and_oxygen_saturation+0x90>
    an_x[k] = -1*(pun_ir_buffer[k] - un_ir_mean) ;
 80034dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	4ab4      	ldr	r2, [pc, #720]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80034f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )
 80034fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034fe:	3301      	adds	r3, #1
 8003500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003504:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	dbe6      	blt.n	80034dc <maxim_heart_rate_and_oxygen_saturation+0x68>

  // 4 pt Moving Average
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003514:	e028      	b.n	8003568 <maxim_heart_rate_and_oxygen_saturation+0xf4>
    an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int)4;
 8003516:	4aab      	ldr	r2, [pc, #684]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800351c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003524:	3301      	adds	r3, #1
 8003526:	49a7      	ldr	r1, [pc, #668]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003528:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800352c:	441a      	add	r2, r3
 800352e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003532:	3302      	adds	r3, #2
 8003534:	49a3      	ldr	r1, [pc, #652]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003536:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800353a:	441a      	add	r2, r3
 800353c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003540:	3303      	adds	r3, #3
 8003542:	49a0      	ldr	r1, [pc, #640]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003548:	4413      	add	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	da00      	bge.n	8003550 <maxim_heart_rate_and_oxygen_saturation+0xdc>
 800354e:	3303      	adds	r3, #3
 8003550:	109b      	asrs	r3, r3, #2
 8003552:	4619      	mov	r1, r3
 8003554:	4a9b      	ldr	r2, [pc, #620]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003556:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800355a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800355e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003562:	3301      	adds	r3, #1
 8003564:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800356c:	2b5f      	cmp	r3, #95	@ 0x5f
 800356e:	ddd2      	ble.n	8003516 <maxim_heart_rate_and_oxygen_saturation+0xa2>
  }
  // calculate threshold
  n_th1=0;
 8003570:	2300      	movs	r3, #0
 8003572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800357c:	e00e      	b.n	800359c <maxim_heart_rate_and_oxygen_saturation+0x128>
    n_th1 +=  an_x[k];
 800357e:	4a91      	ldr	r2, [pc, #580]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800358c:	4413      	add	r3, r2
 800358e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  for ( k=0 ; k<BUFFER_SIZE ;k++){
 8003592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003596:	3301      	adds	r3, #1
 8003598:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800359c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a0:	2b63      	cmp	r3, #99	@ 0x63
 80035a2:	ddec      	ble.n	800357e <maxim_heart_rate_and_oxygen_saturation+0x10a>
  }
  n_th1=  n_th1/ ( BUFFER_SIZE);
 80035a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035a8:	4a87      	ldr	r2, [pc, #540]	@ (80037c8 <maxim_heart_rate_and_oxygen_saturation+0x354>)
 80035aa:	fb82 1203 	smull	r1, r2, r2, r3
 80035ae:	1152      	asrs	r2, r2, #5
 80035b0:	17db      	asrs	r3, r3, #31
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1<30) n_th1=30; // min allowed
 80035b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035bc:	2b1d      	cmp	r3, #29
 80035be:	dc02      	bgt.n	80035c6 <maxim_heart_rate_and_oxygen_saturation+0x152>
 80035c0:	231e      	movs	r3, #30
 80035c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if( n_th1>60) n_th1=60; // max allowed
 80035c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80035cc:	dd02      	ble.n	80035d4 <maxim_heart_rate_and_oxygen_saturation+0x160>
 80035ce:	233c      	movs	r3, #60	@ 0x3c
 80035d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  for ( k=0 ; k<15;k++) an_ir_valley_locs[k]=0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035da:	e00c      	b.n	80035f6 <maxim_heart_rate_and_oxygen_saturation+0x182>
 80035dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	33b0      	adds	r3, #176	@ 0xb0
 80035e4:	443b      	add	r3, r7
 80035e6:	2200      	movs	r2, #0
 80035e8:	f843 2c88 	str.w	r2, [r3, #-136]
 80035ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035f0:	3301      	adds	r3, #1
 80035f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035fa:	2b0e      	cmp	r3, #14
 80035fc:	ddee      	ble.n	80035dc <maxim_heart_rate_and_oxygen_saturation+0x168>
  // since we flipped signal, we use peak detector azs valley detector
  maxim_find_peaks( an_ir_valley_locs, &n_npks, an_x, BUFFER_SIZE, n_th1, 4, 15 );//peak_height, peak_distance, max_num_peaks
 80035fe:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8003602:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003606:	230f      	movs	r3, #15
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	2304      	movs	r3, #4
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2364      	movs	r3, #100	@ 0x64
 8003616:	4a6b      	ldr	r2, [pc, #428]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 8003618:	f000 fa36 	bl	8003a88 <maxim_find_peaks>
  n_peak_interval_sum =0;
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (n_npks>=2){
 8003622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003624:	2b01      	cmp	r3, #1
 8003626:	dd38      	ble.n	800369a <maxim_heart_rate_and_oxygen_saturation+0x226>
    for (k=1; k<n_npks; k++) n_peak_interval_sum += (an_ir_valley_locs[k] -an_ir_valley_locs[k -1] ) ;
 8003628:	2301      	movs	r3, #1
 800362a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800362e:	e019      	b.n	8003664 <maxim_heart_rate_and_oxygen_saturation+0x1f0>
 8003630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	33b0      	adds	r3, #176	@ 0xb0
 8003638:	443b      	add	r3, r7
 800363a:	f853 2c88 	ldr.w	r2, [r3, #-136]
 800363e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003642:	3b01      	subs	r3, #1
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	33b0      	adds	r3, #176	@ 0xb0
 8003648:	443b      	add	r3, r7
 800364a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003654:	4413      	add	r3, r2
 8003656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800365a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800365e:	3301      	adds	r3, #1
 8003660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003664:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800366a:	429a      	cmp	r2, r3
 800366c:	dbe0      	blt.n	8003630 <maxim_heart_rate_and_oxygen_saturation+0x1bc>
    n_peak_interval_sum =n_peak_interval_sum/(n_npks-1);
 800366e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003670:	3b01      	subs	r3, #1
 8003672:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003676:	fb92 f3f3 	sdiv	r3, r2, r3
 800367a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    *pn_heart_rate =(int32_t)( (FreqS*60)/ n_peak_interval_sum );
 800367e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003682:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003686:	fb92 f2f3 	sdiv	r2, r2, r3
 800368a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800368e:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 8003690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <maxim_heart_rate_and_oxygen_saturation+0x236>
  }
  else  {
    *pn_heart_rate = -999; // unable to calculate because # of peaks are too small
 800369a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800369e:	4a4b      	ldr	r2, [pc, #300]	@ (80037cc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 80036a0:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80036a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
  }

  //  load raw value again for SPO2 calculation : RED(=y) and IR(=X)
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036b0:	e01c      	b.n	80036ec <maxim_heart_rate_and_oxygen_saturation+0x278>
      an_x[k] =  pun_ir_buffer[k] ;
 80036b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4413      	add	r3, r2
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4a40      	ldr	r2, [pc, #256]	@ (80037c4 <maxim_heart_rate_and_oxygen_saturation+0x350>)
 80036c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      an_y[k] =  pun_red_buffer[k] ;
 80036ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4619      	mov	r1, r3
 80036d8:	4a3d      	ldr	r2, [pc, #244]	@ (80037d0 <maxim_heart_rate_and_oxygen_saturation+0x35c>)
 80036da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (k=0 ; k<n_ir_buffer_length ; k++ )  {
 80036e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80036e6:	3301      	adds	r3, #1
 80036e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	dbdd      	blt.n	80036b2 <maxim_heart_rate_and_oxygen_saturation+0x23e>
  }

  // find precise min near an_ir_valley_locs
  n_exact_ir_valley_locs_count =n_npks;
 80036f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  //using exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration an_ratio
  //finding AC/DC maximum of raw

  n_ratio_average =0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  n_i_ratio_count = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for(k=0; k< 5; k++) an_ratio[k]=0;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800370e:	e00c      	b.n	800372a <maxim_heart_rate_and_oxygen_saturation+0x2b6>
 8003710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	33b0      	adds	r3, #176	@ 0xb0
 8003718:	443b      	add	r3, r7
 800371a:	2200      	movs	r2, #0
 800371c:	f843 2c9c 	str.w	r2, [r3, #-156]
 8003720:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003724:	3301      	adds	r3, #1
 8003726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800372a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800372e:	2b04      	cmp	r3, #4
 8003730:	ddee      	ble.n	8003710 <maxim_heart_rate_and_oxygen_saturation+0x29c>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003738:	e015      	b.n	8003766 <maxim_heart_rate_and_oxygen_saturation+0x2f2>
    if (an_ir_valley_locs[k] > BUFFER_SIZE ){
 800373a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	33b0      	adds	r3, #176	@ 0xb0
 8003742:	443b      	add	r3, r7
 8003744:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003748:	2b64      	cmp	r3, #100	@ 0x64
 800374a:	dd07      	ble.n	800375c <maxim_heart_rate_and_oxygen_saturation+0x2e8>
      *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4a1f      	ldr	r2, [pc, #124]	@ (80037cc <maxim_heart_rate_and_oxygen_saturation+0x358>)
 8003750:	601a      	str	r2, [r3, #0]
      *pch_spo2_valid  = 0;
 8003752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e189      	b.n	8003a70 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  for (k=0; k< n_exact_ir_valley_locs_count; k++){
 800375c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003760:	3301      	adds	r3, #1
 8003762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800376a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800376e:	429a      	cmp	r2, r3
 8003770:	dbe3      	blt.n	800373a <maxim_heart_rate_and_oxygen_saturation+0x2c6>
      return;
    }
  }
  // find max between two valley locations
  // and use an_ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003778:	e129      	b.n	80039ce <maxim_heart_rate_and_oxygen_saturation+0x55a>
    n_y_dc_max= -16777216 ;
 800377a:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800377e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    n_x_dc_max= -16777216;
 8003782:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (an_ir_valley_locs[k+1]-an_ir_valley_locs[k] >3){
 800378a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800378e:	3301      	adds	r3, #1
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	33b0      	adds	r3, #176	@ 0xb0
 8003794:	443b      	add	r3, r7
 8003796:	f853 2c88 	ldr.w	r2, [r3, #-136]
 800379a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	33b0      	adds	r3, #176	@ 0xb0
 80037a2:	443b      	add	r3, r7
 80037a4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	f340 810a 	ble.w	80039c4 <maxim_heart_rate_and_oxygen_saturation+0x550>
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 80037b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	33b0      	adds	r3, #176	@ 0xb0
 80037b8:	443b      	add	r3, r7
 80037ba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80037be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037c2:	e034      	b.n	800382e <maxim_heart_rate_and_oxygen_saturation+0x3ba>
 80037c4:	200003c8 	.word	0x200003c8
 80037c8:	51eb851f 	.word	0x51eb851f
 80037cc:	fffffc19 	.word	0xfffffc19
 80037d0:	20000558 	.word	0x20000558
          if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i]; n_x_dc_max_idx=i;}
 80037d4:	4aa8      	ldr	r2, [pc, #672]	@ (8003a78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80037d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037de:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80037e2:	429a      	cmp	r2, r3
 80037e4:	da0a      	bge.n	80037fc <maxim_heart_rate_and_oxygen_saturation+0x388>
 80037e6:	4aa4      	ldr	r2, [pc, #656]	@ (8003a78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80037e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i]; n_y_dc_max_idx=i;}
 80037fc:	4a9f      	ldr	r2, [pc, #636]	@ (8003a7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80037fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003806:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800380a:	429a      	cmp	r2, r3
 800380c:	da0a      	bge.n	8003824 <maxim_heart_rate_and_oxygen_saturation+0x3b0>
 800380e:	4a9b      	ldr	r2, [pc, #620]	@ (8003a7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800381c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003820:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (i=an_ir_valley_locs[k]; i< an_ir_valley_locs[k+1]; i++){
 8003824:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003828:	3301      	adds	r3, #1
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800382e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003832:	3301      	adds	r3, #1
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	33b0      	adds	r3, #176	@ 0xb0
 8003838:	443b      	add	r3, r7
 800383a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800383e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003842:	429a      	cmp	r2, r3
 8003844:	dbc6      	blt.n	80037d4 <maxim_heart_rate_and_oxygen_saturation+0x360>
      }
      n_y_ac= (an_y[an_ir_valley_locs[k+1]] - an_y[an_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_ir_valley_locs[k]); //red
 8003846:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800384a:	3301      	adds	r3, #1
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	33b0      	adds	r3, #176	@ 0xb0
 8003850:	443b      	add	r3, r7
 8003852:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003856:	4a89      	ldr	r2, [pc, #548]	@ (8003a7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 8003858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800385c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	33b0      	adds	r3, #176	@ 0xb0
 8003864:	443b      	add	r3, r7
 8003866:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800386a:	4984      	ldr	r1, [pc, #528]	@ (8003a7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800386c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	33b0      	adds	r3, #176	@ 0xb0
 800387a:	443b      	add	r3, r7
 800387c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003880:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003884:	1acb      	subs	r3, r1, r3
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[an_ir_valley_locs[k]] + n_y_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k])  ;
 800388c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	33b0      	adds	r3, #176	@ 0xb0
 8003894:	443b      	add	r3, r7
 8003896:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800389a:	4a78      	ldr	r2, [pc, #480]	@ (8003a7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 800389c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038a4:	3301      	adds	r3, #1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	33b0      	adds	r3, #176	@ 0xb0
 80038aa:	443b      	add	r3, r7
 80038ac:	f853 1c88 	ldr.w	r1, [r3, #-136]
 80038b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	33b0      	adds	r3, #176	@ 0xb0
 80038b8:	443b      	add	r3, r7
 80038ba:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80038be:	1acb      	subs	r3, r1, r3
 80038c0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80038c2:	fb91 f3f3 	sdiv	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	677b      	str	r3, [r7, #116]	@ 0x74
      n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 80038ca:	4a6c      	ldr	r2, [pc, #432]	@ (8003a7c <maxim_heart_rate_and_oxygen_saturation+0x608>)
 80038cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	677b      	str	r3, [r7, #116]	@ 0x74
      n_x_ac= (an_x[an_ir_valley_locs[k+1]] - an_x[an_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_ir_valley_locs[k]); // ir
 80038da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038de:	3301      	adds	r3, #1
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	33b0      	adds	r3, #176	@ 0xb0
 80038e4:	443b      	add	r3, r7
 80038e6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80038ea:	4a63      	ldr	r2, [pc, #396]	@ (8003a78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 80038ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	33b0      	adds	r3, #176	@ 0xb0
 80038f8:	443b      	add	r3, r7
 80038fa:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80038fe:	495e      	ldr	r1, [pc, #376]	@ (8003a78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003900:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003904:	1ad2      	subs	r2, r2, r3
 8003906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	33b0      	adds	r3, #176	@ 0xb0
 800390e:	443b      	add	r3, r7
 8003910:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003914:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8003918:	1acb      	subs	r3, r1, r3
 800391a:	fb02 f303 	mul.w	r3, r2, r3
 800391e:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[an_ir_valley_locs[k]] + n_x_ac/ (an_ir_valley_locs[k+1] - an_ir_valley_locs[k]);
 8003920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	33b0      	adds	r3, #176	@ 0xb0
 8003928:	443b      	add	r3, r7
 800392a:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800392e:	4a52      	ldr	r2, [pc, #328]	@ (8003a78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003938:	3301      	adds	r3, #1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	33b0      	adds	r3, #176	@ 0xb0
 800393e:	443b      	add	r3, r7
 8003940:	f853 1c88 	ldr.w	r1, [r3, #-136]
 8003944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	33b0      	adds	r3, #176	@ 0xb0
 800394c:	443b      	add	r3, r7
 800394e:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8003952:	1acb      	subs	r3, r1, r3
 8003954:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003956:	fb91 f3f3 	sdiv	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	673b      	str	r3, [r7, #112]	@ 0x70
      n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 800395e:	4a46      	ldr	r2, [pc, #280]	@ (8003a78 <maxim_heart_rate_and_oxygen_saturation+0x604>)
 8003960:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003968:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
      n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 800396e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003970:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003974:	fb02 f303 	mul.w	r3, r2, r3
 8003978:	11db      	asrs	r3, r3, #7
 800397a:	66fb      	str	r3, [r7, #108]	@ 0x6c
      n_denom= ( n_x_ac *n_y_dc_max)>>7;
 800397c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800397e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	11db      	asrs	r3, r3, #7
 8003988:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 800398a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800398c:	2b00      	cmp	r3, #0
 800398e:	dd19      	ble.n	80039c4 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8003990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003994:	2b04      	cmp	r3, #4
 8003996:	dc15      	bgt.n	80039c4 <maxim_heart_rate_and_oxygen_saturation+0x550>
 8003998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <maxim_heart_rate_and_oxygen_saturation+0x550>
      {
        an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 800399e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a0:	2264      	movs	r2, #100	@ 0x64
 80039a2:	fb03 f202 	mul.w	r2, r3, r2
 80039a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80039ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	33b0      	adds	r3, #176	@ 0xb0
 80039b4:	443b      	add	r3, r7
 80039b6:	f843 2c9c 	str.w	r2, [r3, #-156]
        n_i_ratio_count++;
 80039ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039be:	3301      	adds	r3, #1
 80039c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 80039c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039c8:	3301      	adds	r3, #1
 80039ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039d8:	429a      	cmp	r2, r3
 80039da:	f6ff aece 	blt.w	800377a <maxim_heart_rate_and_oxygen_saturation+0x306>
      }
    }
  }
  // choose median value since PPG signal may varies from beat to beat
  maxim_sort_ascend(an_ratio, n_i_ratio_count);
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f943 	bl	8003c72 <maxim_sort_ascend>
  n_middle_idx= n_i_ratio_count/2;
 80039ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80039f0:	0fda      	lsrs	r2, r3, #31
 80039f2:	4413      	add	r3, r2
 80039f4:	105b      	asrs	r3, r3, #1
 80039f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

  if (n_middle_idx >1)
 80039f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	dd13      	ble.n	8003a26 <maxim_heart_rate_and_oxygen_saturation+0x5b2>
    n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 80039fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a00:	3b01      	subs	r3, #1
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	33b0      	adds	r3, #176	@ 0xb0
 8003a06:	443b      	add	r3, r7
 8003a08:	f853 2c9c 	ldr.w	r2, [r3, #-156]
 8003a0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	33b0      	adds	r3, #176	@ 0xb0
 8003a12:	443b      	add	r3, r7
 8003a14:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8003a18:	4413      	add	r3, r2
 8003a1a:	0fda      	lsrs	r2, r3, #31
 8003a1c:	4413      	add	r3, r2
 8003a1e:	105b      	asrs	r3, r3, #1
 8003a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a24:	e007      	b.n	8003a36 <maxim_heart_rate_and_oxygen_saturation+0x5c2>
  else
    n_ratio_average = an_ratio[n_middle_idx ];
 8003a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	33b0      	adds	r3, #176	@ 0xb0
 8003a2c:	443b      	add	r3, r7
 8003a2e:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  if( n_ratio_average>2 && n_ratio_average <184){
 8003a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	dd11      	ble.n	8003a62 <maxim_heart_rate_and_oxygen_saturation+0x5ee>
 8003a3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a42:	2bb7      	cmp	r3, #183	@ 0xb7
 8003a44:	dc0d      	bgt.n	8003a62 <maxim_heart_rate_and_oxygen_saturation+0x5ee>
    n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8003a46:	4a0e      	ldr	r2, [pc, #56]	@ (8003a80 <maxim_heart_rate_and_oxygen_saturation+0x60c>)
 8003a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a4c:	4413      	add	r3, r2
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	67bb      	str	r3, [r7, #120]	@ 0x78
    *pn_spo2 = n_spo2_calc ;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003a56:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8003a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e006      	b.n	8003a70 <maxim_heart_rate_and_oxygen_saturation+0x5fc>
  }
  else{
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <maxim_heart_rate_and_oxygen_saturation+0x610>)
 8003a66:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8003a68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
  }
}
 8003a70:	37b0      	adds	r7, #176	@ 0xb0
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200003c8 	.word	0x200003c8
 8003a7c:	20000558 	.word	0x20000558
 8003a80:	0801078c 	.word	0x0801078c
 8003a84:	fffffc19 	.word	0xfffffc19

08003a88 <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  maxim_peaks_above_min_height( pn_locs, n_npks, pn_x, n_size, n_min_height );
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 f812 	bl	8003aca <maxim_peaks_above_min_height>
  maxim_remove_close_peaks( pn_locs, n_npks, pn_x, n_min_distance );
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f880 	bl	8003bb2 <maxim_remove_close_peaks>
  *n_npks = min( *n_npks, n_max_num );
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bfa8      	it	ge
 8003abc:	461a      	movge	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	601a      	str	r2, [r3, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 8003aca:	b480      	push	{r7}
 8003acc:	b087      	sub	sp, #28
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	603b      	str	r3, [r7, #0]
  int32_t i = 1, n_width;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
  *n_npks = 0;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

  while (i < n_size-1){
 8003ae2:	e05a      	b.n	8003b9a <maxim_peaks_above_min_height+0xd0>
    if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){      // find left edge of potential peaks
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	4413      	add	r3, r2
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a3a      	ldr	r2, [r7, #32]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	da4f      	bge.n	8003b94 <maxim_peaks_above_min_height+0xca>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	4413      	add	r3, r2
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b04:	3b01      	subs	r3, #1
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	440b      	add	r3, r1
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	dd40      	ble.n	8003b94 <maxim_peaks_above_min_height+0xca>
      n_width = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8003b16:	e002      	b.n	8003b1e <maxim_peaks_above_min_height+0x54>
        n_width++;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
      while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])  // find flat peaks
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	dd0d      	ble.n	8003b46 <maxim_peaks_above_min_height+0x7c>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	440b      	add	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	440b      	add	r3, r1
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d0e8      	beq.n	8003b18 <maxim_peaks_above_min_height+0x4e>
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	6979      	ldr	r1, [r7, #20]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	440b      	add	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	440b      	add	r3, r1
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dd13      	ble.n	8003b8a <maxim_peaks_above_min_height+0xc0>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b0e      	cmp	r3, #14
 8003b68:	dc0f      	bgt.n	8003b8a <maxim_peaks_above_min_height+0xc0>
        pn_locs[(*n_npks)++] = i;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	6011      	str	r1, [r2, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	601a      	str	r2, [r3, #0]
        // for flat peaks, peak location is left edge
        i += n_width+1;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3301      	adds	r3, #1
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4413      	add	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8003b88:	e007      	b.n	8003b9a <maxim_peaks_above_min_height+0xd0>
      }
      else
        i += n_width;
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]
      if (pn_x[i] > pn_x[i+n_width] && (*n_npks) < 15 ){      // find right edge of peaks
 8003b92:	e002      	b.n	8003b9a <maxim_peaks_above_min_height+0xd0>
    }
    else
      i++;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
  while (i < n_size-1){
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	db9f      	blt.n	8003ae4 <maxim_peaks_above_min_height+0x1a>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b088      	sub	sp, #32
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]

  int32_t i, j, n_old_npks, n_dist;

  /* Order peaks from large to small */
  maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f895 	bl	8003cf8 <maxim_sort_indices_descend>

  for ( i = -1; i < *pn_npks; i++ ){
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e03e      	b.n	8003c54 <maxim_remove_close_peaks+0xa2>
    n_old_npks = *pn_npks;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
    *pn_npks = i+1;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e02c      	b.n	8003c46 <maxim_remove_close_peaks+0x94>
      n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d005      	beq.n	8003c0a <maxim_remove_close_peaks+0x58>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	440b      	add	r3, r1
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	e001      	b.n	8003c0e <maxim_remove_close_peaks+0x5c>
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	613b      	str	r3, [r7, #16]
      if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	dc04      	bgt.n	8003c24 <maxim_remove_close_peaks+0x72>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	425b      	negs	r3, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	da0d      	bge.n	8003c40 <maxim_remove_close_peaks+0x8e>
        pn_locs[(*pn_npks)++] = pn_locs[j];
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	441a      	add	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c58      	adds	r0, r3, #1
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	6008      	str	r0, [r1, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	440b      	add	r3, r1
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	601a      	str	r2, [r3, #0]
    for ( j = i+1; j < n_old_npks; j++ ){
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	3301      	adds	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	dbce      	blt.n	8003bec <maxim_remove_close_peaks+0x3a>
  for ( i = -1; i < *pn_npks; i++ ){
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	dbbb      	blt.n	8003bd6 <maxim_remove_close_peaks+0x24>
    }
  }

  // Resort indices int32_to ascending order
  maxim_sort_ascend( pn_locs, *pn_npks );
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4619      	mov	r1, r3
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f804 	bl	8003c72 <maxim_sort_ascend>
}
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e02f      	b.n	8003ce2 <maxim_sort_ascend+0x70>
    n_temp = pn_x[i];
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	e00f      	b.n	8003cb4 <maxim_sort_ascend+0x42>
        pn_x[j] = pn_x[j-1];
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	440b      	add	r3, r1
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	dd0a      	ble.n	8003cd0 <maxim_sort_ascend+0x5e>
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	dbe1      	blt.n	8003c94 <maxim_sort_ascend+0x22>
    pn_x[j] = n_temp;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	dbcb      	blt.n	8003c82 <maxim_sort_ascend+0x10>
  }
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	@ 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  int32_t i, j, n_temp;
  for (i = 1; i < n_size; i++) {
 8003d04:	2301      	movs	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e037      	b.n	8003d7a <maxim_sort_indices_descend+0x82>
    n_temp = pn_indx[i];
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	4413      	add	r3, r2
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	617b      	str	r3, [r7, #20]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e00f      	b.n	8003d3c <maxim_sort_indices_descend+0x44>
      pn_indx[j] = pn_indx[j-1];
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d22:	3b01      	subs	r3, #1
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	441a      	add	r2, r3
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	440b      	add	r3, r1
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	601a      	str	r2, [r3, #0]
    for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dd12      	ble.n	8003d68 <maxim_sort_indices_descend+0x70>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d52:	3b01      	subs	r3, #1
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	440b      	add	r3, r1
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	440b      	add	r3, r1
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	dcd9      	bgt.n	8003d1c <maxim_sort_indices_descend+0x24>
    pn_indx[j] = n_temp;
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	4413      	add	r3, r2
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	601a      	str	r2, [r3, #0]
  for (i = 1; i < n_size; i++) {
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	3301      	adds	r3, #1
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	dbc3      	blt.n	8003d0a <maxim_sort_indices_descend+0x12>
  }
}
 8003d82:	bf00      	nop
 8003d84:	bf00      	nop
 8003d86:	3724      	adds	r7, #36	@ 0x24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <FSM_INIT>:
/* -------------------------------------------------- */
//          FUNCTION DEFINITIONS
/* -------------------------------------------------- */

void FSM_INIT(StateMachine *sm)
{ // initalize fsm with default values
 8003d90:	b4b0      	push	{r4, r5, r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
	sm->current_state = STATE_HEART_DATA_ACQUIRE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
	sm->valid_heart_rate = 0;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	705a      	strb	r2, [r3, #1]
	sm->spo2 = 0;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	605a      	str	r2, [r3, #4]
	sm->heart_rate = 0;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	609a      	str	r2, [r3, #8]
	sm->valid_spo2 = 0;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	731a      	strb	r2, [r3, #12]
	strcpy(sm->nrf_payload, DEFAULT_ACK);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3320      	adds	r3, #32
 8003dba:	4a0f      	ldr	r2, [pc, #60]	@ (8003df8 <FSM_INIT+0x68>)
 8003dbc:	461c      	mov	r4, r3
 8003dbe:	4615      	mov	r5, r2
 8003dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc2:	6020      	str	r0, [r4, #0]
 8003dc4:	6061      	str	r1, [r4, #4]
 8003dc6:	60a2      	str	r2, [r4, #8]
 8003dc8:	60e3      	str	r3, [r4, #12]
	sm->dir1 = 0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	761a      	strb	r2, [r3, #24]
	sm->dir2 = 0;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	765a      	strb	r2, [r3, #25]
	sm->gps_lat = 0.0;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	611a      	str	r2, [r3, #16]
	sm->gps_long = 0.0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	615a      	str	r2, [r3, #20]
	sm->temperature = 0.0;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bcb0      	pop	{r4, r5, r7}
 8003df6:	4770      	bx	lr
 8003df8:	08010514 	.word	0x08010514

08003dfc <execute_sm>:

void execute_sm(StateMachine *sm)
{ // state driven state machine
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b09f      	sub	sp, #124	@ 0x7c
 8003e00:	af06      	add	r7, sp, #24
 8003e02:	6078      	str	r0, [r7, #4]
	switch (sm->current_state)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	f200 81cb 	bhi.w	80041a4 <execute_sm+0x3a8>
 8003e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <execute_sm+0x18>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003f0d 	.word	0x08003f0d
 8003e1c:	08003f5b 	.word	0x08003f5b
 8003e20:	0800418d 	.word	0x0800418d
 8003e24:	08004141 	.word	0x08004141
	{
	case STATE_HEART_DATA_ACQUIRE: // acquire heart_rate_spo2
		sm->valid_heart_rate = 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	705a      	strb	r2, [r3, #1]
		sm->spo2 = 0;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	605a      	str	r2, [r3, #4]
		sm->heart_rate = 0;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
		sm->valid_spo2 = 0;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	731a      	strb	r2, [r3, #12]
		sm->temperature = 0.0;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	61da      	str	r2, [r3, #28]
		// print a log messaging
		print_info("\n \r State machine Status: Acquire Max30102 data \n \r");
 8003e48:	48ac      	ldr	r0, [pc, #688]	@ (80040fc <execute_sm+0x300>)
 8003e4a:	f7fe fd5f 	bl	800290c <print_info>
		// check if a command is received to disable max chip
		if (strcmp(command_ack, DISABLE_MAX30102) == 0)
 8003e4e:	49ac      	ldr	r1, [pc, #688]	@ (8004100 <execute_sm+0x304>)
 8003e50:	48ac      	ldr	r0, [pc, #688]	@ (8004104 <execute_sm+0x308>)
 8003e52:	f7fc f9c5 	bl	80001e0 <strcmp>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <execute_sm+0x84>
		{
			printf("MAX30102 Is disabled ! \n \r");
 8003e5c:	48aa      	ldr	r0, [pc, #680]	@ (8004108 <execute_sm+0x30c>)
 8003e5e:	f007 fa09 	bl	800b274 <iprintf>
			MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x0); // this puts the chip in a shutdown power saving mode
 8003e62:	2100      	movs	r1, #0
 8003e64:	2009      	movs	r0, #9
 8003e66:	f7fe ffb3 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
			sm->spo2 = 0.0;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	605a      	str	r2, [r3, #4]
			sm->temperature = 0.0;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	61da      	str	r2, [r3, #28]
			sm->current_state = STATE_GPS_DATA_ACQUIRE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
			break;
 8003e7e:	e191      	b.n	80041a4 <execute_sm+0x3a8>
		}
		MAX30102_WRITE_REGISTER(MODE_CONFIG_REG, 0x3); // turn the chip on and put in spo2 mode
 8003e80:	2103      	movs	r1, #3
 8003e82:	2009      	movs	r0, #9
 8003e84:	f7fe ffa4 	bl	8002dd0 <MAX30102_WRITE_REGISTER>
		bool valid_data = false;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		uint32_t timeout_val = 2; // try for 2 iterations to get heart rate data
 8003e8e:	2302      	movs	r3, #2
 8003e90:	64bb      	str	r3, [r7, #72]	@ 0x48
		acquire_max_30102_data(timeout_val, &(sm->valid_heart_rate), &(sm->spo2), &(sm->heart_rate), &(sm->valid_spo2), &valid_data);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	1d18      	adds	r0, r3, #4
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 0408 	add.w	r4, r3, #8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	f107 0247 	add.w	r2, r7, #71	@ 0x47
 8003ea8:	9201      	str	r2, [sp, #4]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	4623      	mov	r3, r4
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003eb2:	f7ff f941 	bl	8003138 <acquire_max_30102_data>
		sm->current_state = STATE_GPS_DATA_ACQUIRE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	701a      	strb	r2, [r3, #0]
		// if data is not found return as timeout
		if (!valid_data)
 8003ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <execute_sm+0xd6>
		{
			print_error("TIMEOUT ENCOUNTERED! \n \r");
 8003eca:	4890      	ldr	r0, [pc, #576]	@ (800410c <execute_sm+0x310>)
 8003ecc:	f7fe fd2c 	bl	8002928 <print_error>
 8003ed0:	e008      	b.n	8003ee4 <execute_sm+0xe8>
		}

		else
		{
			print_success("\n\rMAX30102 DATA SUCCESS \n \r");
 8003ed2:	488f      	ldr	r0, [pc, #572]	@ (8004110 <execute_sm+0x314>)
 8003ed4:	f7fe fd0c 	bl	80028f0 <print_success>
			printf("Spo2 : %ld \n \r", sm->spo2);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4619      	mov	r1, r3
 8003ede:	488d      	ldr	r0, [pc, #564]	@ (8004114 <execute_sm+0x318>)
 8003ee0:	f007 f9c8 	bl	800b274 <iprintf>
		}
		// start temperature measurement
		MAX30102_Start_Temperature_Measurement();
 8003ee4:	f7fe ffb4 	bl	8002e50 <MAX30102_Start_Temperature_Measurement>
		sm->temperature = MAX30102_Read_Temperature();
 8003ee8:	f7fe ffbe 	bl	8002e68 <MAX30102_Read_Temperature>
 8003eec:	eef0 7a40 	vmov.f32	s15, s0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	edc3 7a07 	vstr	s15, [r3, #28]
		printf("temperature value : %f \n \r", sm->temperature);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fb3c 	bl	8000578 <__aeabi_f2d>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4884      	ldr	r0, [pc, #528]	@ (8004118 <execute_sm+0x31c>)
 8003f06:	f007 f9b5 	bl	800b274 <iprintf>
		break;
 8003f0a:	e14b      	b.n	80041a4 <execute_sm+0x3a8>

	case STATE_GPS_DATA_ACQUIRE:
		print_info("State machine Status: Acquire GPS Data \n \r");
 8003f0c:	4883      	ldr	r0, [pc, #524]	@ (800411c <execute_sm+0x320>)
 8003f0e:	f7fe fcfd 	bl	800290c <print_info>
		// check if command is received to disable gps
		if (strcmp(command_ack, DISABLE_GPS) == 0)
 8003f12:	4983      	ldr	r1, [pc, #524]	@ (8004120 <execute_sm+0x324>)
 8003f14:	487b      	ldr	r0, [pc, #492]	@ (8004104 <execute_sm+0x308>)
 8003f16:	f7fc f963 	bl	80001e0 <strcmp>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <execute_sm+0x13c>
		{
			printf("GPS Is disabled ! \n \r");
 8003f20:	4880      	ldr	r0, [pc, #512]	@ (8004124 <execute_sm+0x328>)
 8003f22:	f007 f9a7 	bl	800b274 <iprintf>
			sm->gps_lat = 0.0;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
			sm->gps_long = 0.0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	615a      	str	r2, [r3, #20]
 8003f36:	e00c      	b.n	8003f52 <execute_sm+0x156>
		}
		else
		{
			parse_gps_output(&(sm->gps_lat), &(sm->dir1), &(sm->gps_long), &(sm->dir2));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f103 0010 	add.w	r0, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0118 	add.w	r1, r3, #24
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f103 0214 	add.w	r2, r3, #20
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3319      	adds	r3, #25
 8003f4e:	f7fe fcf9 	bl	8002944 <parse_gps_output>
		}
		sm->current_state = STATE_PACKET_FORMATION;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	701a      	strb	r2, [r3, #0]
		break;
 8003f58:	e124      	b.n	80041a4 <execute_sm+0x3a8>

	case STATE_PACKET_FORMATION:
		//convert data into packet seperate by '-' to be easily decoded by receiver
		float tempr = 0;
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	653b      	str	r3, [r7, #80]	@ 0x50
		int spo2 = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
		char delimiter = '-';
 8003f64:	232d      	movs	r3, #45	@ 0x2d
 8003f66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		print_info("\n\rState machine Status: Packet formatting \n \r");
 8003f6a:	486f      	ldr	r0, [pc, #444]	@ (8004128 <execute_sm+0x32c>)
 8003f6c:	f7fe fcce 	bl	800290c <print_info>
		tempr = sm->temperature;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	653b      	str	r3, [r7, #80]	@ 0x50
		spo2 = sm->spo2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		int payload_idx = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
		sm->nrf_payload[payload_idx++] = 'T';
 8003f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	4413      	add	r3, r2
 8003f8a:	2254      	movs	r2, #84	@ 0x54
 8003f8c:	f883 2020 	strb.w	r2, [r3, #32]
		if (spo2 == INVALID_SPO2)
 8003f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f92:	4a66      	ldr	r2, [pc, #408]	@ (800412c <execute_sm+0x330>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <execute_sm+0x1a0>
		{
			spo2 = 0; //default 0 value
 8003f98:	2300      	movs	r3, #0
 8003f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		char temp_holder[10];
		sprintf(temp_holder, "%.2f", tempr);
 8003f9c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8003f9e:	f7fc faeb 	bl	8000578 <__aeabi_f2d>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003faa:	4961      	ldr	r1, [pc, #388]	@ (8004130 <execute_sm+0x334>)
 8003fac:	f007 f9da 	bl	800b364 <siprintf>
		int i = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	657b      	str	r3, [r7, #84]	@ 0x54
		while (temp_holder[i])
 8003fb4:	e00e      	b.n	8003fd4 <execute_sm+0x1d8>
		{
			sm->nrf_payload[payload_idx++] = temp_holder[i++];
 8003fb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fb8:	1c53      	adds	r3, r2, #1
 8003fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fc2:	3260      	adds	r2, #96	@ 0x60
 8003fc4:	443a      	add	r2, r7
 8003fc6:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	460a      	mov	r2, r1
 8003fd0:	f883 2020 	strb.w	r2, [r3, #32]
		while (temp_holder[i])
 8003fd4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e9      	bne.n	8003fb6 <execute_sm+0x1ba>
		}
		sm->nrf_payload[payload_idx++] = delimiter;
 8003fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4413      	add	r3, r2
 8003fec:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003ff0:	f883 2020 	strb.w	r2, [r3, #32]
		sm->nrf_payload[payload_idx++] = 'O';
 8003ff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	224f      	movs	r2, #79	@ 0x4f
 8004000:	f883 2020 	strb.w	r2, [r3, #32]
		i++;
 8004004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004006:	3301      	adds	r3, #1
 8004008:	657b      	str	r3, [r7, #84]	@ 0x54
		sprintf(temp_holder, "%d", spo2);
 800400a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800400e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004010:	4948      	ldr	r1, [pc, #288]	@ (8004134 <execute_sm+0x338>)
 8004012:	4618      	mov	r0, r3
 8004014:	f007 f9a6 	bl	800b364 <siprintf>
		i = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	657b      	str	r3, [r7, #84]	@ 0x54
		while (temp_holder[i])
 800401c:	e00e      	b.n	800403c <execute_sm+0x240>
		{
			sm->nrf_payload[payload_idx++] = temp_holder[i++];
 800401e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004020:	1c53      	adds	r3, r2, #1
 8004022:	657b      	str	r3, [r7, #84]	@ 0x54
 8004024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	65b9      	str	r1, [r7, #88]	@ 0x58
 800402a:	3260      	adds	r2, #96	@ 0x60
 800402c:	443a      	add	r2, r7
 800402e:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	460a      	mov	r2, r1
 8004038:	f883 2020 	strb.w	r2, [r3, #32]
		while (temp_holder[i])
 800403c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8004040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004042:	4413      	add	r3, r2
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e9      	bne.n	800401e <execute_sm+0x222>
		}

		char gps_string[50];
		sm->nrf_payload[payload_idx++] = delimiter;
 800404a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004058:	f883 2020 	strb.w	r2, [r3, #32]
		sprintf(gps_string, "G%.2f%c,%.2f%c", sm->gps_lat, sm->dir1, sm->gps_long, sm->dir2);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fc fa89 	bl	8000578 <__aeabi_f2d>
 8004066:	4604      	mov	r4, r0
 8004068:	460d      	mov	r5, r1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7e1b      	ldrb	r3, [r3, #24]
 800406e:	461e      	mov	r6, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fa7f 	bl	8000578 <__aeabi_f2d>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	7e49      	ldrb	r1, [r1, #25]
 8004082:	f107 0008 	add.w	r0, r7, #8
 8004086:	9104      	str	r1, [sp, #16]
 8004088:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800408c:	9600      	str	r6, [sp, #0]
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	4929      	ldr	r1, [pc, #164]	@ (8004138 <execute_sm+0x33c>)
 8004094:	f007 f966 	bl	800b364 <siprintf>
		i = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	657b      	str	r3, [r7, #84]	@ 0x54
		while (gps_string[i])
 800409c:	e00e      	b.n	80040bc <execute_sm+0x2c0>
		{
			sm->nrf_payload[payload_idx++] = gps_string[i++];
 800409e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040a0:	1c53      	adds	r3, r2, #1
 80040a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040aa:	3260      	adds	r2, #96	@ 0x60
 80040ac:	443a      	add	r2, r7
 80040ae:	f812 1c58 	ldrb.w	r1, [r2, #-88]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	460a      	mov	r2, r1
 80040b8:	f883 2020 	strb.w	r2, [r3, #32]
		while (gps_string[i])
 80040bc:	f107 0208 	add.w	r2, r7, #8
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	4413      	add	r3, r2
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e9      	bne.n	800409e <execute_sm+0x2a2>
		}

		sm->nrf_payload[payload_idx] = '\0'; // Null-terminate the payload
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ce:	4413      	add	r3, r2
 80040d0:	3320      	adds	r3, #32
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
		printf("Formatted Payload %s size of payload is %d \n\r", sm->nrf_payload, strlen(sm->nrf_payload));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f103 0420 	add.w	r4, r3, #32
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3320      	adds	r3, #32
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc f8dd 	bl	80002a0 <strlen>
 80040e6:	4603      	mov	r3, r0
 80040e8:	461a      	mov	r2, r3
 80040ea:	4621      	mov	r1, r4
 80040ec:	4813      	ldr	r0, [pc, #76]	@ (800413c <execute_sm+0x340>)
 80040ee:	f007 f8c1 	bl	800b274 <iprintf>

		sm->current_state = STATE_TRANSMIT_NRF;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2204      	movs	r2, #4
 80040f6:	701a      	strb	r2, [r3, #0]
		break;
 80040f8:	e054      	b.n	80041a4 <execute_sm+0x3a8>
 80040fa:	bf00      	nop
 80040fc:	08010524 	.word	0x08010524
 8004100:	08010558 	.word	0x08010558
 8004104:	20000220 	.word	0x20000220
 8004108:	08010560 	.word	0x08010560
 800410c:	0801057c 	.word	0x0801057c
 8004110:	08010598 	.word	0x08010598
 8004114:	080105b4 	.word	0x080105b4
 8004118:	080105c4 	.word	0x080105c4
 800411c:	080105e0 	.word	0x080105e0
 8004120:	0801060c 	.word	0x0801060c
 8004124:	08010614 	.word	0x08010614
 8004128:	0801062c 	.word	0x0801062c
 800412c:	fffffc19 	.word	0xfffffc19
 8004130:	0801065c 	.word	0x0801065c
 8004134:	08010664 	.word	0x08010664
 8004138:	08010668 	.word	0x08010668
 800413c:	08010678 	.word	0x08010678

	case STATE_TRANSMIT_NRF:
		print_info("\n\rState machine Status: Transmit PayLoad \n \r");
 8004140:	481a      	ldr	r0, [pc, #104]	@ (80041ac <execute_sm+0x3b0>)
 8004142:	f7fe fbe3 	bl	800290c <print_info>
		if (NRF_TX_DATA(sm->nrf_payload, strlen(sm->nrf_payload)) == 1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f103 0420 	add.w	r4, r3, #32
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3320      	adds	r3, #32
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc f8a5 	bl	80002a0 <strlen>
 8004156:	4603      	mov	r3, r0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	4619      	mov	r1, r3
 800415c:	4620      	mov	r0, r4
 800415e:	f7fd fc8f 	bl	8001a80 <NRF_TX_DATA>
 8004162:	4603      	mov	r3, r0
 8004164:	2b01      	cmp	r3, #1
 8004166:	d109      	bne.n	800417c <execute_sm+0x380>
		{
			printf("\n \r transmit success payload size was %d \n \r", strlen(sm->nrf_payload));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3320      	adds	r3, #32
 800416c:	4618      	mov	r0, r3
 800416e:	f7fc f897 	bl	80002a0 <strlen>
 8004172:	4603      	mov	r3, r0
 8004174:	4619      	mov	r1, r3
 8004176:	480e      	ldr	r0, [pc, #56]	@ (80041b0 <execute_sm+0x3b4>)
 8004178:	f007 f87c 	bl	800b274 <iprintf>
		}
		sm->current_state = STATE_STORE_DATA_SD_CARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2203      	movs	r2, #3
 8004180:	701a      	strb	r2, [r3, #0]
		delay(2000);
 8004182:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004186:	f7fd fe85 	bl	8001e94 <delay>
		break;
 800418a:	e00b      	b.n	80041a4 <execute_sm+0x3a8>
	case STATE_STORE_DATA_SD_CARD:
		print_info("\n\rState machine Status: Log Data to SD CARD\n \r");
 800418c:	4809      	ldr	r0, [pc, #36]	@ (80041b4 <execute_sm+0x3b8>)
 800418e:	f7fe fbbd 	bl	800290c <print_info>
		process_SD_card(sm->nrf_payload);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3320      	adds	r3, #32
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff f8dc 	bl	8003354 <process_SD_card>
		sm->current_state = STATE_HEART_DATA_ACQUIRE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
		break;
 80041a2:	bf00      	nop
	}
}
 80041a4:	bf00      	nop
 80041a6:	3764      	adds	r7, #100	@ 0x64
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ac:	080106a8 	.word	0x080106a8
 80041b0:	080106d8 	.word	0x080106d8
 80041b4:	08010708 	.word	0x08010708

080041b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <HAL_MspInit+0x4c>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004204 <HAL_MspInit+0x4c>)
 80041c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <HAL_MspInit+0x4c>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_MspInit+0x4c>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <HAL_MspInit+0x4c>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ea:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <HAL_MspInit+0x4c>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80041f6:	2007      	movs	r0, #7
 80041f8:	f000 fdba 	bl	8004d70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a28      	ldr	r2, [pc, #160]	@ (80042c8 <HAL_SPI_MspInit+0xc0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d14a      	bne.n	80042c0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004238:	6413      	str	r3, [r2, #64]	@ 0x40
 800423a:	4b24      	ldr	r3, [pc, #144]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 8004250:	f043 0304 	orr.w	r3, r3, #4
 8004254:	6313      	str	r3, [r2, #48]	@ 0x30
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	4b19      	ldr	r3, [pc, #100]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	4a18      	ldr	r2, [pc, #96]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 800426c:	f043 0302 	orr.w	r3, r3, #2
 8004270:	6313      	str	r3, [r2, #48]	@ 0x30
 8004272:	4b16      	ldr	r3, [pc, #88]	@ (80042cc <HAL_SPI_MspInit+0xc4>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800427e:	230c      	movs	r3, #12
 8004280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428a:	2303      	movs	r3, #3
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800428e:	2305      	movs	r3, #5
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004292:	f107 0314 	add.w	r3, r7, #20
 8004296:	4619      	mov	r1, r3
 8004298:	480d      	ldr	r0, [pc, #52]	@ (80042d0 <HAL_SPI_MspInit+0xc8>)
 800429a:	f000 fe3d 	bl	8004f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800429e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ac:	2303      	movs	r3, #3
 80042ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042b0:	2305      	movs	r3, #5
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4619      	mov	r1, r3
 80042ba:	4806      	ldr	r0, [pc, #24]	@ (80042d4 <HAL_SPI_MspInit+0xcc>)
 80042bc:	f000 fe2c 	bl	8004f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042c0:	bf00      	nop
 80042c2:	3728      	adds	r7, #40	@ 0x28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40003800 	.word	0x40003800
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40020800 	.word	0x40020800
 80042d4:	40020400 	.word	0x40020400

080042d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	@ 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <HAL_UART_MspInit+0x94>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d134      	bne.n	8004364 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004370 <HAL_UART_MspInit+0x98>)
 8004300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004302:	4a1b      	ldr	r2, [pc, #108]	@ (8004370 <HAL_UART_MspInit+0x98>)
 8004304:	f043 0310 	orr.w	r3, r3, #16
 8004308:	6453      	str	r3, [r2, #68]	@ 0x44
 800430a:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_UART_MspInit+0x98>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <HAL_UART_MspInit+0x98>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431e:	4a14      	ldr	r2, [pc, #80]	@ (8004370 <HAL_UART_MspInit+0x98>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6313      	str	r3, [r2, #48]	@ 0x30
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_UART_MspInit+0x98>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004332:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004338:	2302      	movs	r3, #2
 800433a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004340:	2303      	movs	r3, #3
 8004342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004344:	2307      	movs	r3, #7
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004348:	f107 0314 	add.w	r3, r7, #20
 800434c:	4619      	mov	r1, r3
 800434e:	4809      	ldr	r0, [pc, #36]	@ (8004374 <HAL_UART_MspInit+0x9c>)
 8004350:	f000 fde2 	bl	8004f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004354:	2200      	movs	r2, #0
 8004356:	2100      	movs	r1, #0
 8004358:	2025      	movs	r0, #37	@ 0x25
 800435a:	f000 fd14 	bl	8004d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800435e:	2025      	movs	r0, #37	@ 0x25
 8004360:	f000 fd2d 	bl	8004dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004364:	bf00      	nop
 8004366:	3728      	adds	r7, #40	@ 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40011000 	.word	0x40011000
 8004370:	40023800 	.word	0x40023800
 8004374:	40020000 	.word	0x40020000

08004378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800437c:	bf00      	nop
 800437e:	e7fd      	b.n	800437c <NMI_Handler+0x4>

08004380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <HardFault_Handler+0x4>

08004388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <MemManage_Handler+0x4>

08004390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004394:	bf00      	nop
 8004396:	e7fd      	b.n	8004394 <BusFault_Handler+0x4>

08004398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800439c:	bf00      	nop
 800439e:	e7fd      	b.n	800439c <UsageFault_Handler+0x4>

080043a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043c0:	bf00      	nop
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  Uart_isr(&huart1);
 80043d0:	4803      	ldr	r0, [pc, #12]	@ (80043e0 <USART1_IRQHandler+0x14>)
 80043d2:	f000 fa97 	bl	8004904 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043d6:	4802      	ldr	r0, [pc, #8]	@ (80043e0 <USART1_IRQHandler+0x14>)
 80043d8:	f002 f876 	bl	80064c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	2000035c 	.word	0x2000035c

080043e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return 1;
 80043e8:	2301      	movs	r3, #1
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <_kill>:

int _kill(int pid, int sig)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80043fe:	f007 f927 	bl	800b650 <__errno>
 8004402:	4603      	mov	r3, r0
 8004404:	2216      	movs	r2, #22
 8004406:	601a      	str	r2, [r3, #0]
  return -1;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <_exit>:

void _exit (int status)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800441c:	f04f 31ff 	mov.w	r1, #4294967295
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ffe7 	bl	80043f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004426:	bf00      	nop
 8004428:	e7fd      	b.n	8004426 <_exit+0x12>

0800442a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e00a      	b.n	8004452 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800443c:	f000 fb38 	bl	8004ab0 <__io_getchar>
 8004440:	4601      	mov	r1, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	60ba      	str	r2, [r7, #8]
 8004448:	b2ca      	uxtb	r2, r1
 800444a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	3301      	adds	r3, #1
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	dbf0      	blt.n	800443c <_read+0x12>
  }

  return len;
 800445a:	687b      	ldr	r3, [r7, #4]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e009      	b.n	800448a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	60ba      	str	r2, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fb08 	bl	8004a94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3301      	adds	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	dbf1      	blt.n	8004476 <_write+0x12>
  }
  return len;
 8004492:	687b      	ldr	r3, [r7, #4]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <_close>:

int _close(int file)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044c4:	605a      	str	r2, [r3, #4]
  return 0;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_isatty>:

int _isatty(int file)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044dc:	2301      	movs	r3, #1
}
 80044de:	4618      	mov	r0, r3
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800450c:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <_sbrk+0x5c>)
 800450e:	4b15      	ldr	r3, [pc, #84]	@ (8004564 <_sbrk+0x60>)
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004518:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <_sbrk+0x64>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004520:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <_sbrk+0x64>)
 8004522:	4a12      	ldr	r2, [pc, #72]	@ (800456c <_sbrk+0x68>)
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <_sbrk+0x64>)
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4413      	add	r3, r2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	429a      	cmp	r2, r3
 8004532:	d207      	bcs.n	8004544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004534:	f007 f88c 	bl	800b650 <__errno>
 8004538:	4603      	mov	r3, r0
 800453a:	220c      	movs	r2, #12
 800453c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800453e:	f04f 33ff 	mov.w	r3, #4294967295
 8004542:	e009      	b.n	8004558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <_sbrk+0x64>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800454a:	4b07      	ldr	r3, [pc, #28]	@ (8004568 <_sbrk+0x64>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	4a05      	ldr	r2, [pc, #20]	@ (8004568 <_sbrk+0x64>)
 8004554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004556:	68fb      	ldr	r3, [r7, #12]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20020000 	.word	0x20020000
 8004564:	00000400 	.word	0x00000400
 8004568:	200006e8 	.word	0x200006e8
 800456c:	20000e98 	.word	0x20000e98

08004570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004574:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <SystemInit+0x20>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	4a05      	ldr	r2, [pc, #20]	@ (8004590 <SystemInit+0x20>)
 800457c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004580:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <Ringbuf_init>:
 *
 * Returns:
 * 	None
 */
void Ringbuf_init(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8004598:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <Ringbuf_init+0x3c>)
 800459a:	4a0e      	ldr	r2, [pc, #56]	@ (80045d4 <Ringbuf_init+0x40>)
 800459c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800459e:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <Ringbuf_init+0x44>)
 80045a0:	4a0e      	ldr	r2, [pc, #56]	@ (80045dc <Ringbuf_init+0x48>)
 80045a2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt*/
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80045a4:	4b0e      	ldr	r3, [pc, #56]	@ (80045e0 <Ringbuf_init+0x4c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <Ringbuf_init+0x4c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80045b4:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <Ringbuf_init+0x4c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	4b09      	ldr	r3, [pc, #36]	@ (80045e0 <Ringbuf_init+0x4c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0220 	orr.w	r2, r2, #32
 80045c2:	60da      	str	r2, [r3, #12]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000b00 	.word	0x20000b00
 80045d4:	200006f0 	.word	0x200006f0
 80045d8:	20000b04 	.word	0x20000b04
 80045dc:	200008f8 	.word	0x200008f8
 80045e0:	2000035c 	.word	0x2000035c

080045e4 <store_char>:
 *
 * Returns:
 * 	None
 */
void store_char(unsigned char c, ring_buffer *buffer)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80045f6:	3301      	adds	r3, #1
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	60fb      	str	r3, [r7, #12]
  if(i != buffer->tail) {
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	429a      	cmp	r2, r3
 8004608:	d009      	beq.n	800461e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	79f9      	ldrb	r1, [r7, #7]
 8004614:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
	...

0800462c <Uart_read>:
 *
 * Returns:
 * 	Number of Unread Bytes that are present in the RX Buffer
 */
int Uart_read(void)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8004632:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <Uart_read+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800463a:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <Uart_read+0x54>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004642:	429a      	cmp	r2, r3
 8004644:	d102      	bne.n	800464c <Uart_read+0x20>
  {
    return -1;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e013      	b.n	8004674 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800464c:	4b0c      	ldr	r3, [pc, #48]	@ (8004680 <Uart_read+0x54>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <Uart_read+0x54>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004658:	5cd3      	ldrb	r3, [r2, r3]
 800465a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800465c:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <Uart_read+0x54>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <Uart_read+0x54>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 8004672:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000b00 	.word	0x20000b00

08004684 <IsDataAvailable>:
 *
 * Returns:
 * 	Number of Unread Bytes that are present in the RX Buffer
 */
int IsDataAvailable(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <IsDataAvailable+0x30>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004690:	b29a      	uxth	r2, r3
 8004692:	4b08      	ldr	r3, [pc, #32]	@ (80046b4 <IsDataAvailable+0x30>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800469a:	b29b      	uxth	r3, r3
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	20000b00 	.word	0x20000b00

080046b8 <Uart_peek>:
 *
 * Returns:
 * 	Character peeked from the RX Buffer
 */
int Uart_peek()
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80046bc:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <Uart_peek+0x38>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <Uart_peek+0x38>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d102      	bne.n	80046d6 <Uart_peek+0x1e>
  {
    return -1;
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	e006      	b.n	80046e4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <Uart_peek+0x38>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <Uart_peek+0x38>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000b00 	.word	0x20000b00

080046f4 <Copy_upto>:
 * Returns:
 * 	1 : Success
 * 	-1: Failure
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fb fdcc 	bl	80002a0 <strlen>
 8004708:	4603      	mov	r3, r0
 800470a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8004710:	e01e      	b.n	8004750 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8004712:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <Copy_upto+0xf8>)
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	4b35      	ldr	r3, [pc, #212]	@ (80047ec <Copy_upto+0xf8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6838      	ldr	r0, [r7, #0]
 8004722:	4403      	add	r3, r0
 8004724:	5c8a      	ldrb	r2, [r1, r2]
 8004726:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8004728:	4b30      	ldr	r3, [pc, #192]	@ (80047ec <Copy_upto+0xf8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	4b2e      	ldr	r3, [pc, #184]	@ (80047ec <Copy_upto+0xf8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
			indx++;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	3301      	adds	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8004744:	bf00      	nop
 8004746:	f7ff ff9d 	bl	8004684 <IsDataAvailable>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0fa      	beq.n	8004746 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8004750:	f7ff ffb2 	bl	80046b8 <Uart_peek>
 8004754:	4601      	mov	r1, r0
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	4299      	cmp	r1, r3
 8004760:	d1d7      	bne.n	8004712 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8004762:	e027      	b.n	80047b4 <Copy_upto+0xc0>
	{
		so_far++;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	3301      	adds	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800476a:	f7ff ff5f 	bl	800462c <Uart_read>
 800476e:	4601      	mov	r1, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	613a      	str	r2, [r7, #16]
 8004776:	461a      	mov	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4413      	add	r3, r2
 800477c:	b2ca      	uxtb	r2, r1
 800477e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d101      	bne.n	800478c <Copy_upto+0x98>
 8004788:	2301      	movs	r3, #1
 800478a:	e02a      	b.n	80047e2 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 800478c:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <Copy_upto+0xfc>)
 800478e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004792:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8004794:	bf00      	nop
 8004796:	f7ff ff75 	bl	8004684 <IsDataAvailable>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d103      	bne.n	80047a8 <Copy_upto+0xb4>
 80047a0:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <Copy_upto+0xfc>)
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f6      	bne.n	8004796 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <Copy_upto+0xfc>)
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <Copy_upto+0xc0>
 80047b0:	2300      	movs	r3, #0
 80047b2:	e016      	b.n	80047e2 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80047b4:	f7ff ff80 	bl	80046b8 <Uart_peek>
 80047b8:	4601      	mov	r1, r0
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	4299      	cmp	r1, r3
 80047c4:	d0ce      	beq.n	8004764 <Copy_upto+0x70>
	}

	if (so_far != len)
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d002      	beq.n	80047d4 <Copy_upto+0xe0>
	{
		so_far = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
		goto again;
 80047d2:	e79d      	b.n	8004710 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d101      	bne.n	80047e0 <Copy_upto+0xec>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <Copy_upto+0xee>
	else return 0;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000b00 	.word	0x20000b00
 80047f0:	200006ec 	.word	0x200006ec

080047f4 <Wait_for>:
 * Returns:
 * 	1 : Success
 * 	-1: Failure
 */
int Wait_for (char *string)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fb fd4d 	bl	80002a0 <strlen>
 8004806:	4603      	mov	r3, r0
 8004808:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 800480a:	4b3c      	ldr	r3, [pc, #240]	@ (80048fc <Wait_for+0x108>)
 800480c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004810:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8004812:	bf00      	nop
 8004814:	f7ff ff36 	bl	8004684 <IsDataAvailable>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d103      	bne.n	8004826 <Wait_for+0x32>
 800481e:	4b37      	ldr	r3, [pc, #220]	@ (80048fc <Wait_for+0x108>)
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f6      	bne.n	8004814 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8004826:	4b35      	ldr	r3, [pc, #212]	@ (80048fc <Wait_for+0x108>)
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d119      	bne.n	8004862 <Wait_for+0x6e>
 800482e:	2300      	movs	r3, #0
 8004830:	e060      	b.n	80048f4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8004832:	4b33      	ldr	r3, [pc, #204]	@ (8004900 <Wait_for+0x10c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800483a:	4b31      	ldr	r3, [pc, #196]	@ (8004900 <Wait_for+0x10c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004842:	429a      	cmp	r2, r3
 8004844:	d00b      	beq.n	800485e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8004846:	4b2e      	ldr	r3, [pc, #184]	@ (8004900 <Wait_for+0x10c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	4b2b      	ldr	r3, [pc, #172]	@ (8004900 <Wait_for+0x10c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004858:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800485c:	e001      	b.n	8004862 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800485e:	2300      	movs	r3, #0
 8004860:	e048      	b.n	80048f4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8004862:	f7ff ff29 	bl	80046b8 <Uart_peek>
 8004866:	4601      	mov	r1, r0
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	4299      	cmp	r1, r3
 8004872:	d1de      	bne.n	8004832 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8004874:	e027      	b.n	80048c6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800487c:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <Wait_for+0x10c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <Wait_for+0x10c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800488e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
		if (so_far == len) return 1;
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	429a      	cmp	r2, r3
 8004898:	d101      	bne.n	800489e <Wait_for+0xaa>
 800489a:	2301      	movs	r3, #1
 800489c:	e02a      	b.n	80048f4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800489e:	4b17      	ldr	r3, [pc, #92]	@ (80048fc <Wait_for+0x108>)
 80048a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80048a4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80048a6:	bf00      	nop
 80048a8:	f7ff feec 	bl	8004684 <IsDataAvailable>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d103      	bne.n	80048ba <Wait_for+0xc6>
 80048b2:	4b12      	ldr	r3, [pc, #72]	@ (80048fc <Wait_for+0x108>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f6      	bne.n	80048a8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <Wait_for+0x108>)
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <Wait_for+0xd2>
 80048c2:	2300      	movs	r3, #0
 80048c4:	e016      	b.n	80048f4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80048c6:	f7ff fef7 	bl	80046b8 <Uart_peek>
 80048ca:	4601      	mov	r1, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d0ce      	beq.n	8004876 <Wait_for+0x82>
	}

	if (so_far != len)
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d002      	beq.n	80048e6 <Wait_for+0xf2>
	{
		so_far = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
		goto again;
 80048e4:	e791      	b.n	800480a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d101      	bne.n	80048f2 <Wait_for+0xfe>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <Wait_for+0x100>
	else return 0;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	200006ec 	.word	0x200006ec
 8004900:	20000b00 	.word	0x20000b00

08004904 <Uart_isr>:
 *
 * Returns:
 *  None
 */
void Uart_isr (UART_HandleTypeDef *huart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <Uart_isr+0x4a>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <Uart_isr+0x4a>
    {
		huart->Instance->SR;                       /* Read status register */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800493e:	4b1e      	ldr	r3, [pc, #120]	@ (80049b8 <Uart_isr+0xb4>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fe4c 	bl	80045e4 <store_char>
        return;
 800494c:	e031      	b.n	80049b2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02c      	beq.n	80049b2 <Uart_isr+0xae>
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d027      	beq.n	80049b2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8004962:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <Uart_isr+0xb8>)
 8004964:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004968:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <Uart_isr+0xb8>)
 800496a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800496e:	429a      	cmp	r2, r3
 8004970:	d108      	bne.n	8004984 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004980:	60da      	str	r2, [r3, #12]
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
    	      huart->Instance->SR;
    	      huart->Instance->DR = c;
    	    }
    	return;
 8004982:	e015      	b.n	80049b0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8004984:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <Uart_isr+0xb8>)
 8004986:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800498a:	4a0c      	ldr	r2, [pc, #48]	@ (80049bc <Uart_isr+0xb8>)
 800498c:	5cd3      	ldrb	r3, [r2, r3]
 800498e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8004990:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <Uart_isr+0xb8>)
 8004992:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	4a07      	ldr	r2, [pc, #28]	@ (80049bc <Uart_isr+0xb8>)
 800499e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	7bba      	ldrb	r2, [r7, #14]
 80049ae:	605a      	str	r2, [r3, #4]
    	return;
 80049b0:	bf00      	nop
    }
}
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000b00 	.word	0x20000b00
 80049bc:	200008f8 	.word	0x200008f8

080049c0 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 80049c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <usart_init+0x70>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	4a19      	ldr	r2, [pc, #100]	@ (8004a30 <usart_init+0x70>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ce:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 80049d0:	4b17      	ldr	r3, [pc, #92]	@ (8004a30 <usart_init+0x70>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	4a16      	ldr	r2, [pc, #88]	@ (8004a30 <usart_init+0x70>)
 80049d6:	f043 0301 	orr.w	r3, r3, #1
 80049da:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 80049dc:	4b15      	ldr	r3, [pc, #84]	@ (8004a34 <usart_init+0x74>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <usart_init+0x74>)
 80049e2:	f043 0320 	orr.w	r3, r3, #32
 80049e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 80049e8:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <usart_init+0x74>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a11      	ldr	r2, [pc, #68]	@ (8004a34 <usart_init+0x74>)
 80049ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049f2:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 80049f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <usart_init+0x74>)
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004a34 <usart_init+0x74>)
 80049fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80049fe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <usart_init+0x74>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4a0b      	ldr	r2, [pc, #44]	@ (8004a34 <usart_init+0x74>)
 8004a06:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8004a0a:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <usart_init+0x78>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a09      	ldr	r2, [pc, #36]	@ (8004a38 <usart_init+0x78>)
 8004a12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a16:	f043 030c 	orr.w	r3, r3, #12
 8004a1a:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8004a1c:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <usart_init+0x78>)
 8004a1e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8004a22:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
}

 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40004400 	.word	0x40004400

08004a3c <usart_out>:
void usart_out(char ch) {
    while (!(USART2->SR & USART_SR_TXE)) {
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	4603      	mov	r3, r0
 8004a44:	71fb      	strb	r3, [r7, #7]
        // Wait until transmit buffer is empty
 8004a46:	bf00      	nop
 8004a48:	4b07      	ldr	r3, [pc, #28]	@ (8004a68 <usart_out+0x2c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f9      	beq.n	8004a48 <usart_out+0xc>
    }
    USART2->DR = ch;
}
 8004a54:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <usart_out+0x2c>)
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	6053      	str	r3, [r2, #4]

 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40004400 	.word	0x40004400

08004a6c <usart_get>:
        usart_out(*string++);
    }
}

char usart_get() {
    while (!(USART2->SR & USART_SR_RXNE)) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
        // Wait until receive buffer is not empty
 8004a70:	bf00      	nop
 8004a72:	4b07      	ldr	r3, [pc, #28]	@ (8004a90 <usart_get+0x24>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f9      	beq.n	8004a72 <usart_get+0x6>
    }
    return USART2->DR;
}
 8004a7e:	4b04      	ldr	r3, [pc, #16]	@ (8004a90 <usart_get+0x24>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b2db      	uxtb	r3, r3

 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40004400 	.word	0x40004400

08004a94 <__io_putchar>:
// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
    usart_out((char)ch); // Send character using USART
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
    return ch;           // Return the character for compatibility
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ffcb 	bl	8004a3c <usart_out>
}
 8004aa6:	687b      	ldr	r3, [r7, #4]

 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <__io_getchar>:
int __io_getchar(void) {
    return usart_get();  // Receive character using USART
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
}
 8004ab4:	f7ff ffda 	bl	8004a6c <usart_get>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4618      	mov	r0, r3
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004af8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ac4:	f7ff fd54 	bl	8004570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ac8:	480c      	ldr	r0, [pc, #48]	@ (8004afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004aca:	490d      	ldr	r1, [pc, #52]	@ (8004b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004acc:	4a0d      	ldr	r2, [pc, #52]	@ (8004b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad0:	e002      	b.n	8004ad8 <LoopCopyDataInit>

08004ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ad6:	3304      	adds	r3, #4

08004ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004adc:	d3f9      	bcc.n	8004ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ade:	4a0a      	ldr	r2, [pc, #40]	@ (8004b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8004b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae4:	e001      	b.n	8004aea <LoopFillZerobss>

08004ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ae8:	3204      	adds	r2, #4

08004aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aec:	d3fb      	bcc.n	8004ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aee:	f006 fdb5 	bl	800b65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004af2:	f7fd ffad 	bl	8002a50 <main>
  bx  lr    
 8004af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b00:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004b04:	08011120 	.word	0x08011120
  ldr r2, =_sbss
 8004b08:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004b0c:	20000e94 	.word	0x20000e94

08004b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b10:	e7fe      	b.n	8004b10 <ADC_IRQHandler>
	...

08004b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b18:	4b0e      	ldr	r3, [pc, #56]	@ (8004b54 <HAL_Init+0x40>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b54 <HAL_Init+0x40>)
 8004b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b24:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_Init+0x40>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0a      	ldr	r2, [pc, #40]	@ (8004b54 <HAL_Init+0x40>)
 8004b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b30:	4b08      	ldr	r3, [pc, #32]	@ (8004b54 <HAL_Init+0x40>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <HAL_Init+0x40>)
 8004b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b3c:	2003      	movs	r0, #3
 8004b3e:	f000 f917 	bl	8004d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b42:	2000      	movs	r0, #0
 8004b44:	f000 f808 	bl	8004b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b48:	f7ff fb36 	bl	80041b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023c00 	.word	0x40023c00

08004b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b60:	4b12      	ldr	r3, [pc, #72]	@ (8004bac <HAL_InitTick+0x54>)
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <HAL_InitTick+0x58>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f92f 	bl	8004dda <HAL_SYSTICK_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00e      	b.n	8004ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b0f      	cmp	r3, #15
 8004b8a:	d80a      	bhi.n	8004ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	f000 f8f7 	bl	8004d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b98:	4a06      	ldr	r2, [pc, #24]	@ (8004bb4 <HAL_InitTick+0x5c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000008 	.word	0x20000008
 8004bb0:	20000010 	.word	0x20000010
 8004bb4:	2000000c 	.word	0x2000000c

08004bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  return uwTick;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	@ (8004bcc <HAL_GetTick+0x14>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	20000b08 	.word	0x20000b08

08004bd0 <__NVIC_SetPriorityGrouping>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c02:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <__NVIC_SetPriorityGrouping+0x44>)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	60d3      	str	r3, [r2, #12]
}
 8004c08:	bf00      	nop
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <__NVIC_GetPriorityGrouping>:
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <__NVIC_GetPriorityGrouping+0x18>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0307 	and.w	r3, r3, #7
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <__NVIC_EnableIRQ>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	db0b      	blt.n	8004c5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	f003 021f 	and.w	r2, r3, #31
 8004c4c:	4907      	ldr	r1, [pc, #28]	@ (8004c6c <__NVIC_EnableIRQ+0x38>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	095b      	lsrs	r3, r3, #5
 8004c54:	2001      	movs	r0, #1
 8004c56:	fa00 f202 	lsl.w	r2, r0, r2
 8004c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_SetPriority>:
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	6039      	str	r1, [r7, #0]
 8004c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	db0a      	blt.n	8004c9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	490c      	ldr	r1, [pc, #48]	@ (8004cbc <__NVIC_SetPriority+0x4c>)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	0112      	lsls	r2, r2, #4
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	440b      	add	r3, r1
 8004c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c98:	e00a      	b.n	8004cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4908      	ldr	r1, [pc, #32]	@ (8004cc0 <__NVIC_SetPriority+0x50>)
 8004ca0:	79fb      	ldrb	r3, [r7, #7]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	3b04      	subs	r3, #4
 8004ca8:	0112      	lsls	r2, r2, #4
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	440b      	add	r3, r1
 8004cae:	761a      	strb	r2, [r3, #24]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	e000e100 	.word	0xe000e100
 8004cc0:	e000ed00 	.word	0xe000ed00

08004cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	@ 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf28      	it	cs
 8004ce2:	2304      	movcs	r3, #4
 8004ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d902      	bls.n	8004cf4 <NVIC_EncodePriority+0x30>
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	e000      	b.n	8004cf6 <NVIC_EncodePriority+0x32>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	401a      	ands	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	43d9      	mvns	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	4313      	orrs	r3, r2
         );
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3724      	adds	r7, #36	@ 0x24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d3c:	d301      	bcc.n	8004d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e00f      	b.n	8004d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d42:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <SysTick_Config+0x40>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d4a:	210f      	movs	r1, #15
 8004d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d50:	f7ff ff8e 	bl	8004c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d54:	4b05      	ldr	r3, [pc, #20]	@ (8004d6c <SysTick_Config+0x40>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d5a:	4b04      	ldr	r3, [pc, #16]	@ (8004d6c <SysTick_Config+0x40>)
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	e000e010 	.word	0xe000e010

08004d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff29 	bl	8004bd0 <__NVIC_SetPriorityGrouping>
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
 8004d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d98:	f7ff ff3e 	bl	8004c18 <__NVIC_GetPriorityGrouping>
 8004d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	6978      	ldr	r0, [r7, #20]
 8004da4:	f7ff ff8e 	bl	8004cc4 <NVIC_EncodePriority>
 8004da8:	4602      	mov	r2, r0
 8004daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff ff5d 	bl	8004c70 <__NVIC_SetPriority>
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b082      	sub	sp, #8
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7ff ff31 	bl	8004c34 <__NVIC_EnableIRQ>
}
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ffa2 	bl	8004d2c <SysTick_Config>
 8004de8:	4603      	mov	r3, r0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e00:	f7ff feda 	bl	8004bb8 <HAL_GetTick>
 8004e04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d008      	beq.n	8004e24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2280      	movs	r2, #128	@ 0x80
 8004e16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e052      	b.n	8004eca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0216 	bic.w	r2, r2, #22
 8004e32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695a      	ldr	r2, [r3, #20]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <HAL_DMA_Abort+0x62>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0208 	bic.w	r2, r2, #8
 8004e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e74:	e013      	b.n	8004e9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e76:	f7ff fe9f 	bl	8004bb8 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d90c      	bls.n	8004e9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e015      	b.n	8004eca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e4      	bne.n	8004e76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	223f      	movs	r2, #63	@ 0x3f
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2280      	movs	r2, #128	@ 0x80
 8004eea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e00c      	b.n	8004f0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	@ 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e159      	b.n	80051e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f34:	2201      	movs	r2, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	f040 8148 	bne.w	80051e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d005      	beq.n	8004f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d130      	bne.n	8004fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	2203      	movs	r2, #3
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 0201 	and.w	r2, r3, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d017      	beq.n	8005008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	2203      	movs	r2, #3
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0303 	and.w	r3, r3, #3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d123      	bne.n	800505c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	08da      	lsrs	r2, r3, #3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3208      	adds	r2, #8
 800501c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	220f      	movs	r2, #15
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	08da      	lsrs	r2, r3, #3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3208      	adds	r2, #8
 8005056:	69b9      	ldr	r1, [r7, #24]
 8005058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	2203      	movs	r2, #3
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	43db      	mvns	r3, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f003 0203 	and.w	r2, r3, #3
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4313      	orrs	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80a2 	beq.w	80051e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	4b57      	ldr	r3, [pc, #348]	@ (8005200 <HAL_GPIO_Init+0x2e8>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	4a56      	ldr	r2, [pc, #344]	@ (8005200 <HAL_GPIO_Init+0x2e8>)
 80050a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80050ae:	4b54      	ldr	r3, [pc, #336]	@ (8005200 <HAL_GPIO_Init+0x2e8>)
 80050b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050ba:	4a52      	ldr	r2, [pc, #328]	@ (8005204 <HAL_GPIO_Init+0x2ec>)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	3302      	adds	r3, #2
 80050c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	220f      	movs	r2, #15
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a49      	ldr	r2, [pc, #292]	@ (8005208 <HAL_GPIO_Init+0x2f0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d019      	beq.n	800511a <HAL_GPIO_Init+0x202>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a48      	ldr	r2, [pc, #288]	@ (800520c <HAL_GPIO_Init+0x2f4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <HAL_GPIO_Init+0x1fe>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a47      	ldr	r2, [pc, #284]	@ (8005210 <HAL_GPIO_Init+0x2f8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00d      	beq.n	8005112 <HAL_GPIO_Init+0x1fa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a46      	ldr	r2, [pc, #280]	@ (8005214 <HAL_GPIO_Init+0x2fc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d007      	beq.n	800510e <HAL_GPIO_Init+0x1f6>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a45      	ldr	r2, [pc, #276]	@ (8005218 <HAL_GPIO_Init+0x300>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d101      	bne.n	800510a <HAL_GPIO_Init+0x1f2>
 8005106:	2304      	movs	r3, #4
 8005108:	e008      	b.n	800511c <HAL_GPIO_Init+0x204>
 800510a:	2307      	movs	r3, #7
 800510c:	e006      	b.n	800511c <HAL_GPIO_Init+0x204>
 800510e:	2303      	movs	r3, #3
 8005110:	e004      	b.n	800511c <HAL_GPIO_Init+0x204>
 8005112:	2302      	movs	r3, #2
 8005114:	e002      	b.n	800511c <HAL_GPIO_Init+0x204>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <HAL_GPIO_Init+0x204>
 800511a:	2300      	movs	r3, #0
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	f002 0203 	and.w	r2, r2, #3
 8005122:	0092      	lsls	r2, r2, #2
 8005124:	4093      	lsls	r3, r2
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800512c:	4935      	ldr	r1, [pc, #212]	@ (8005204 <HAL_GPIO_Init+0x2ec>)
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	089b      	lsrs	r3, r3, #2
 8005132:	3302      	adds	r3, #2
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800513a:	4b38      	ldr	r3, [pc, #224]	@ (800521c <HAL_GPIO_Init+0x304>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800515e:	4a2f      	ldr	r2, [pc, #188]	@ (800521c <HAL_GPIO_Init+0x304>)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005164:	4b2d      	ldr	r3, [pc, #180]	@ (800521c <HAL_GPIO_Init+0x304>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005188:	4a24      	ldr	r2, [pc, #144]	@ (800521c <HAL_GPIO_Init+0x304>)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800518e:	4b23      	ldr	r3, [pc, #140]	@ (800521c <HAL_GPIO_Init+0x304>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051b2:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_GPIO_Init+0x304>)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051b8:	4b18      	ldr	r3, [pc, #96]	@ (800521c <HAL_GPIO_Init+0x304>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051dc:	4a0f      	ldr	r2, [pc, #60]	@ (800521c <HAL_GPIO_Init+0x304>)
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	2b0f      	cmp	r3, #15
 80051ec:	f67f aea2 	bls.w	8004f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3724      	adds	r7, #36	@ 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40023800 	.word	0x40023800
 8005204:	40013800 	.word	0x40013800
 8005208:	40020000 	.word	0x40020000
 800520c:	40020400 	.word	0x40020400
 8005210:	40020800 	.word	0x40020800
 8005214:	40020c00 	.word	0x40020c00
 8005218:	40021000 	.word	0x40021000
 800521c:	40013c00 	.word	0x40013c00

08005220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	807b      	strh	r3, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005230:	787b      	ldrb	r3, [r7, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005236:	887a      	ldrh	r2, [r7, #2]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800523c:	e003      	b.n	8005246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800523e:	887b      	ldrh	r3, [r7, #2]
 8005240:	041a      	lsls	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	619a      	str	r2, [r3, #24]
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e267      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d075      	beq.n	800535e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005272:	4b88      	ldr	r3, [pc, #544]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b04      	cmp	r3, #4
 800527c:	d00c      	beq.n	8005298 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527e:	4b85      	ldr	r3, [pc, #532]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005286:	2b08      	cmp	r3, #8
 8005288:	d112      	bne.n	80052b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800528a:	4b82      	ldr	r3, [pc, #520]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005292:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005296:	d10b      	bne.n	80052b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	4b7e      	ldr	r3, [pc, #504]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d05b      	beq.n	800535c <HAL_RCC_OscConfig+0x108>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d157      	bne.n	800535c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e242      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_OscConfig+0x74>
 80052ba:	4b76      	ldr	r3, [pc, #472]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a75      	ldr	r2, [pc, #468]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e01d      	b.n	8005304 <HAL_RCC_OscConfig+0xb0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x98>
 80052d2:	4b70      	ldr	r3, [pc, #448]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	4b6d      	ldr	r3, [pc, #436]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	e00b      	b.n	8005304 <HAL_RCC_OscConfig+0xb0>
 80052ec:	4b69      	ldr	r3, [pc, #420]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a68      	ldr	r2, [pc, #416]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4b66      	ldr	r3, [pc, #408]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a65      	ldr	r2, [pc, #404]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80052fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d013      	beq.n	8005334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7ff fc54 	bl	8004bb8 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005314:	f7ff fc50 	bl	8004bb8 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	@ 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e207      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005326:	4b5b      	ldr	r3, [pc, #364]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0xc0>
 8005332:	e014      	b.n	800535e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7ff fc40 	bl	8004bb8 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7ff fc3c 	bl	8004bb8 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	@ 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e1f3      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534e:	4b51      	ldr	r3, [pc, #324]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0xe8>
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800535c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d063      	beq.n	8005432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800536a:	4b4a      	ldr	r3, [pc, #296]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005376:	4b47      	ldr	r3, [pc, #284]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800537e:	2b08      	cmp	r3, #8
 8005380:	d11c      	bne.n	80053bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005382:	4b44      	ldr	r3, [pc, #272]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d116      	bne.n	80053bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538e:	4b41      	ldr	r3, [pc, #260]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_RCC_OscConfig+0x152>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e1c7      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4937      	ldr	r1, [pc, #220]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ba:	e03a      	b.n	8005432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d020      	beq.n	8005406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c4:	4b34      	ldr	r3, [pc, #208]	@ (8005498 <HAL_RCC_OscConfig+0x244>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7ff fbf5 	bl	8004bb8 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d2:	f7ff fbf1 	bl	8004bb8 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e1a8      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f0:	4b28      	ldr	r3, [pc, #160]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4925      	ldr	r1, [pc, #148]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005400:	4313      	orrs	r3, r2
 8005402:	600b      	str	r3, [r1, #0]
 8005404:	e015      	b.n	8005432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b24      	ldr	r3, [pc, #144]	@ (8005498 <HAL_RCC_OscConfig+0x244>)
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7ff fbd4 	bl	8004bb8 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005414:	f7ff fbd0 	bl	8004bb8 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e187      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005426:	4b1b      	ldr	r3, [pc, #108]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1f0      	bne.n	8005414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d036      	beq.n	80054ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005446:	4b15      	ldr	r3, [pc, #84]	@ (800549c <HAL_RCC_OscConfig+0x248>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7ff fbb4 	bl	8004bb8 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005454:	f7ff fbb0 	bl	8004bb8 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e167      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005466:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <HAL_RCC_OscConfig+0x240>)
 8005468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x200>
 8005472:	e01b      	b.n	80054ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005474:	4b09      	ldr	r3, [pc, #36]	@ (800549c <HAL_RCC_OscConfig+0x248>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800547a:	f7ff fb9d 	bl	8004bb8 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005480:	e00e      	b.n	80054a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005482:	f7ff fb99 	bl	8004bb8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d907      	bls.n	80054a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e150      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
 8005494:	40023800 	.word	0x40023800
 8005498:	42470000 	.word	0x42470000
 800549c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a0:	4b88      	ldr	r3, [pc, #544]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1ea      	bne.n	8005482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8097 	beq.w	80055e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054be:	4b81      	ldr	r3, [pc, #516]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10f      	bne.n	80054ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	4b7d      	ldr	r3, [pc, #500]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	4a7c      	ldr	r2, [pc, #496]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054da:	4b7a      	ldr	r3, [pc, #488]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ea:	4b77      	ldr	r3, [pc, #476]	@ (80056c8 <HAL_RCC_OscConfig+0x474>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d118      	bne.n	8005528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f6:	4b74      	ldr	r3, [pc, #464]	@ (80056c8 <HAL_RCC_OscConfig+0x474>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a73      	ldr	r2, [pc, #460]	@ (80056c8 <HAL_RCC_OscConfig+0x474>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005502:	f7ff fb59 	bl	8004bb8 <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800550a:	f7ff fb55 	bl	8004bb8 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e10c      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551c:	4b6a      	ldr	r3, [pc, #424]	@ (80056c8 <HAL_RCC_OscConfig+0x474>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <HAL_RCC_OscConfig+0x2ea>
 8005530:	4b64      	ldr	r3, [pc, #400]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a63      	ldr	r2, [pc, #396]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6713      	str	r3, [r2, #112]	@ 0x70
 800553c:	e01c      	b.n	8005578 <HAL_RCC_OscConfig+0x324>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d10c      	bne.n	8005560 <HAL_RCC_OscConfig+0x30c>
 8005546:	4b5f      	ldr	r3, [pc, #380]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554a:	4a5e      	ldr	r2, [pc, #376]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 800554c:	f043 0304 	orr.w	r3, r3, #4
 8005550:	6713      	str	r3, [r2, #112]	@ 0x70
 8005552:	4b5c      	ldr	r3, [pc, #368]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005556:	4a5b      	ldr	r2, [pc, #364]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6713      	str	r3, [r2, #112]	@ 0x70
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0x324>
 8005560:	4b58      	ldr	r3, [pc, #352]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005564:	4a57      	ldr	r2, [pc, #348]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005566:	f023 0301 	bic.w	r3, r3, #1
 800556a:	6713      	str	r3, [r2, #112]	@ 0x70
 800556c:	4b55      	ldr	r3, [pc, #340]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 800556e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005570:	4a54      	ldr	r2, [pc, #336]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005572:	f023 0304 	bic.w	r3, r3, #4
 8005576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d015      	beq.n	80055ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005580:	f7ff fb1a 	bl	8004bb8 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005586:	e00a      	b.n	800559e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005588:	f7ff fb16 	bl	8004bb8 <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0cb      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	4b49      	ldr	r3, [pc, #292]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0ee      	beq.n	8005588 <HAL_RCC_OscConfig+0x334>
 80055aa:	e014      	b.n	80055d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ac:	f7ff fb04 	bl	8004bb8 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7ff fb00 	bl	8004bb8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e0b5      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ca:	4b3e      	ldr	r3, [pc, #248]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ee      	bne.n	80055b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055d6:	7dfb      	ldrb	r3, [r7, #23]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055dc:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	4a38      	ldr	r2, [pc, #224]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80a1 	beq.w	8005734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f2:	4b34      	ldr	r3, [pc, #208]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d05c      	beq.n	80056b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d141      	bne.n	800568a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005606:	4b31      	ldr	r3, [pc, #196]	@ (80056cc <HAL_RCC_OscConfig+0x478>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7ff fad4 	bl	8004bb8 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005614:	f7ff fad0 	bl	8004bb8 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e087      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	4b27      	ldr	r3, [pc, #156]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	3b01      	subs	r3, #1
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	431a      	orrs	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	061b      	lsls	r3, r3, #24
 8005656:	491b      	ldr	r1, [pc, #108]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 8005658:	4313      	orrs	r3, r2
 800565a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x478>)
 800565e:	2201      	movs	r2, #1
 8005660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005662:	f7ff faa9 	bl	8004bb8 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566a:	f7ff faa5 	bl	8004bb8 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e05c      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567c:	4b11      	ldr	r3, [pc, #68]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x416>
 8005688:	e054      	b.n	8005734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800568a:	4b10      	ldr	r3, [pc, #64]	@ (80056cc <HAL_RCC_OscConfig+0x478>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7ff fa92 	bl	8004bb8 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005698:	f7ff fa8e 	bl	8004bb8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e045      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <HAL_RCC_OscConfig+0x470>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x444>
 80056b6:	e03d      	b.n	8005734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d107      	bne.n	80056d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e038      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40007000 	.word	0x40007000
 80056cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005740 <HAL_RCC_OscConfig+0x4ec>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d028      	beq.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d121      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d11a      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005700:	4013      	ands	r3, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	4293      	cmp	r3, r2
 800570a:	d111      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005716:	085b      	lsrs	r3, r3, #1
 8005718:	3b01      	subs	r3, #1
 800571a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800571c:	429a      	cmp	r2, r3
 800571e:	d107      	bne.n	8005730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800572c:	429a      	cmp	r2, r3
 800572e:	d001      	beq.n	8005734 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800

08005744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0cc      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005758:	4b68      	ldr	r3, [pc, #416]	@ (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d90c      	bls.n	8005780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005766:	4b65      	ldr	r3, [pc, #404]	@ (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576e:	4b63      	ldr	r3, [pc, #396]	@ (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e0b8      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d020      	beq.n	80057ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005798:	4b59      	ldr	r3, [pc, #356]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4a58      	ldr	r2, [pc, #352]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b0:	4b53      	ldr	r3, [pc, #332]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4a52      	ldr	r2, [pc, #328]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057bc:	4b50      	ldr	r3, [pc, #320]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	494d      	ldr	r1, [pc, #308]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d044      	beq.n	8005864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d107      	bne.n	80057f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	4b47      	ldr	r3, [pc, #284]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d119      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e07f      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d003      	beq.n	8005802 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d107      	bne.n	8005812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005802:	4b3f      	ldr	r3, [pc, #252]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d109      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e06f      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005812:	4b3b      	ldr	r3, [pc, #236]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e067      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005822:	4b37      	ldr	r3, [pc, #220]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f023 0203 	bic.w	r2, r3, #3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4934      	ldr	r1, [pc, #208]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	4313      	orrs	r3, r2
 8005832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005834:	f7ff f9c0 	bl	8004bb8 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583a:	e00a      	b.n	8005852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800583c:	f7ff f9bc 	bl	8004bb8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e04f      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005852:	4b2b      	ldr	r3, [pc, #172]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 020c 	and.w	r2, r3, #12
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	429a      	cmp	r2, r3
 8005862:	d1eb      	bne.n	800583c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005864:	4b25      	ldr	r3, [pc, #148]	@ (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d20c      	bcs.n	800588c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005872:	4b22      	ldr	r3, [pc, #136]	@ (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587a:	4b20      	ldr	r3, [pc, #128]	@ (80058fc <HAL_RCC_ClockConfig+0x1b8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d001      	beq.n	800588c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e032      	b.n	80058f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d008      	beq.n	80058aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005898:	4b19      	ldr	r3, [pc, #100]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	4916      	ldr	r1, [pc, #88]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058b6:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	490e      	ldr	r1, [pc, #56]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058ca:	f000 f821 	bl	8005910 <HAL_RCC_GetSysClockFreq>
 80058ce:	4602      	mov	r2, r0
 80058d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005900 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	490a      	ldr	r1, [pc, #40]	@ (8005904 <HAL_RCC_ClockConfig+0x1c0>)
 80058dc:	5ccb      	ldrb	r3, [r1, r3]
 80058de:	fa22 f303 	lsr.w	r3, r2, r3
 80058e2:	4a09      	ldr	r2, [pc, #36]	@ (8005908 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058e6:	4b09      	ldr	r3, [pc, #36]	@ (800590c <HAL_RCC_ClockConfig+0x1c8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff f934 	bl	8004b58 <HAL_InitTick>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40023c00 	.word	0x40023c00
 8005900:	40023800 	.word	0x40023800
 8005904:	08010844 	.word	0x08010844
 8005908:	20000008 	.word	0x20000008
 800590c:	2000000c 	.word	0x2000000c

08005910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005914:	b094      	sub	sp, #80	@ 0x50
 8005916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005928:	4b79      	ldr	r3, [pc, #484]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 030c 	and.w	r3, r3, #12
 8005930:	2b08      	cmp	r3, #8
 8005932:	d00d      	beq.n	8005950 <HAL_RCC_GetSysClockFreq+0x40>
 8005934:	2b08      	cmp	r3, #8
 8005936:	f200 80e1 	bhi.w	8005afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0x34>
 800593e:	2b04      	cmp	r3, #4
 8005940:	d003      	beq.n	800594a <HAL_RCC_GetSysClockFreq+0x3a>
 8005942:	e0db      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005944:	4b73      	ldr	r3, [pc, #460]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005948:	e0db      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800594a:	4b73      	ldr	r3, [pc, #460]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800594c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800594e:	e0d8      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005950:	4b6f      	ldr	r3, [pc, #444]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005958:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800595a:	4b6d      	ldr	r3, [pc, #436]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d063      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005966:	4b6a      	ldr	r3, [pc, #424]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	099b      	lsrs	r3, r3, #6
 800596c:	2200      	movs	r2, #0
 800596e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005978:	633b      	str	r3, [r7, #48]	@ 0x30
 800597a:	2300      	movs	r3, #0
 800597c:	637b      	str	r3, [r7, #52]	@ 0x34
 800597e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005982:	4622      	mov	r2, r4
 8005984:	462b      	mov	r3, r5
 8005986:	f04f 0000 	mov.w	r0, #0
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	0159      	lsls	r1, r3, #5
 8005990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005994:	0150      	lsls	r0, r2, #5
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4621      	mov	r1, r4
 800599c:	1a51      	subs	r1, r2, r1
 800599e:	6139      	str	r1, [r7, #16]
 80059a0:	4629      	mov	r1, r5
 80059a2:	eb63 0301 	sbc.w	r3, r3, r1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059b4:	4659      	mov	r1, fp
 80059b6:	018b      	lsls	r3, r1, #6
 80059b8:	4651      	mov	r1, sl
 80059ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059be:	4651      	mov	r1, sl
 80059c0:	018a      	lsls	r2, r1, #6
 80059c2:	4651      	mov	r1, sl
 80059c4:	ebb2 0801 	subs.w	r8, r2, r1
 80059c8:	4659      	mov	r1, fp
 80059ca:	eb63 0901 	sbc.w	r9, r3, r1
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059e2:	4690      	mov	r8, r2
 80059e4:	4699      	mov	r9, r3
 80059e6:	4623      	mov	r3, r4
 80059e8:	eb18 0303 	adds.w	r3, r8, r3
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	462b      	mov	r3, r5
 80059f0:	eb49 0303 	adc.w	r3, r9, r3
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	f04f 0200 	mov.w	r2, #0
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a02:	4629      	mov	r1, r5
 8005a04:	024b      	lsls	r3, r1, #9
 8005a06:	4621      	mov	r1, r4
 8005a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	024a      	lsls	r2, r1, #9
 8005a10:	4610      	mov	r0, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a16:	2200      	movs	r2, #0
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a20:	f7fb f94a 	bl	8000cb8 <__aeabi_uldivmod>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4613      	mov	r3, r2
 8005a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a2c:	e058      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2e:	4b38      	ldr	r3, [pc, #224]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	099b      	lsrs	r3, r3, #6
 8005a34:	2200      	movs	r2, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	4611      	mov	r1, r2
 8005a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	2300      	movs	r3, #0
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	f04f 0000 	mov.w	r0, #0
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	0159      	lsls	r1, r3, #5
 8005a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a5a:	0150      	lsls	r0, r2, #5
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4641      	mov	r1, r8
 8005a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a66:	4649      	mov	r1, r9
 8005a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a80:	ebb2 040a 	subs.w	r4, r2, sl
 8005a84:	eb63 050b 	sbc.w	r5, r3, fp
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	00eb      	lsls	r3, r5, #3
 8005a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a96:	00e2      	lsls	r2, r4, #3
 8005a98:	4614      	mov	r4, r2
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	18e3      	adds	r3, r4, r3
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	eb45 0303 	adc.w	r3, r5, r3
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	f04f 0200 	mov.w	r2, #0
 8005aae:	f04f 0300 	mov.w	r3, #0
 8005ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	028b      	lsls	r3, r1, #10
 8005aba:	4621      	mov	r1, r4
 8005abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	028a      	lsls	r2, r1, #10
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aca:	2200      	movs	r2, #0
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	61fa      	str	r2, [r7, #28]
 8005ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad4:	f7fb f8f0 	bl	8000cb8 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4613      	mov	r3, r2
 8005ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	3301      	adds	r3, #1
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3750      	adds	r7, #80	@ 0x50
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0e:	bf00      	nop
 8005b10:	40023800 	.word	0x40023800
 8005b14:	00f42400 	.word	0x00f42400
 8005b18:	007a1200 	.word	0x007a1200

08005b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b20:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	20000008 	.word	0x20000008

08005b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b38:	f7ff fff0 	bl	8005b1c <HAL_RCC_GetHCLKFreq>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	0a9b      	lsrs	r3, r3, #10
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	4903      	ldr	r1, [pc, #12]	@ (8005b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b4a:	5ccb      	ldrb	r3, [r1, r3]
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40023800 	.word	0x40023800
 8005b58:	08010854 	.word	0x08010854

08005b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b60:	f7ff ffdc 	bl	8005b1c <HAL_RCC_GetHCLKFreq>
 8005b64:	4602      	mov	r2, r0
 8005b66:	4b05      	ldr	r3, [pc, #20]	@ (8005b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	0b5b      	lsrs	r3, r3, #13
 8005b6c:	f003 0307 	and.w	r3, r3, #7
 8005b70:	4903      	ldr	r1, [pc, #12]	@ (8005b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b72:	5ccb      	ldrb	r3, [r1, r3]
 8005b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	08010854 	.word	0x08010854

08005b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e07b      	b.n	8005c8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d108      	bne.n	8005bb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba6:	d009      	beq.n	8005bbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	61da      	str	r2, [r3, #28]
 8005bae:	e005      	b.n	8005bbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fe fb16 	bl	8004208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c40:	ea42 0103 	orr.w	r1, r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	0c1b      	lsrs	r3, r3, #16
 8005c5a:	f003 0104 	and.w	r1, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	f003 0210 	and.w	r2, r3, #16
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b088      	sub	sp, #32
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	603b      	str	r3, [r7, #0]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca6:	f7fe ff87 	bl	8004bb8 <HAL_GetTick>
 8005caa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d001      	beq.n	8005cc0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e12a      	b.n	8005f16 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Transmit+0x36>
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e122      	b.n	8005f16 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_SPI_Transmit+0x48>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e11b      	b.n	8005f16 <HAL_SPI_Transmit+0x280>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2203      	movs	r2, #3
 8005cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	88fa      	ldrh	r2, [r7, #6]
 8005d04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d2c:	d10f      	bne.n	8005d4e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d58:	2b40      	cmp	r3, #64	@ 0x40
 8005d5a:	d007      	beq.n	8005d6c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d74:	d152      	bne.n	8005e1c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_Transmit+0xee>
 8005d7e:	8b7b      	ldrh	r3, [r7, #26]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d145      	bne.n	8005e10 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005da8:	e032      	b.n	8005e10 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d112      	bne.n	8005dde <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ddc:	e018      	b.n	8005e10 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dde:	f7fe feeb 	bl	8004bb8 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d803      	bhi.n	8005df6 <HAL_SPI_Transmit+0x160>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d102      	bne.n	8005dfc <HAL_SPI_Transmit+0x166>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e082      	b.n	8005f16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1c7      	bne.n	8005daa <HAL_SPI_Transmit+0x114>
 8005e1a:	e053      	b.n	8005ec4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SPI_Transmit+0x194>
 8005e24:	8b7b      	ldrh	r3, [r7, #26]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d147      	bne.n	8005eba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	7812      	ldrb	r2, [r2, #0]
 8005e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e50:	e033      	b.n	8005eba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d113      	bne.n	8005e88 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e86:	e018      	b.n	8005eba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e88:	f7fe fe96 	bl	8004bb8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d803      	bhi.n	8005ea0 <HAL_SPI_Transmit+0x20a>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d102      	bne.n	8005ea6 <HAL_SPI_Transmit+0x210>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e02d      	b.n	8005f16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1c6      	bne.n	8005e52 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fa59 	bl	8006380 <SPI_EndRxTxTransaction>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f14:	2300      	movs	r3, #0
  }
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b08a      	sub	sp, #40	@ 0x28
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
 8005f2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f30:	f7fe fe42 	bl	8004bb8 <HAL_GetTick>
 8005f34:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f3c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d00c      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0x4a>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f54:	d106      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <HAL_SPI_TransmitReceive+0x46>
 8005f5e:	7ffb      	ldrb	r3, [r7, #31]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d001      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
 8005f66:	e17f      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x5c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x5c>
 8005f74:	887b      	ldrh	r3, [r7, #2]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e174      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x6e>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e16d      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b04      	cmp	r3, #4
 8005f9e:	d003      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2205      	movs	r2, #5
 8005fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	887a      	ldrh	r2, [r7, #2]
 8005fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	887a      	ldrh	r2, [r7, #2]
 8005fbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	887a      	ldrh	r2, [r7, #2]
 8005fd0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b40      	cmp	r3, #64	@ 0x40
 8005fea:	d007      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ffa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006004:	d17e      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_SPI_TransmitReceive+0xf6>
 800600e:	8afb      	ldrh	r3, [r7, #22]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d16c      	bne.n	80060ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	1c9a      	adds	r2, r3, #2
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006038:	e059      	b.n	80060ee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b02      	cmp	r3, #2
 8006046:	d11b      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x162>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d016      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x162>
 8006052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006054:	2b01      	cmp	r3, #1
 8006056:	d113      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	881a      	ldrh	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006068:	1c9a      	adds	r2, r3, #2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	d119      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x1a4>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d014      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	b292      	uxth	r2, r2
 80060a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	1c9a      	adds	r2, r3, #2
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060be:	2301      	movs	r3, #1
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060c2:	f7fe fd79 	bl	8004bb8 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d80d      	bhi.n	80060ee <HAL_SPI_TransmitReceive+0x1d0>
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d009      	beq.n	80060ee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0bc      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1a0      	bne.n	800603a <HAL_SPI_TransmitReceive+0x11c>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d19b      	bne.n	800603a <HAL_SPI_TransmitReceive+0x11c>
 8006102:	e082      	b.n	800620a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x1f4>
 800610c:	8afb      	ldrh	r3, [r7, #22]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d171      	bne.n	80061f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006138:	e05d      	b.n	80061f6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b02      	cmp	r3, #2
 8006146:	d11c      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x264>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d017      	beq.n	8006182 <HAL_SPI_TransmitReceive+0x264>
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006154:	2b01      	cmp	r3, #1
 8006156:	d114      	bne.n	8006182 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	7812      	ldrb	r2, [r2, #0]
 8006164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d119      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x2a6>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d014      	beq.n	80061c4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061c0:	2301      	movs	r3, #1
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061c4:	f7fe fcf8 	bl	8004bb8 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d803      	bhi.n	80061dc <HAL_SPI_TransmitReceive+0x2be>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d102      	bne.n	80061e2 <HAL_SPI_TransmitReceive+0x2c4>
 80061dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e038      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d19c      	bne.n	800613a <HAL_SPI_TransmitReceive+0x21c>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d197      	bne.n	800613a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f8b6 	bl	8006380 <SPI_EndRxTxTransaction>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e01d      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e000      	b.n	8006268 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006266:	2300      	movs	r3, #0
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3728      	adds	r7, #40	@ 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	4613      	mov	r3, r2
 800627e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006280:	f7fe fc9a 	bl	8004bb8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	4413      	add	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006290:	f7fe fc92 	bl	8004bb8 <HAL_GetTick>
 8006294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006296:	4b39      	ldr	r3, [pc, #228]	@ (800637c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	015b      	lsls	r3, r3, #5
 800629c:	0d1b      	lsrs	r3, r3, #20
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	fb02 f303 	mul.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062a6:	e054      	b.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d050      	beq.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062b0:	f7fe fc82 	bl	8004bb8 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d902      	bls.n	80062c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d13d      	bne.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062de:	d111      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e8:	d004      	beq.n	80062f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f2:	d107      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800630c:	d10f      	bne.n	800632e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800632c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e017      	b.n	8006372 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3b01      	subs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4013      	ands	r3, r2
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	429a      	cmp	r2, r3
 8006360:	bf0c      	ite	eq
 8006362:	2301      	moveq	r3, #1
 8006364:	2300      	movne	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	429a      	cmp	r2, r3
 800636e:	d19b      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000008 	.word	0x20000008

08006380 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2201      	movs	r2, #1
 8006394:	2102      	movs	r1, #2
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff ff6a 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e032      	b.n	8006418 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006420 <SPI_EndRxTxTransaction+0xa0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006424 <SPI_EndRxTxTransaction+0xa4>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	0d5b      	lsrs	r3, r3, #21
 80063be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063c2:	fb02 f303 	mul.w	r3, r2, r3
 80063c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d0:	d112      	bne.n	80063f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	2180      	movs	r1, #128	@ 0x80
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f7ff ff47 	bl	8006270 <SPI_WaitFlagStateUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d016      	beq.n	8006416 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	f043 0220 	orr.w	r2, r3, #32
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e00f      	b.n	8006418 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	3b01      	subs	r3, #1
 8006402:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640e:	2b80      	cmp	r3, #128	@ 0x80
 8006410:	d0f2      	beq.n	80063f8 <SPI_EndRxTxTransaction+0x78>
 8006412:	e000      	b.n	8006416 <SPI_EndRxTxTransaction+0x96>
        break;
 8006414:	bf00      	nop
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000008 	.word	0x20000008
 8006424:	165e9f81 	.word	0x165e9f81

08006428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e042      	b.n	80064c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fd ff42 	bl	80042d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	@ 0x24
 8006458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800646a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fc85 	bl	8006d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695a      	ldr	r2, [r3, #20]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b0ba      	sub	sp, #232	@ 0xe8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10f      	bne.n	800652e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <HAL_UART_IRQHandler+0x66>
 800651a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb69 	bl	8006bfe <UART_Receive_IT>
      return;
 800652c:	e25b      	b.n	80069e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800652e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 80de 	beq.w	80066f4 <HAL_UART_IRQHandler+0x22c>
 8006538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006548:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80d1 	beq.w	80066f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_UART_IRQHandler+0xae>
 800655e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	f043 0201 	orr.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <HAL_UART_IRQHandler+0xd2>
 8006582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006592:	f043 0202 	orr.w	r2, r3, #2
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_UART_IRQHandler+0xf6>
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b6:	f043 0204 	orr.w	r2, r3, #4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d011      	beq.n	80065ee <HAL_UART_IRQHandler+0x126>
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e6:	f043 0208 	orr.w	r2, r3, #8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 81f2 	beq.w	80069dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_UART_IRQHandler+0x14e>
 8006604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 faf4 	bl	8006bfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006620:	2b40      	cmp	r3, #64	@ 0x40
 8006622:	bf0c      	ite	eq
 8006624:	2301      	moveq	r3, #1
 8006626:	2300      	movne	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006632:	f003 0308 	and.w	r3, r3, #8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d103      	bne.n	8006642 <HAL_UART_IRQHandler+0x17a>
 800663a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d04f      	beq.n	80066e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f9fc 	bl	8006a40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	2b40      	cmp	r3, #64	@ 0x40
 8006654:	d141      	bne.n	80066da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800666c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006674:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006682:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800668e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800669a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1d9      	bne.n	8006656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d013      	beq.n	80066d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ae:	4a7e      	ldr	r2, [pc, #504]	@ (80068a8 <HAL_UART_IRQHandler+0x3e0>)
 80066b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe fc0b 	bl	8004ed2 <HAL_DMA_Abort_IT>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066cc:	4610      	mov	r0, r2
 80066ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	e00e      	b.n	80066f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f99e 	bl	8006a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	e00a      	b.n	80066f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f99a 	bl	8006a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e006      	b.n	80066f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f996 	bl	8006a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80066ee:	e175      	b.n	80069dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	bf00      	nop
    return;
 80066f2:	e173      	b.n	80069dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	f040 814f 	bne.w	800699c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8148 	beq.w	800699c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800670c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8141 	beq.w	800699c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673a:	2b40      	cmp	r3, #64	@ 0x40
 800673c:	f040 80b6 	bne.w	80068ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800674c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8145 	beq.w	80069e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800675e:	429a      	cmp	r2, r3
 8006760:	f080 813e 	bcs.w	80069e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800676a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006776:	f000 8088 	beq.w	800688a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006790:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80067a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1d9      	bne.n	800677a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3314      	adds	r3, #20
 80067cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067d8:	f023 0301 	bic.w	r3, r3, #1
 80067dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3314      	adds	r3, #20
 80067e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e1      	bne.n	80067c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3314      	adds	r3, #20
 8006822:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006826:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006828:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800682c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006834:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e3      	bne.n	8006802 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006858:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800685a:	f023 0310 	bic.w	r3, r3, #16
 800685e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800686c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800686e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006872:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800687a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e3      	bne.n	8006848 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fab4 	bl	8004df2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006898:	b29b      	uxth	r3, r3
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	b29b      	uxth	r3, r3
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8c1 	bl	8006a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068a6:	e09b      	b.n	80069e0 <HAL_UART_IRQHandler+0x518>
 80068a8:	08006b07 	.word	0x08006b07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 808e 	beq.w	80069e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8089 	beq.w	80069e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	330c      	adds	r3, #12
 80068d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80068f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80068f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e3      	bne.n	80068d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	623b      	str	r3, [r7, #32]
   return(result);
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3314      	adds	r3, #20
 800692a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800692e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006930:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800693c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e3      	bne.n	800690a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	330c      	adds	r3, #12
 8006956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0310 	bic.w	r3, r3, #16
 8006966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006974:	61fa      	str	r2, [r7, #28]
 8006976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	617b      	str	r3, [r7, #20]
   return(result);
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e3      	bne.n	8006950 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800698e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f847 	bl	8006a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800699a:	e023      	b.n	80069e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <HAL_UART_IRQHandler+0x4f4>
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f8ba 	bl	8006b2e <UART_Transmit_IT>
    return;
 80069ba:	e014      	b.n	80069e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <HAL_UART_IRQHandler+0x51e>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8fa 	bl	8006bce <UART_EndTransmit_IT>
    return;
 80069da:	e004      	b.n	80069e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069e4:	bf00      	nop
  }
}
 80069e6:	37e8      	adds	r7, #232	@ 0xe8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	460b      	mov	r3, r1
 8006a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b095      	sub	sp, #84	@ 0x54
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a68:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e5      	bne.n	8006a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3314      	adds	r3, #20
 8006a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e5      	bne.n	8006a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d119      	bne.n	8006aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	e853 3f00 	ldrex	r3, [r3]
 8006ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f023 0310 	bic.w	r3, r3, #16
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ad8:	61ba      	str	r2, [r7, #24]
 8006ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	6979      	ldr	r1, [r7, #20]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	e841 2300 	strex	r3, r2, [r1]
 8006ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1e5      	bne.n	8006ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006afa:	bf00      	nop
 8006afc:	3754      	adds	r7, #84	@ 0x54
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f7ff ff77 	bl	8006a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b085      	sub	sp, #20
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b21      	cmp	r3, #33	@ 0x21
 8006b40:	d13e      	bne.n	8006bc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b4a:	d114      	bne.n	8006b76 <UART_Transmit_IT+0x48>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d110      	bne.n	8006b76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	1c9a      	adds	r2, r3, #2
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	621a      	str	r2, [r3, #32]
 8006b74:	e008      	b.n	8006b88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	1c59      	adds	r1, r3, #1
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6211      	str	r1, [r2, #32]
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	4619      	mov	r1, r3
 8006b96:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10f      	bne.n	8006bbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006baa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e000      	b.n	8006bc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bc0:	2302      	movs	r3, #2
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006be4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff fefc 	bl	80069ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b08c      	sub	sp, #48	@ 0x30
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b22      	cmp	r3, #34	@ 0x22
 8006c10:	f040 80ae 	bne.w	8006d70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c1c:	d117      	bne.n	8006c4e <UART_Receive_IT+0x50>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d113      	bne.n	8006c4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c46:	1c9a      	adds	r2, r3, #2
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c4c:	e026      	b.n	8006c9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c60:	d007      	beq.n	8006c72 <UART_Receive_IT+0x74>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10a      	bne.n	8006c80 <UART_Receive_IT+0x82>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	e008      	b.n	8006c92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d15d      	bne.n	8006d6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0220 	bic.w	r2, r2, #32
 8006cbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695a      	ldr	r2, [r3, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0201 	bic.w	r2, r2, #1
 8006cde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d135      	bne.n	8006d62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	330c      	adds	r3, #12
 8006d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 0310 	bic.w	r3, r3, #16
 8006d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d1c:	623a      	str	r2, [r7, #32]
 8006d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d10a      	bne.n	8006d54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fe64 	bl	8006a28 <HAL_UARTEx_RxEventCallback>
 8006d60:	e002      	b.n	8006d68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff fe4c 	bl	8006a00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e002      	b.n	8006d72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e000      	b.n	8006d72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3730      	adds	r7, #48	@ 0x30
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d80:	b0c0      	sub	sp, #256	@ 0x100
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	68d9      	ldr	r1, [r3, #12]
 8006d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	ea40 0301 	orr.w	r3, r0, r1
 8006da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006dd4:	f021 010c 	bic.w	r1, r1, #12
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006de2:	430b      	orrs	r3, r1
 8006de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df6:	6999      	ldr	r1, [r3, #24]
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	ea40 0301 	orr.w	r3, r0, r1
 8006e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8007048 <UART_SetConfig+0x2cc>)
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d005      	beq.n	8006e1c <UART_SetConfig+0xa0>
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b8d      	ldr	r3, [pc, #564]	@ (800704c <UART_SetConfig+0x2d0>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d104      	bne.n	8006e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e1c:	f7fe fe9e 	bl	8005b5c <HAL_RCC_GetPCLK2Freq>
 8006e20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e24:	e003      	b.n	8006e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e26:	f7fe fe85 	bl	8005b34 <HAL_RCC_GetPCLK1Freq>
 8006e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e38:	f040 810c 	bne.w	8007054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e56:	415b      	adcs	r3, r3
 8006e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e5e:	4621      	mov	r1, r4
 8006e60:	eb12 0801 	adds.w	r8, r2, r1
 8006e64:	4629      	mov	r1, r5
 8006e66:	eb43 0901 	adc.w	r9, r3, r1
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e7e:	4690      	mov	r8, r2
 8006e80:	4699      	mov	r9, r3
 8006e82:	4623      	mov	r3, r4
 8006e84:	eb18 0303 	adds.w	r3, r8, r3
 8006e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	eb49 0303 	adc.w	r3, r9, r3
 8006e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eaa:	460b      	mov	r3, r1
 8006eac:	18db      	adds	r3, r3, r3
 8006eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	eb42 0303 	adc.w	r3, r2, r3
 8006eb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ec0:	f7f9 fefa 	bl	8000cb8 <__aeabi_uldivmod>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	4b61      	ldr	r3, [pc, #388]	@ (8007050 <UART_SetConfig+0x2d4>)
 8006eca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	011c      	lsls	r4, r3, #4
 8006ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006edc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	1891      	adds	r1, r2, r2
 8006eea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006eec:	415b      	adcs	r3, r3
 8006eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8006efa:	4649      	mov	r1, r9
 8006efc:	eb43 0b01 	adc.w	fp, r3, r1
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f14:	4692      	mov	sl, r2
 8006f16:	469b      	mov	fp, r3
 8006f18:	4643      	mov	r3, r8
 8006f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8006f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f22:	464b      	mov	r3, r9
 8006f24:	eb4b 0303 	adc.w	r3, fp, r3
 8006f28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f40:	460b      	mov	r3, r1
 8006f42:	18db      	adds	r3, r3, r3
 8006f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f46:	4613      	mov	r3, r2
 8006f48:	eb42 0303 	adc.w	r3, r2, r3
 8006f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f56:	f7f9 feaf 	bl	8000cb8 <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4611      	mov	r1, r2
 8006f60:	4b3b      	ldr	r3, [pc, #236]	@ (8007050 <UART_SetConfig+0x2d4>)
 8006f62:	fba3 2301 	umull	r2, r3, r3, r1
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	2264      	movs	r2, #100	@ 0x64
 8006f6a:	fb02 f303 	mul.w	r3, r2, r3
 8006f6e:	1acb      	subs	r3, r1, r3
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f76:	4b36      	ldr	r3, [pc, #216]	@ (8007050 <UART_SetConfig+0x2d4>)
 8006f78:	fba3 2302 	umull	r2, r3, r3, r2
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f84:	441c      	add	r4, r3
 8006f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	1891      	adds	r1, r2, r2
 8006f9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fa0:	415b      	adcs	r3, r3
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fa8:	4641      	mov	r1, r8
 8006faa:	1851      	adds	r1, r2, r1
 8006fac:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fae:	4649      	mov	r1, r9
 8006fb0:	414b      	adcs	r3, r1
 8006fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	f04f 0300 	mov.w	r3, #0
 8006fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fc0:	4659      	mov	r1, fp
 8006fc2:	00cb      	lsls	r3, r1, #3
 8006fc4:	4651      	mov	r1, sl
 8006fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fca:	4651      	mov	r1, sl
 8006fcc:	00ca      	lsls	r2, r1, #3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	189b      	adds	r3, r3, r2
 8006fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fdc:	464b      	mov	r3, r9
 8006fde:	460a      	mov	r2, r1
 8006fe0:	eb42 0303 	adc.w	r3, r2, r3
 8006fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	18db      	adds	r3, r3, r3
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007002:	4613      	mov	r3, r2
 8007004:	eb42 0303 	adc.w	r3, r2, r3
 8007008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800700e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007012:	f7f9 fe51 	bl	8000cb8 <__aeabi_uldivmod>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	4b0d      	ldr	r3, [pc, #52]	@ (8007050 <UART_SetConfig+0x2d4>)
 800701c:	fba3 1302 	umull	r1, r3, r3, r2
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	2164      	movs	r1, #100	@ 0x64
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	3332      	adds	r3, #50	@ 0x32
 800702e:	4a08      	ldr	r2, [pc, #32]	@ (8007050 <UART_SetConfig+0x2d4>)
 8007030:	fba2 2303 	umull	r2, r3, r2, r3
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	f003 0207 	and.w	r2, r3, #7
 800703a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4422      	add	r2, r4
 8007042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007044:	e106      	b.n	8007254 <UART_SetConfig+0x4d8>
 8007046:	bf00      	nop
 8007048:	40011000 	.word	0x40011000
 800704c:	40011400 	.word	0x40011400
 8007050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007058:	2200      	movs	r2, #0
 800705a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800705e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	1891      	adds	r1, r2, r2
 800706c:	6239      	str	r1, [r7, #32]
 800706e:	415b      	adcs	r3, r3
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
 8007072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007076:	4641      	mov	r1, r8
 8007078:	1854      	adds	r4, r2, r1
 800707a:	4649      	mov	r1, r9
 800707c:	eb43 0501 	adc.w	r5, r3, r1
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	00eb      	lsls	r3, r5, #3
 800708a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800708e:	00e2      	lsls	r2, r4, #3
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	4643      	mov	r3, r8
 8007096:	18e3      	adds	r3, r4, r3
 8007098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800709c:	464b      	mov	r3, r9
 800709e:	eb45 0303 	adc.w	r3, r5, r3
 80070a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070c2:	4629      	mov	r1, r5
 80070c4:	008b      	lsls	r3, r1, #2
 80070c6:	4621      	mov	r1, r4
 80070c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070cc:	4621      	mov	r1, r4
 80070ce:	008a      	lsls	r2, r1, #2
 80070d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070d4:	f7f9 fdf0 	bl	8000cb8 <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4b60      	ldr	r3, [pc, #384]	@ (8007260 <UART_SetConfig+0x4e4>)
 80070de:	fba3 2302 	umull	r2, r3, r3, r2
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	011c      	lsls	r4, r3, #4
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	1891      	adds	r1, r2, r2
 80070fe:	61b9      	str	r1, [r7, #24]
 8007100:	415b      	adcs	r3, r3
 8007102:	61fb      	str	r3, [r7, #28]
 8007104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007108:	4641      	mov	r1, r8
 800710a:	1851      	adds	r1, r2, r1
 800710c:	6139      	str	r1, [r7, #16]
 800710e:	4649      	mov	r1, r9
 8007110:	414b      	adcs	r3, r1
 8007112:	617b      	str	r3, [r7, #20]
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007120:	4659      	mov	r1, fp
 8007122:	00cb      	lsls	r3, r1, #3
 8007124:	4651      	mov	r1, sl
 8007126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712a:	4651      	mov	r1, sl
 800712c:	00ca      	lsls	r2, r1, #3
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	4603      	mov	r3, r0
 8007134:	4642      	mov	r2, r8
 8007136:	189b      	adds	r3, r3, r2
 8007138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800713c:	464b      	mov	r3, r9
 800713e:	460a      	mov	r2, r1
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007152:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007154:	f04f 0200 	mov.w	r2, #0
 8007158:	f04f 0300 	mov.w	r3, #0
 800715c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007160:	4649      	mov	r1, r9
 8007162:	008b      	lsls	r3, r1, #2
 8007164:	4641      	mov	r1, r8
 8007166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800716a:	4641      	mov	r1, r8
 800716c:	008a      	lsls	r2, r1, #2
 800716e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007172:	f7f9 fda1 	bl	8000cb8 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4611      	mov	r1, r2
 800717c:	4b38      	ldr	r3, [pc, #224]	@ (8007260 <UART_SetConfig+0x4e4>)
 800717e:	fba3 2301 	umull	r2, r3, r3, r1
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	2264      	movs	r2, #100	@ 0x64
 8007186:	fb02 f303 	mul.w	r3, r2, r3
 800718a:	1acb      	subs	r3, r1, r3
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	3332      	adds	r3, #50	@ 0x32
 8007190:	4a33      	ldr	r2, [pc, #204]	@ (8007260 <UART_SetConfig+0x4e4>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800719c:	441c      	add	r4, r3
 800719e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a2:	2200      	movs	r2, #0
 80071a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80071a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80071a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071ac:	4642      	mov	r2, r8
 80071ae:	464b      	mov	r3, r9
 80071b0:	1891      	adds	r1, r2, r2
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	415b      	adcs	r3, r3
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071bc:	4641      	mov	r1, r8
 80071be:	1851      	adds	r1, r2, r1
 80071c0:	6039      	str	r1, [r7, #0]
 80071c2:	4649      	mov	r1, r9
 80071c4:	414b      	adcs	r3, r1
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	f04f 0300 	mov.w	r3, #0
 80071d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071d4:	4659      	mov	r1, fp
 80071d6:	00cb      	lsls	r3, r1, #3
 80071d8:	4651      	mov	r1, sl
 80071da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071de:	4651      	mov	r1, sl
 80071e0:	00ca      	lsls	r2, r1, #3
 80071e2:	4610      	mov	r0, r2
 80071e4:	4619      	mov	r1, r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	4642      	mov	r2, r8
 80071ea:	189b      	adds	r3, r3, r2
 80071ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071ee:	464b      	mov	r3, r9
 80071f0:	460a      	mov	r2, r1
 80071f2:	eb42 0303 	adc.w	r3, r2, r3
 80071f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	663b      	str	r3, [r7, #96]	@ 0x60
 8007202:	667a      	str	r2, [r7, #100]	@ 0x64
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007210:	4649      	mov	r1, r9
 8007212:	008b      	lsls	r3, r1, #2
 8007214:	4641      	mov	r1, r8
 8007216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800721a:	4641      	mov	r1, r8
 800721c:	008a      	lsls	r2, r1, #2
 800721e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007222:	f7f9 fd49 	bl	8000cb8 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4b0d      	ldr	r3, [pc, #52]	@ (8007260 <UART_SetConfig+0x4e4>)
 800722c:	fba3 1302 	umull	r1, r3, r3, r2
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	2164      	movs	r1, #100	@ 0x64
 8007234:	fb01 f303 	mul.w	r3, r1, r3
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	3332      	adds	r3, #50	@ 0x32
 800723e:	4a08      	ldr	r2, [pc, #32]	@ (8007260 <UART_SetConfig+0x4e4>)
 8007240:	fba2 2303 	umull	r2, r3, r2, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	f003 020f 	and.w	r2, r3, #15
 800724a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4422      	add	r2, r4
 8007252:	609a      	str	r2, [r3, #8]
}
 8007254:	bf00      	nop
 8007256:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800725a:	46bd      	mov	sp, r7
 800725c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007260:	51eb851f 	.word	0x51eb851f

08007264 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007268:	4904      	ldr	r1, [pc, #16]	@ (800727c <MX_FATFS_Init+0x18>)
 800726a:	4805      	ldr	r0, [pc, #20]	@ (8007280 <MX_FATFS_Init+0x1c>)
 800726c:	f002 ff74 	bl	800a158 <FATFS_LinkDriver>
 8007270:	4603      	mov	r3, r0
 8007272:	461a      	mov	r2, r3
 8007274:	4b03      	ldr	r3, [pc, #12]	@ (8007284 <MX_FATFS_Init+0x20>)
 8007276:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007278:	bf00      	nop
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000b10 	.word	0x20000b10
 8007280:	20000014 	.word	0x20000014
 8007284:	20000b0c 	.word	0x20000b0c

08007288 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800728c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800728e:	4618      	mov	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv); // Changes made here by Abhirath Koushik
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fb f80f 	bl	80022c8 <SD_disk_initialize>
 80072aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv); // Changes made here by Abhirath Koushik
 80072be:	79fb      	ldrb	r3, [r7, #7]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fb f8e7 	bl	8002494 <SD_disk_status>
 80072c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4603      	mov	r3, r0
 80072de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count); // Changes made here by Abhirath Koushik
 80072e0:	7bf8      	ldrb	r0, [r7, #15]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	f7fb f8ea 	bl	80024c0 <SD_disk_read>
 80072ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
 8007302:	4603      	mov	r3, r0
 8007304:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count); // Changes made here by Abhirath Koushik
 8007306:	7bf8      	ldrb	r0, [r7, #15]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	f7fb f941 	bl	8002594 <SD_disk_write>
 8007312:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	603a      	str	r2, [r7, #0]
 8007326:	71fb      	strb	r3, [r7, #7]
 8007328:	460b      	mov	r3, r1
 800732a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff); // Changes made here by Abhirath Koushik
 800732c:	79b9      	ldrb	r1, [r7, #6]
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fb f9b2 	bl	800269c <SD_disk_ioctl>
 8007338:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	4a08      	ldr	r2, [pc, #32]	@ (8007374 <disk_status+0x30>)
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	79fa      	ldrb	r2, [r7, #7]
 800735c:	4905      	ldr	r1, [pc, #20]	@ (8007374 <disk_status+0x30>)
 800735e:	440a      	add	r2, r1
 8007360:	7a12      	ldrb	r2, [r2, #8]
 8007362:	4610      	mov	r0, r2
 8007364:	4798      	blx	r3
 8007366:	4603      	mov	r3, r0
 8007368:	73fb      	strb	r3, [r7, #15]
  return stat;
 800736a:	7bfb      	ldrb	r3, [r7, #15]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000d3c 	.word	0x20000d3c

08007378 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007386:	79fb      	ldrb	r3, [r7, #7]
 8007388:	4a0e      	ldr	r2, [pc, #56]	@ (80073c4 <disk_initialize+0x4c>)
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d114      	bne.n	80073ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	4a0c      	ldr	r2, [pc, #48]	@ (80073c4 <disk_initialize+0x4c>)
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	79fa      	ldrb	r2, [r7, #7]
 800739e:	4909      	ldr	r1, [pc, #36]	@ (80073c4 <disk_initialize+0x4c>)
 80073a0:	440a      	add	r2, r1
 80073a2:	7a12      	ldrb	r2, [r2, #8]
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	4a03      	ldr	r2, [pc, #12]	@ (80073c4 <disk_initialize+0x4c>)
 80073b6:	2101      	movs	r1, #1
 80073b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	20000d3c 	.word	0x20000d3c

080073c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	4a0a      	ldr	r2, [pc, #40]	@ (8007404 <disk_read+0x3c>)
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	689c      	ldr	r4, [r3, #8]
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4a07      	ldr	r2, [pc, #28]	@ (8007404 <disk_read+0x3c>)
 80073e8:	4413      	add	r3, r2
 80073ea:	7a18      	ldrb	r0, [r3, #8]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	47a0      	blx	r4
 80073f4:	4603      	mov	r3, r0
 80073f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80073f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd90      	pop	{r4, r7, pc}
 8007402:	bf00      	nop
 8007404:	20000d3c 	.word	0x20000d3c

08007408 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007408:	b590      	push	{r4, r7, lr}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	4a0a      	ldr	r2, [pc, #40]	@ (8007444 <disk_write+0x3c>)
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	68dc      	ldr	r4, [r3, #12]
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	4a07      	ldr	r2, [pc, #28]	@ (8007444 <disk_write+0x3c>)
 8007428:	4413      	add	r3, r2
 800742a:	7a18      	ldrb	r0, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	47a0      	blx	r4
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]
  return res;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
}
 800743a:	4618      	mov	r0, r3
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	bd90      	pop	{r4, r7, pc}
 8007442:	bf00      	nop
 8007444:	20000d3c 	.word	0x20000d3c

08007448 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	603a      	str	r2, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	460b      	mov	r3, r1
 8007456:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	4a09      	ldr	r2, [pc, #36]	@ (8007480 <disk_ioctl+0x38>)
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	4906      	ldr	r1, [pc, #24]	@ (8007480 <disk_ioctl+0x38>)
 8007468:	440a      	add	r2, r1
 800746a:	7a10      	ldrb	r0, [r2, #8]
 800746c:	79b9      	ldrb	r1, [r7, #6]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	4798      	blx	r3
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]
  return res;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000d3c 	.word	0x20000d3c

08007484 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3301      	adds	r3, #1
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007494:	89fb      	ldrh	r3, [r7, #14]
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b21a      	sxth	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b21b      	sxth	r3, r3
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074a6:	89fb      	ldrh	r3, [r7, #14]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3303      	adds	r3, #3
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	3202      	adds	r2, #2
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	3201      	adds	r2, #1
 80074da:	7812      	ldrb	r2, [r2, #0]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	460b      	mov	r3, r1
 8007504:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	b2d2      	uxtb	r2, r2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	887b      	ldrh	r3, [r7, #2]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	607a      	str	r2, [r7, #4]
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	b2d2      	uxtb	r2, r2
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	1c53      	adds	r3, r2, #1
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1c59      	adds	r1, r3, #1
 80075ac:	6179      	str	r1, [r7, #20]
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3b01      	subs	r3, #1
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f1      	bne.n	80075a2 <mem_cpy+0x1a>
	}
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	617a      	str	r2, [r7, #20]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1f3      	bne.n	80075da <mem_set+0x10>
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007600:	b480      	push	{r7}
 8007602:	b089      	sub	sp, #36	@ 0x24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	61fa      	str	r2, [r7, #28]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	61ba      	str	r2, [r7, #24]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	1acb      	subs	r3, r1, r3
 800762c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	3b01      	subs	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <mem_cmp+0x40>
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0eb      	beq.n	8007618 <mem_cmp+0x18>

	return r;
 8007640:	697b      	ldr	r3, [r7, #20]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3724      	adds	r7, #36	@ 0x24
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007658:	e002      	b.n	8007660 <chk_chr+0x12>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3301      	adds	r3, #1
 800765e:	607b      	str	r3, [r7, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <chk_chr+0x26>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	4293      	cmp	r3, r2
 8007672:	d1f2      	bne.n	800765a <chk_chr+0xc>
	return *str;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	781b      	ldrb	r3, [r3, #0]
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e029      	b.n	80076ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007698:	4a27      	ldr	r2, [pc, #156]	@ (8007738 <chk_lock+0xb4>)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	4413      	add	r3, r2
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01d      	beq.n	80076e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076a6:	4a24      	ldr	r2, [pc, #144]	@ (8007738 <chk_lock+0xb4>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	4413      	add	r3, r2
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d116      	bne.n	80076e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007738 <chk_lock+0xb4>)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4413      	add	r3, r2
 80076c0:	3304      	adds	r3, #4
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d10c      	bne.n	80076e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007738 <chk_lock+0xb4>)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	4413      	add	r3, r2
 80076d4:	3308      	adds	r3, #8
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076dc:	429a      	cmp	r2, r3
 80076de:	d102      	bne.n	80076e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076e0:	e007      	b.n	80076f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80076e2:	2301      	movs	r3, #1
 80076e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d9d2      	bls.n	8007698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d109      	bne.n	800770c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d102      	bne.n	8007704 <chk_lock+0x80>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d101      	bne.n	8007708 <chk_lock+0x84>
 8007704:	2300      	movs	r3, #0
 8007706:	e010      	b.n	800772a <chk_lock+0xa6>
 8007708:	2312      	movs	r3, #18
 800770a:	e00e      	b.n	800772a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d108      	bne.n	8007724 <chk_lock+0xa0>
 8007712:	4a09      	ldr	r2, [pc, #36]	@ (8007738 <chk_lock+0xb4>)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	011b      	lsls	r3, r3, #4
 8007718:	4413      	add	r3, r2
 800771a:	330c      	adds	r3, #12
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007722:	d101      	bne.n	8007728 <chk_lock+0xa4>
 8007724:	2310      	movs	r3, #16
 8007726:	e000      	b.n	800772a <chk_lock+0xa6>
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20000b1c 	.word	0x20000b1c

0800773c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e002      	b.n	800774e <enq_lock+0x12>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3301      	adds	r3, #1
 800774c:	607b      	str	r3, [r7, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d806      	bhi.n	8007762 <enq_lock+0x26>
 8007754:	4a09      	ldr	r2, [pc, #36]	@ (800777c <enq_lock+0x40>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	4413      	add	r3, r2
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f2      	bne.n	8007748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b02      	cmp	r3, #2
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
}
 800776e:	4618      	mov	r0, r3
 8007770:	370c      	adds	r7, #12
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000b1c 	.word	0x20000b1c

08007780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e01f      	b.n	80077d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007790:	4a41      	ldr	r2, [pc, #260]	@ (8007898 <inc_lock+0x118>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	011b      	lsls	r3, r3, #4
 8007796:	4413      	add	r3, r2
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d113      	bne.n	80077ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007898 <inc_lock+0x118>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	4413      	add	r3, r2
 80077aa:	3304      	adds	r3, #4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d109      	bne.n	80077ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077b6:	4a38      	ldr	r2, [pc, #224]	@ (8007898 <inc_lock+0x118>)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	011b      	lsls	r3, r3, #4
 80077bc:	4413      	add	r3, r2
 80077be:	3308      	adds	r3, #8
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d006      	beq.n	80077d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d9dc      	bls.n	8007790 <inc_lock+0x10>
 80077d6:	e000      	b.n	80077da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d132      	bne.n	8007846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e002      	b.n	80077ec <inc_lock+0x6c>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3301      	adds	r3, #1
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d806      	bhi.n	8007800 <inc_lock+0x80>
 80077f2:	4a29      	ldr	r2, [pc, #164]	@ (8007898 <inc_lock+0x118>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	4413      	add	r3, r2
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1f2      	bne.n	80077e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d101      	bne.n	800780a <inc_lock+0x8a>
 8007806:	2300      	movs	r3, #0
 8007808:	e040      	b.n	800788c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4922      	ldr	r1, [pc, #136]	@ (8007898 <inc_lock+0x118>)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	440b      	add	r3, r1
 8007816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	491e      	ldr	r1, [pc, #120]	@ (8007898 <inc_lock+0x118>)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	440b      	add	r3, r1
 8007824:	3304      	adds	r3, #4
 8007826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	491a      	ldr	r1, [pc, #104]	@ (8007898 <inc_lock+0x118>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	440b      	add	r3, r1
 8007834:	3308      	adds	r3, #8
 8007836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007838:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <inc_lock+0x118>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	4413      	add	r3, r2
 8007840:	330c      	adds	r3, #12
 8007842:	2200      	movs	r2, #0
 8007844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <inc_lock+0xe0>
 800784c:	4a12      	ldr	r2, [pc, #72]	@ (8007898 <inc_lock+0x118>)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	011b      	lsls	r3, r3, #4
 8007852:	4413      	add	r3, r2
 8007854:	330c      	adds	r3, #12
 8007856:	881b      	ldrh	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <inc_lock+0xe0>
 800785c:	2300      	movs	r3, #0
 800785e:	e015      	b.n	800788c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d108      	bne.n	8007878 <inc_lock+0xf8>
 8007866:	4a0c      	ldr	r2, [pc, #48]	@ (8007898 <inc_lock+0x118>)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	011b      	lsls	r3, r3, #4
 800786c:	4413      	add	r3, r2
 800786e:	330c      	adds	r3, #12
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	3301      	adds	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	e001      	b.n	800787c <inc_lock+0xfc>
 8007878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800787c:	4906      	ldr	r1, [pc, #24]	@ (8007898 <inc_lock+0x118>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	440b      	add	r3, r1
 8007884:	330c      	adds	r3, #12
 8007886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3301      	adds	r3, #1
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	20000b1c 	.word	0x20000b1c

0800789c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d825      	bhi.n	80078fc <dec_lock+0x60>
		n = Files[i].ctr;
 80078b0:	4a17      	ldr	r2, [pc, #92]	@ (8007910 <dec_lock+0x74>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	4413      	add	r3, r2
 80078b8:	330c      	adds	r3, #12
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078be:	89fb      	ldrh	r3, [r7, #14]
 80078c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078c4:	d101      	bne.n	80078ca <dec_lock+0x2e>
 80078c6:	2300      	movs	r3, #0
 80078c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80078ca:	89fb      	ldrh	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <dec_lock+0x3a>
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80078d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007910 <dec_lock+0x74>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	4413      	add	r3, r2
 80078de:	330c      	adds	r3, #12
 80078e0:	89fa      	ldrh	r2, [r7, #14]
 80078e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80078e4:	89fb      	ldrh	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d105      	bne.n	80078f6 <dec_lock+0x5a>
 80078ea:	4a09      	ldr	r2, [pc, #36]	@ (8007910 <dec_lock+0x74>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	4413      	add	r3, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	737b      	strb	r3, [r7, #13]
 80078fa:	e001      	b.n	8007900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80078fc:	2302      	movs	r3, #2
 80078fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007900:	7b7b      	ldrb	r3, [r7, #13]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000b1c 	.word	0x20000b1c

08007914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e010      	b.n	8007944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007922:	4a0d      	ldr	r2, [pc, #52]	@ (8007958 <clear_lock+0x44>)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	4413      	add	r3, r2
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	429a      	cmp	r2, r3
 8007930:	d105      	bne.n	800793e <clear_lock+0x2a>
 8007932:	4a09      	ldr	r2, [pc, #36]	@ (8007958 <clear_lock+0x44>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4413      	add	r3, r2
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d9eb      	bls.n	8007922 <clear_lock+0xe>
	}
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	20000b1c 	.word	0x20000b1c

0800795c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	78db      	ldrb	r3, [r3, #3]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d034      	beq.n	80079da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7858      	ldrb	r0, [r3, #1]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007980:	2301      	movs	r3, #1
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	f7ff fd40 	bl	8007408 <disk_write>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <sync_window+0x38>
			res = FR_DISK_ERR;
 800798e:	2301      	movs	r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
 8007992:	e022      	b.n	80079da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	1ad2      	subs	r2, r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d217      	bcs.n	80079da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	789b      	ldrb	r3, [r3, #2]
 80079ae:	613b      	str	r3, [r7, #16]
 80079b0:	e010      	b.n	80079d4 <sync_window+0x78>
					wsect += fs->fsize;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7858      	ldrb	r0, [r3, #1]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80079c6:	2301      	movs	r3, #1
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	f7ff fd1d 	bl	8007408 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d8eb      	bhi.n	80079b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3718      	adds	r7, #24
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d01b      	beq.n	8007a34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ffad 	bl	800795c <sync_window>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d113      	bne.n	8007a34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7858      	ldrb	r0, [r3, #1]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a16:	2301      	movs	r3, #1
 8007a18:	683a      	ldr	r2, [r7, #0]
 8007a1a:	f7ff fcd5 	bl	80073c8 <disk_read>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a24:	f04f 33ff 	mov.w	r3, #4294967295
 8007a28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff87 	bl	800795c <sync_window>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d159      	bne.n	8007b0c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d149      	bne.n	8007af4 <sync_fs+0xb4>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	791b      	ldrb	r3, [r3, #4]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d145      	bne.n	8007af4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	899b      	ldrh	r3, [r3, #12]
 8007a72:	461a      	mov	r2, r3
 8007a74:	2100      	movs	r1, #0
 8007a76:	f7ff fda8 	bl	80075ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3338      	adds	r3, #56	@ 0x38
 8007a7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a82:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fd37 	bl	80074fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3338      	adds	r3, #56	@ 0x38
 8007a90:	4921      	ldr	r1, [pc, #132]	@ (8007b18 <sync_fs+0xd8>)
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7ff fd4c 	bl	8007530 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3338      	adds	r3, #56	@ 0x38
 8007a9c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007aa0:	491e      	ldr	r1, [pc, #120]	@ (8007b1c <sync_fs+0xdc>)
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7ff fd44 	bl	8007530 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3338      	adds	r3, #56	@ 0x38
 8007aac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f7ff fd3a 	bl	8007530 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3338      	adds	r3, #56	@ 0x38
 8007ac0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	4610      	mov	r0, r2
 8007acc:	f7ff fd30 	bl	8007530 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	7858      	ldrb	r0, [r3, #1]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f7ff fc8d 	bl	8007408 <disk_write>
			fs->fsi_flag = 0;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff fca3 	bl	8007448 <disk_ioctl>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <sync_fs+0xcc>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	41615252 	.word	0x41615252
 8007b1c:	61417272 	.word	0x61417272

08007b20 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	3b02      	subs	r3, #2
 8007b2e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	3b02      	subs	r3, #2
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d301      	bcc.n	8007b40 <clust2sect+0x20>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e008      	b.n	8007b52 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	895b      	ldrh	r3, [r3, #10]
 8007b44:	461a      	mov	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	fb03 f202 	mul.w	r2, r3, r2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b50:	4413      	add	r3, r2
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d904      	bls.n	8007b7e <get_fat+0x20>
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d302      	bcc.n	8007b84 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e0ba      	b.n	8007cfa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b84:	f04f 33ff 	mov.w	r3, #4294967295
 8007b88:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	f000 8082 	beq.w	8007c98 <get_fat+0x13a>
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	f300 80a6 	bgt.w	8007ce6 <get_fat+0x188>
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d002      	beq.n	8007ba4 <get_fat+0x46>
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d055      	beq.n	8007c4e <get_fat+0xf0>
 8007ba2:	e0a0      	b.n	8007ce6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	085b      	lsrs	r3, r3, #1
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4413      	add	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	899b      	ldrh	r3, [r3, #12]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bc2:	4413      	add	r3, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f7ff ff0c 	bl	80079e4 <move_window>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f040 808c 	bne.w	8007cec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	60fa      	str	r2, [r7, #12]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	8992      	ldrh	r2, [r2, #12]
 8007bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8007be2:	fb01 f202 	mul.w	r2, r1, r2
 8007be6:	1a9b      	subs	r3, r3, r2
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4413      	add	r3, r2
 8007bec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	899b      	ldrh	r3, [r3, #12]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c02:	4413      	add	r3, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	6938      	ldr	r0, [r7, #16]
 8007c08:	f7ff feec 	bl	80079e4 <move_window>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d16e      	bne.n	8007cf0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	899b      	ldrh	r3, [r3, #12]
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c1e:	fb01 f202 	mul.w	r2, r1, r2
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <get_fat+0xe6>
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	091b      	lsrs	r3, r3, #4
 8007c42:	e002      	b.n	8007c4a <get_fat+0xec>
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c4a:	617b      	str	r3, [r7, #20]
			break;
 8007c4c:	e055      	b.n	8007cfa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	899b      	ldrh	r3, [r3, #12]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c62:	4413      	add	r3, r2
 8007c64:	4619      	mov	r1, r3
 8007c66:	6938      	ldr	r0, [r7, #16]
 8007c68:	f7ff febc 	bl	80079e4 <move_window>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d140      	bne.n	8007cf4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	8992      	ldrh	r2, [r2, #12]
 8007c80:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c84:	fb00 f202 	mul.w	r2, r0, r2
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fbf9 	bl	8007484 <ld_word>
 8007c92:	4603      	mov	r3, r0
 8007c94:	617b      	str	r3, [r7, #20]
			break;
 8007c96:	e030      	b.n	8007cfa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	899b      	ldrh	r3, [r3, #12]
 8007ca0:	089b      	lsrs	r3, r3, #2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cac:	4413      	add	r3, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6938      	ldr	r0, [r7, #16]
 8007cb2:	f7ff fe97 	bl	80079e4 <move_window>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11d      	bne.n	8007cf8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	8992      	ldrh	r2, [r2, #12]
 8007cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cce:	fb00 f202 	mul.w	r2, r0, r2
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff fbec 	bl	80074b4 <ld_dword>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007ce2:	617b      	str	r3, [r7, #20]
			break;
 8007ce4:	e009      	b.n	8007cfa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	e006      	b.n	8007cfa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cec:	bf00      	nop
 8007cee:	e004      	b.n	8007cfa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cf0:	bf00      	nop
 8007cf2:	e002      	b.n	8007cfa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cf4:	bf00      	nop
 8007cf6:	e000      	b.n	8007cfa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cf8:	bf00      	nop
		}
	}

	return val;
 8007cfa:	697b      	ldr	r3, [r7, #20]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b089      	sub	sp, #36	@ 0x24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d10:	2302      	movs	r3, #2
 8007d12:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	f240 8109 	bls.w	8007f2e <put_fat+0x22a>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	f080 8103 	bcs.w	8007f2e <put_fat+0x22a>
		switch (fs->fs_type) {
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	f000 80b6 	beq.w	8007e9e <put_fat+0x19a>
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	f300 80fb 	bgt.w	8007f2e <put_fat+0x22a>
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d003      	beq.n	8007d44 <put_fat+0x40>
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	f000 8083 	beq.w	8007e48 <put_fat+0x144>
 8007d42:	e0f4      	b.n	8007f2e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	61bb      	str	r3, [r7, #24]
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	085b      	lsrs	r3, r3, #1
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4413      	add	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	899b      	ldrh	r3, [r3, #12]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d62:	4413      	add	r3, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff fe3c 	bl	80079e4 <move_window>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d70:	7ffb      	ldrb	r3, [r7, #31]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 80d4 	bne.w	8007f20 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	61ba      	str	r2, [r7, #24]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	8992      	ldrh	r2, [r2, #12]
 8007d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d8c:	fb00 f202 	mul.w	r2, r0, r2
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	440b      	add	r3, r1
 8007d94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00d      	beq.n	8007dbc <put_fat+0xb8>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	b25a      	sxtb	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	b25b      	sxtb	r3, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	e001      	b.n	8007dc0 <put_fat+0xbc>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	899b      	ldrh	r3, [r3, #12]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dda:	4413      	add	r3, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fe00 	bl	80079e4 <move_window>
 8007de4:	4603      	mov	r3, r0
 8007de6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007de8:	7ffb      	ldrb	r3, [r7, #31]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f040 809a 	bne.w	8007f24 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	899b      	ldrh	r3, [r3, #12]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	69bb      	ldr	r3, [r7, #24]
 8007dfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e02:	fb00 f202 	mul.w	r2, r0, r2
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	440b      	add	r3, r1
 8007e0a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <put_fat+0x11a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	091b      	lsrs	r3, r3, #4
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e00e      	b.n	8007e3c <put_fat+0x138>
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	b25b      	sxtb	r3, r3
 8007e24:	f023 030f 	bic.w	r3, r3, #15
 8007e28:	b25a      	sxtb	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	b25b      	sxtb	r3, r3
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	b25b      	sxtb	r3, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2201      	movs	r2, #1
 8007e44:	70da      	strb	r2, [r3, #3]
			break;
 8007e46:	e072      	b.n	8007f2e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	899b      	ldrh	r3, [r3, #12]
 8007e50:	085b      	lsrs	r3, r3, #1
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	4619      	mov	r1, r3
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e5c:	4413      	add	r3, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fdbf 	bl	80079e4 <move_window>
 8007e66:	4603      	mov	r3, r0
 8007e68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d15b      	bne.n	8007f28 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	8992      	ldrh	r2, [r2, #12]
 8007e7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e82:	fb00 f202 	mul.w	r2, r0, r2
 8007e86:	1a9b      	subs	r3, r3, r2
 8007e88:	440b      	add	r3, r1
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	b292      	uxth	r2, r2
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fb32 	bl	80074fa <st_word>
			fs->wflag = 1;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	70da      	strb	r2, [r3, #3]
			break;
 8007e9c:	e047      	b.n	8007f2e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	899b      	ldrh	r3, [r3, #12]
 8007ea6:	089b      	lsrs	r3, r3, #2
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eb2:	4413      	add	r3, r2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fd94 	bl	80079e4 <move_window>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ec0:	7ffb      	ldrb	r3, [r7, #31]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d132      	bne.n	8007f2c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	8992      	ldrh	r2, [r2, #12]
 8007eda:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ede:	fb00 f202 	mul.w	r2, r0, r2
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fae4 	bl	80074b4 <ld_dword>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007ef2:	4323      	orrs	r3, r4
 8007ef4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	8992      	ldrh	r2, [r2, #12]
 8007f04:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f08:	fb00 f202 	mul.w	r2, r0, r2
 8007f0c:	1a9b      	subs	r3, r3, r2
 8007f0e:	440b      	add	r3, r1
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff fb0c 	bl	8007530 <st_dword>
			fs->wflag = 1;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	70da      	strb	r2, [r3, #3]
			break;
 8007f1e:	e006      	b.n	8007f2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007f20:	bf00      	nop
 8007f22:	e004      	b.n	8007f2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007f24:	bf00      	nop
 8007f26:	e002      	b.n	8007f2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007f28:	bf00      	nop
 8007f2a:	e000      	b.n	8007f2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8007f2c:	bf00      	nop
		}
	}
	return res;
 8007f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3724      	adds	r7, #36	@ 0x24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d904      	bls.n	8007f5e <remove_chain+0x26>
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d301      	bcc.n	8007f62 <remove_chain+0x2a>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e04b      	b.n	8007ffa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00c      	beq.n	8007f82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f68:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	69b8      	ldr	r0, [r7, #24]
 8007f70:	f7ff fec8 	bl	8007d04 <put_fat>
 8007f74:	4603      	mov	r3, r0
 8007f76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f78:	7ffb      	ldrb	r3, [r7, #31]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <remove_chain+0x4a>
 8007f7e:	7ffb      	ldrb	r3, [r7, #31]
 8007f80:	e03b      	b.n	8007ffa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fdea 	bl	8007b5e <get_fat>
 8007f8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d031      	beq.n	8007ff6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <remove_chain+0x64>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e02e      	b.n	8007ffa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa2:	d101      	bne.n	8007fa8 <remove_chain+0x70>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e028      	b.n	8007ffa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007fa8:	2200      	movs	r2, #0
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	69b8      	ldr	r0, [r7, #24]
 8007fae:	f7ff fea9 	bl	8007d04 <put_fat>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <remove_chain+0x88>
 8007fbc:	7ffb      	ldrb	r3, [r7, #31]
 8007fbe:	e01c      	b.n	8007ffa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	3b02      	subs	r3, #2
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d20b      	bcs.n	8007fe6 <remove_chain+0xae>
			fs->free_clst++;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	791b      	ldrb	r3, [r3, #4]
 8007fdc:	f043 0301 	orr.w	r3, r3, #1
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3c6      	bcc.n	8007f82 <remove_chain+0x4a>
 8007ff4:	e000      	b.n	8007ff8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ff6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3720      	adds	r7, #32
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b088      	sub	sp, #32
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10d      	bne.n	8008034 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <create_chain+0x2c>
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	429a      	cmp	r2, r3
 800802c:	d31b      	bcc.n	8008066 <create_chain+0x64>
 800802e:	2301      	movs	r3, #1
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e018      	b.n	8008066 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fd91 	bl	8007b5e <get_fat>
 800803c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d801      	bhi.n	8008048 <create_chain+0x46>
 8008044:	2301      	movs	r3, #1
 8008046:	e070      	b.n	800812a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d101      	bne.n	8008054 <create_chain+0x52>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	e06a      	b.n	800812a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d201      	bcs.n	8008062 <create_chain+0x60>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	e063      	b.n	800812a <create_chain+0x128>
		scl = clst;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	3301      	adds	r3, #1
 800806e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	429a      	cmp	r2, r3
 8008078:	d307      	bcc.n	800808a <create_chain+0x88>
				ncl = 2;
 800807a:	2302      	movs	r3, #2
 800807c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	429a      	cmp	r2, r3
 8008084:	d901      	bls.n	800808a <create_chain+0x88>
 8008086:	2300      	movs	r3, #0
 8008088:	e04f      	b.n	800812a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800808a:	69f9      	ldr	r1, [r7, #28]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff fd66 	bl	8007b5e <get_fat>
 8008092:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00e      	beq.n	80080b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d003      	beq.n	80080a8 <create_chain+0xa6>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d101      	bne.n	80080ac <create_chain+0xaa>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	e03e      	b.n	800812a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d1da      	bne.n	800806a <create_chain+0x68>
 80080b4:	2300      	movs	r3, #0
 80080b6:	e038      	b.n	800812a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80080b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	69f9      	ldr	r1, [r7, #28]
 80080c0:	6938      	ldr	r0, [r7, #16]
 80080c2:	f7ff fe1f 	bl	8007d04 <put_fat>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <create_chain+0xe2>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6938      	ldr	r0, [r7, #16]
 80080dc:	f7ff fe12 	bl	8007d04 <put_fat>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d116      	bne.n	8008118 <create_chain+0x116>
		fs->last_clst = ncl;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	3b02      	subs	r3, #2
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d804      	bhi.n	8008108 <create_chain+0x106>
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	1e5a      	subs	r2, r3, #1
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	f043 0301 	orr.w	r3, r3, #1
 8008110:	b2da      	uxtb	r2, r3
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	711a      	strb	r2, [r3, #4]
 8008116:	e007      	b.n	8008128 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d102      	bne.n	8008124 <create_chain+0x122>
 800811e:	f04f 33ff 	mov.w	r3, #4294967295
 8008122:	e000      	b.n	8008126 <create_chain+0x124>
 8008124:	2301      	movs	r3, #1
 8008126:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008128:	69fb      	ldr	r3, [r7, #28]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008132:	b480      	push	{r7}
 8008134:	b087      	sub	sp, #28
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008146:	3304      	adds	r3, #4
 8008148:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	899b      	ldrh	r3, [r3, #12]
 800814e:	461a      	mov	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	fbb3 f3f2 	udiv	r3, r3, r2
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	8952      	ldrh	r2, [r2, #10]
 800815a:	fbb3 f3f2 	udiv	r3, r3, r2
 800815e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	613a      	str	r2, [r7, #16]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <clmt_clust+0x42>
 8008170:	2300      	movs	r3, #0
 8008172:	e010      	b.n	8008196 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	429a      	cmp	r2, r3
 800817a:	d307      	bcc.n	800818c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	3304      	adds	r3, #4
 8008188:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800818a:	e7e9      	b.n	8008160 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800818c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	4413      	add	r3, r2
}
 8008196:	4618      	mov	r0, r3
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b086      	sub	sp, #24
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081b8:	d204      	bcs.n	80081c4 <dir_sdi+0x22>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80081c4:	2302      	movs	r3, #2
 80081c6:	e071      	b.n	80082ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <dir_sdi+0x46>
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d902      	bls.n	80081e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10c      	bne.n	8008208 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	095b      	lsrs	r3, r3, #5
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	8912      	ldrh	r2, [r2, #8]
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d301      	bcc.n	80081fe <dir_sdi+0x5c>
 80081fa:	2302      	movs	r3, #2
 80081fc:	e056      	b.n	80082ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	61da      	str	r2, [r3, #28]
 8008206:	e02d      	b.n	8008264 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	895b      	ldrh	r3, [r3, #10]
 800820c:	461a      	mov	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	899b      	ldrh	r3, [r3, #12]
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008218:	e019      	b.n	800824e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6979      	ldr	r1, [r7, #20]
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff fc9d 	bl	8007b5e <get_fat>
 8008224:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822c:	d101      	bne.n	8008232 <dir_sdi+0x90>
 800822e:	2301      	movs	r3, #1
 8008230:	e03c      	b.n	80082ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d904      	bls.n	8008242 <dir_sdi+0xa0>
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	429a      	cmp	r2, r3
 8008240:	d301      	bcc.n	8008246 <dir_sdi+0xa4>
 8008242:	2302      	movs	r3, #2
 8008244:	e032      	b.n	80082ac <dir_sdi+0x10a>
			ofs -= csz;
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	429a      	cmp	r2, r3
 8008254:	d2e1      	bcs.n	800821a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008256:	6979      	ldr	r1, [r7, #20]
 8008258:	6938      	ldr	r0, [r7, #16]
 800825a:	f7ff fc61 	bl	8007b20 <clust2sect>
 800825e:	4602      	mov	r2, r0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <dir_sdi+0xd4>
 8008272:	2302      	movs	r3, #2
 8008274:	e01a      	b.n	80082ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69da      	ldr	r2, [r3, #28]
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	4619      	mov	r1, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	fbb3 f3f1 	udiv	r3, r3, r1
 8008286:	441a      	add	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	899b      	ldrh	r3, [r3, #12]
 8008296:	461a      	mov	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	fbb3 f0f2 	udiv	r0, r3, r2
 800829e:	fb00 f202 	mul.w	r2, r0, r2
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	18ca      	adds	r2, r1, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	3320      	adds	r3, #32
 80082ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <dir_next+0x28>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082da:	d301      	bcc.n	80082e0 <dir_next+0x2c>
 80082dc:	2304      	movs	r3, #4
 80082de:	e0bb      	b.n	8008458 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	899b      	ldrh	r3, [r3, #12]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80082ec:	fb01 f202 	mul.w	r2, r1, r2
 80082f0:	1a9b      	subs	r3, r3, r2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 809d 	bne.w	8008432 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10b      	bne.n	8008322 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	8912      	ldrh	r2, [r2, #8]
 8008312:	4293      	cmp	r3, r2
 8008314:	f0c0 808d 	bcc.w	8008432 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	61da      	str	r2, [r3, #28]
 800831e:	2304      	movs	r3, #4
 8008320:	e09a      	b.n	8008458 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	899b      	ldrh	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	fbb3 f3f2 	udiv	r3, r3, r2
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	8952      	ldrh	r2, [r2, #10]
 8008332:	3a01      	subs	r2, #1
 8008334:	4013      	ands	r3, r2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d17b      	bne.n	8008432 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	4619      	mov	r1, r3
 8008342:	4610      	mov	r0, r2
 8008344:	f7ff fc0b 	bl	8007b5e <get_fat>
 8008348:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d801      	bhi.n	8008354 <dir_next+0xa0>
 8008350:	2302      	movs	r3, #2
 8008352:	e081      	b.n	8008458 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d101      	bne.n	8008360 <dir_next+0xac>
 800835c:	2301      	movs	r3, #1
 800835e:	e07b      	b.n	8008458 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	429a      	cmp	r2, r3
 8008368:	d359      	bcc.n	800841e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	61da      	str	r2, [r3, #28]
 8008376:	2304      	movs	r3, #4
 8008378:	e06e      	b.n	8008458 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f7ff fe3d 	bl	8008002 <create_chain>
 8008388:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <dir_next+0xe0>
 8008390:	2307      	movs	r3, #7
 8008392:	e061      	b.n	8008458 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <dir_next+0xea>
 800839a:	2302      	movs	r3, #2
 800839c:	e05c      	b.n	8008458 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d101      	bne.n	80083aa <dir_next+0xf6>
 80083a6:	2301      	movs	r3, #1
 80083a8:	e056      	b.n	8008458 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fad6 	bl	800795c <sync_window>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <dir_next+0x106>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e04e      	b.n	8008458 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	899b      	ldrh	r3, [r3, #12]
 80083c4:	461a      	mov	r2, r3
 80083c6:	2100      	movs	r1, #0
 80083c8:	f7ff f8ff 	bl	80075ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083cc:	2300      	movs	r3, #0
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	6979      	ldr	r1, [r7, #20]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f7ff fba4 	bl	8007b20 <clust2sect>
 80083d8:	4602      	mov	r2, r0
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80083de:	e012      	b.n	8008406 <dir_next+0x152>
						fs->wflag = 1;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2201      	movs	r2, #1
 80083e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff fab8 	bl	800795c <sync_window>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <dir_next+0x142>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e030      	b.n	8008458 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	3301      	adds	r3, #1
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	635a      	str	r2, [r3, #52]	@ 0x34
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	895b      	ldrh	r3, [r3, #10]
 800840a:	461a      	mov	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4293      	cmp	r3, r2
 8008410:	d3e6      	bcc.n	80083e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad2      	subs	r2, r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff fb7a 	bl	8007b20 <clust2sect>
 800842c:	4602      	mov	r2, r0
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	899b      	ldrh	r3, [r3, #12]
 8008442:	461a      	mov	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	fbb3 f0f2 	udiv	r0, r3, r2
 800844a:	fb00 f202 	mul.w	r2, r0, r2
 800844e:	1a9b      	subs	r3, r3, r2
 8008450:	18ca      	adds	r2, r1, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008470:	2100      	movs	r1, #0
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff fe95 	bl	80081a2 <dir_sdi>
 8008478:	4603      	mov	r3, r0
 800847a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d12b      	bne.n	80084da <dir_alloc+0x7a>
		n = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	4619      	mov	r1, r3
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f7ff faa9 	bl	80079e4 <move_window>
 8008492:	4603      	mov	r3, r0
 8008494:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11d      	bne.n	80084d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2be5      	cmp	r3, #229	@ 0xe5
 80084a4:	d004      	beq.n	80084b0 <dir_alloc+0x50>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d107      	bne.n	80084c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3301      	adds	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d102      	bne.n	80084c4 <dir_alloc+0x64>
 80084be:	e00c      	b.n	80084da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80084c4:	2101      	movs	r1, #1
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7ff fef4 	bl	80082b4 <dir_next>
 80084cc:	4603      	mov	r3, r0
 80084ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0d7      	beq.n	8008486 <dir_alloc+0x26>
 80084d6:	e000      	b.n	80084da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80084d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80084da:	7dfb      	ldrb	r3, [r7, #23]
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d101      	bne.n	80084e4 <dir_alloc+0x84>
 80084e0:	2307      	movs	r3, #7
 80084e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	331a      	adds	r3, #26
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fe ffc1 	bl	8007484 <ld_word>
 8008502:	4603      	mov	r3, r0
 8008504:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b03      	cmp	r3, #3
 800850c:	d109      	bne.n	8008522 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3314      	adds	r3, #20
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe ffb6 	bl	8007484 <ld_word>
 8008518:	4603      	mov	r3, r0
 800851a:	041b      	lsls	r3, r3, #16
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008522:	68fb      	ldr	r3, [r7, #12]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	331a      	adds	r3, #26
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	b292      	uxth	r2, r2
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe ffd9 	bl	80074fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b03      	cmp	r3, #3
 800854e:	d109      	bne.n	8008564 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f103 0214 	add.w	r2, r3, #20
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	0c1b      	lsrs	r3, r3, #16
 800855a:	b29b      	uxth	r3, r3
 800855c:	4619      	mov	r1, r3
 800855e:	4610      	mov	r0, r2
 8008560:	f7fe ffcb 	bl	80074fa <st_word>
	}
}
 8008564:	bf00      	nop
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800856c:	b590      	push	{r4, r7, lr}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	331a      	adds	r3, #26
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe ff82 	bl	8007484 <ld_word>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <cmp_lfn+0x1e>
 8008586:	2300      	movs	r3, #0
 8008588:	e059      	b.n	800863e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008592:	1e5a      	subs	r2, r3, #1
 8008594:	4613      	mov	r3, r2
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80085a0:	2301      	movs	r3, #1
 80085a2:	81fb      	strh	r3, [r7, #14]
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	e033      	b.n	8008612 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80085aa:	4a27      	ldr	r2, [pc, #156]	@ (8008648 <cmp_lfn+0xdc>)
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	4413      	add	r3, r2
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	4413      	add	r3, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe ff63 	bl	8007484 <ld_word>
 80085be:	4603      	mov	r3, r0
 80085c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80085c2:	89fb      	ldrh	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01a      	beq.n	80085fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80085cc:	d812      	bhi.n	80085f4 <cmp_lfn+0x88>
 80085ce:	89bb      	ldrh	r3, [r7, #12]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fe0d 	bl	800a1f0 <ff_wtoupper>
 80085d6:	4603      	mov	r3, r0
 80085d8:	461c      	mov	r4, r3
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	617a      	str	r2, [r7, #20]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 fe01 	bl	800a1f0 <ff_wtoupper>
 80085ee:	4603      	mov	r3, r0
 80085f0:	429c      	cmp	r4, r3
 80085f2:	d001      	beq.n	80085f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80085f4:	2300      	movs	r3, #0
 80085f6:	e022      	b.n	800863e <cmp_lfn+0xd2>
			}
			wc = uc;
 80085f8:	89bb      	ldrh	r3, [r7, #12]
 80085fa:	81fb      	strh	r3, [r7, #14]
 80085fc:	e006      	b.n	800860c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80085fe:	89bb      	ldrh	r3, [r7, #12]
 8008600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008604:	4293      	cmp	r3, r2
 8008606:	d001      	beq.n	800860c <cmp_lfn+0xa0>
 8008608:	2300      	movs	r3, #0
 800860a:	e018      	b.n	800863e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3301      	adds	r3, #1
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b0c      	cmp	r3, #12
 8008616:	d9c8      	bls.n	80085aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <cmp_lfn+0xd0>
 8008624:	89fb      	ldrh	r3, [r7, #14]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d008      	beq.n	800863c <cmp_lfn+0xd0>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <cmp_lfn+0xd0>
 8008638:	2300      	movs	r3, #0
 800863a:	e000      	b.n	800863e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800863c:	2301      	movs	r3, #1
}
 800863e:	4618      	mov	r0, r3
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd90      	pop	{r4, r7, pc}
 8008646:	bf00      	nop
 8008648:	080108dc 	.word	0x080108dc

0800864c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4611      	mov	r1, r2
 8008658:	461a      	mov	r2, r3
 800865a:	460b      	mov	r3, r1
 800865c:	71fb      	strb	r3, [r7, #7]
 800865e:	4613      	mov	r3, r2
 8008660:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	330d      	adds	r3, #13
 8008666:	79ba      	ldrb	r2, [r7, #6]
 8008668:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	330b      	adds	r3, #11
 800866e:	220f      	movs	r2, #15
 8008670:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	330c      	adds	r3, #12
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	331a      	adds	r3, #26
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe ff3a 	bl	80074fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	1e5a      	subs	r2, r3, #1
 800868a:	4613      	mov	r3, r2
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008696:	2300      	movs	r3, #0
 8008698:	82fb      	strh	r3, [r7, #22]
 800869a:	2300      	movs	r3, #0
 800869c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800869e:	8afb      	ldrh	r3, [r7, #22]
 80086a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d007      	beq.n	80086b8 <put_lfn+0x6c>
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	1c5a      	adds	r2, r3, #1
 80086ac:	61fa      	str	r2, [r7, #28]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80086b8:	4a17      	ldr	r2, [pc, #92]	@ (8008718 <put_lfn+0xcc>)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	4413      	add	r3, r2
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	461a      	mov	r2, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4413      	add	r3, r2
 80086c6:	8afa      	ldrh	r2, [r7, #22]
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe ff15 	bl	80074fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80086d0:	8afb      	ldrh	r3, [r7, #22]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <put_lfn+0x90>
 80086d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80086da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	3301      	adds	r3, #1
 80086e0:	61bb      	str	r3, [r7, #24]
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	2b0c      	cmp	r3, #12
 80086e6:	d9da      	bls.n	800869e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80086e8:	8afb      	ldrh	r3, [r7, #22]
 80086ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d006      	beq.n	8008700 <put_lfn+0xb4>
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <put_lfn+0xbc>
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008706:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	79fa      	ldrb	r2, [r7, #7]
 800870c:	701a      	strb	r2, [r3, #0]
}
 800870e:	bf00      	nop
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	080108dc 	.word	0x080108dc

0800871c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	@ 0x30
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800872a:	220b      	movs	r2, #11
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7fe ff2a 	bl	8007588 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b05      	cmp	r3, #5
 8008738:	d92b      	bls.n	8008792 <gen_numname+0x76>
		sr = seq;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800873e:	e022      	b.n	8008786 <gen_numname+0x6a>
			wc = *lfn++;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	607a      	str	r2, [r7, #4]
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800874a:	2300      	movs	r3, #0
 800874c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800874e:	e017      	b.n	8008780 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	005a      	lsls	r2, r3, #1
 8008754:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	4413      	add	r3, r2
 800875c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800875e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008760:	085b      	lsrs	r3, r3, #1
 8008762:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <gen_numname+0x5e>
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008774:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008778:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800877a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877c:	3301      	adds	r3, #1
 800877e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	2b0f      	cmp	r3, #15
 8008784:	d9e4      	bls.n	8008750 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1d8      	bne.n	8008740 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008792:	2307      	movs	r3, #7
 8008794:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	3330      	adds	r3, #48	@ 0x30
 80087a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80087a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087aa:	2b39      	cmp	r3, #57	@ 0x39
 80087ac:	d904      	bls.n	80087b8 <gen_numname+0x9c>
 80087ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087b2:	3307      	adds	r3, #7
 80087b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	1e5a      	subs	r2, r3, #1
 80087bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80087be:	3330      	adds	r3, #48	@ 0x30
 80087c0:	443b      	add	r3, r7
 80087c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80087c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1df      	bne.n	8008796 <gen_numname+0x7a>
	ns[i] = '~';
 80087d6:	f107 0214 	add.w	r2, r7, #20
 80087da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087dc:	4413      	add	r3, r2
 80087de:	227e      	movs	r2, #126	@ 0x7e
 80087e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80087e2:	2300      	movs	r3, #0
 80087e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087e6:	e002      	b.n	80087ee <gen_numname+0xd2>
 80087e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ea:	3301      	adds	r3, #1
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d205      	bcs.n	8008802 <gen_numname+0xe6>
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	4413      	add	r3, r2
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b20      	cmp	r3, #32
 8008800:	d1f2      	bne.n	80087e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	2b07      	cmp	r3, #7
 8008806:	d807      	bhi.n	8008818 <gen_numname+0xfc>
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800880e:	3330      	adds	r3, #48	@ 0x30
 8008810:	443b      	add	r3, r7
 8008812:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008816:	e000      	b.n	800881a <gen_numname+0xfe>
 8008818:	2120      	movs	r1, #32
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	460a      	mov	r2, r1
 8008826:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	2b07      	cmp	r3, #7
 800882c:	d9e9      	bls.n	8008802 <gen_numname+0xe6>
}
 800882e:	bf00      	nop
 8008830:	bf00      	nop
 8008832:	3730      	adds	r7, #48	@ 0x30
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008844:	230b      	movs	r3, #11
 8008846:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	b2da      	uxtb	r2, r3
 800884c:	0852      	lsrs	r2, r2, #1
 800884e:	01db      	lsls	r3, r3, #7
 8008850:	4313      	orrs	r3, r2
 8008852:	b2da      	uxtb	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	1c59      	adds	r1, r3, #1
 8008858:	6079      	str	r1, [r7, #4]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4413      	add	r3, r2
 800885e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3b01      	subs	r3, #1
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1ed      	bne.n	8008848 <sum_sfn+0x10>
	return sum;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff fc89 	bl	80081a2 <dir_sdi>
 8008890:	4603      	mov	r3, r0
 8008892:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008894:	7dfb      	ldrb	r3, [r7, #23]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <dir_find+0x24>
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	e0a9      	b.n	80089f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800889e:	23ff      	movs	r3, #255	@ 0xff
 80088a0:	753b      	strb	r3, [r7, #20]
 80088a2:	7d3b      	ldrb	r3, [r7, #20]
 80088a4:	757b      	strb	r3, [r7, #21]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6938      	ldr	r0, [r7, #16]
 80088b6:	f7ff f895 	bl	80079e4 <move_window>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f040 8090 	bne.w	80089e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80088ce:	7dbb      	ldrb	r3, [r7, #22]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <dir_find+0x60>
 80088d4:	2304      	movs	r3, #4
 80088d6:	75fb      	strb	r3, [r7, #23]
 80088d8:	e08a      	b.n	80089f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	330b      	adds	r3, #11
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7bfa      	ldrb	r2, [r7, #15]
 80088ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80088ee:	7dbb      	ldrb	r3, [r7, #22]
 80088f0:	2be5      	cmp	r3, #229	@ 0xe5
 80088f2:	d007      	beq.n	8008904 <dir_find+0x8a>
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <dir_find+0x98>
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b0f      	cmp	r3, #15
 8008902:	d006      	beq.n	8008912 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008904:	23ff      	movs	r3, #255	@ 0xff
 8008906:	757b      	strb	r3, [r7, #21]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f04f 32ff 	mov.w	r2, #4294967295
 800890e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008910:	e05e      	b.n	80089d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	2b0f      	cmp	r3, #15
 8008916:	d136      	bne.n	8008986 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800891e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d154      	bne.n	80089d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008926:	7dbb      	ldrb	r3, [r7, #22]
 8008928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00d      	beq.n	800894c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	7b5b      	ldrb	r3, [r3, #13]
 8008936:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008938:	7dbb      	ldrb	r3, [r7, #22]
 800893a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800893e:	75bb      	strb	r3, [r7, #22]
 8008940:	7dbb      	ldrb	r3, [r7, #22]
 8008942:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695a      	ldr	r2, [r3, #20]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800894c:	7dba      	ldrb	r2, [r7, #22]
 800894e:	7d7b      	ldrb	r3, [r7, #21]
 8008950:	429a      	cmp	r2, r3
 8008952:	d115      	bne.n	8008980 <dir_find+0x106>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	330d      	adds	r3, #13
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	7d3a      	ldrb	r2, [r7, #20]
 800895e:	429a      	cmp	r2, r3
 8008960:	d10e      	bne.n	8008980 <dir_find+0x106>
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f7ff fdfd 	bl	800856c <cmp_lfn>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <dir_find+0x106>
 8008978:	7d7b      	ldrb	r3, [r7, #21]
 800897a:	3b01      	subs	r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	e000      	b.n	8008982 <dir_find+0x108>
 8008980:	23ff      	movs	r3, #255	@ 0xff
 8008982:	757b      	strb	r3, [r7, #21]
 8008984:	e024      	b.n	80089d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008986:	7d7b      	ldrb	r3, [r7, #21]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d109      	bne.n	80089a0 <dir_find+0x126>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff ff51 	bl	8008838 <sum_sfn>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	7d3b      	ldrb	r3, [r7, #20]
 800899c:	4293      	cmp	r3, r2
 800899e:	d024      	beq.n	80089ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10a      	bne.n	80089c4 <dir_find+0x14a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a18      	ldr	r0, [r3, #32]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3324      	adds	r3, #36	@ 0x24
 80089b6:	220b      	movs	r2, #11
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7fe fe21 	bl	8007600 <mem_cmp>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d014      	beq.n	80089ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80089c4:	23ff      	movs	r3, #255	@ 0xff
 80089c6:	757b      	strb	r3, [r7, #21]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295
 80089ce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80089d0:	2100      	movs	r1, #0
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff fc6e 	bl	80082b4 <dir_next>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f43f af65 	beq.w	80088ae <dir_find+0x34>
 80089e4:	e004      	b.n	80089f0 <dir_find+0x176>
		if (res != FR_OK) break;
 80089e6:	bf00      	nop
 80089e8:	e002      	b.n	80089f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80089ea:	bf00      	nop
 80089ec:	e000      	b.n	80089f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80089ee:	bf00      	nop

	return res;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08c      	sub	sp, #48	@ 0x30
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008a10:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <dir_register+0x20>
 8008a18:	2306      	movs	r3, #6
 8008a1a:	e0e0      	b.n	8008bde <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a20:	e002      	b.n	8008a28 <dir_register+0x2c>
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	3301      	adds	r3, #1
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1f4      	bne.n	8008a22 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008a3e:	f107 030c 	add.w	r3, r7, #12
 8008a42:	220c      	movs	r2, #12
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fe fd9f 	bl	8007588 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d032      	beq.n	8008aba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2240      	movs	r2, #64	@ 0x40
 8008a58:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a60:	e016      	b.n	8008a90 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	f107 010c 	add.w	r1, r7, #12
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	f7ff fe53 	bl	800871c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff feff 	bl	800887a <dir_find>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a92:	2b63      	cmp	r3, #99	@ 0x63
 8008a94:	d9e5      	bls.n	8008a62 <dir_register+0x66>
 8008a96:	e000      	b.n	8008a9a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008a98:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	2b64      	cmp	r3, #100	@ 0x64
 8008a9e:	d101      	bne.n	8008aa4 <dir_register+0xa8>
 8008aa0:	2307      	movs	r3, #7
 8008aa2:	e09c      	b.n	8008bde <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d002      	beq.n	8008ab2 <dir_register+0xb6>
 8008aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ab0:	e095      	b.n	8008bde <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008ab2:	7dfa      	ldrb	r2, [r7, #23]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <dir_register+0xd8>
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	330c      	adds	r3, #12
 8008ac8:	4a47      	ldr	r2, [pc, #284]	@ (8008be8 <dir_register+0x1ec>)
 8008aca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ace:	089b      	lsrs	r3, r3, #2
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	e000      	b.n	8008ad6 <dir_register+0xda>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7ff fcc0 	bl	8008460 <dir_alloc>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d148      	bne.n	8008b80 <dir_register+0x184>
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	623b      	str	r3, [r7, #32]
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d042      	beq.n	8008b80 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	015b      	lsls	r3, r3, #5
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7ff fb4b 	bl	80081a2 <dir_sdi>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008b12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d132      	bne.n	8008b80 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3324      	adds	r3, #36	@ 0x24
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff fe8a 	bl	8008838 <sum_sfn>
 8008b24:	4603      	mov	r3, r0
 8008b26:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	69f8      	ldr	r0, [r7, #28]
 8008b30:	f7fe ff58 	bl	80079e4 <move_window>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d11d      	bne.n	8008b7e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	6918      	ldr	r0, [r3, #16]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a19      	ldr	r1, [r3, #32]
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	7efb      	ldrb	r3, [r7, #27]
 8008b50:	f7ff fd7c 	bl	800864c <put_lfn>
				fs->wflag = 1;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2201      	movs	r2, #1
 8008b58:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff fba9 	bl	80082b4 <dir_next>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d107      	bne.n	8008b80 <dir_register+0x184>
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	623b      	str	r3, [r7, #32]
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1d5      	bne.n	8008b28 <dir_register+0x12c>
 8008b7c:	e000      	b.n	8008b80 <dir_register+0x184>
				if (res != FR_OK) break;
 8008b7e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d128      	bne.n	8008bda <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	69f8      	ldr	r0, [r7, #28]
 8008b90:	f7fe ff28 	bl	80079e4 <move_window>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d11b      	bne.n	8008bda <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fd0d 	bl	80075ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a18      	ldr	r0, [r3, #32]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3324      	adds	r3, #36	@ 0x24
 8008bb8:	220b      	movs	r2, #11
 8008bba:	4619      	mov	r1, r3
 8008bbc:	f7fe fce4 	bl	8007588 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	f002 0218 	and.w	r2, r2, #24
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3730      	adds	r7, #48	@ 0x30
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	4ec4ec4f 	.word	0x4ec4ec4f

08008bec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08a      	sub	sp, #40	@ 0x28
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	60fb      	str	r3, [r7, #12]
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	61ba      	str	r2, [r7, #24]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	4413      	add	r3, r2
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c1c:	2b1f      	cmp	r3, #31
 8008c1e:	d940      	bls.n	8008ca2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008c20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c22:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c24:	d006      	beq.n	8008c34 <create_name+0x48>
 8008c26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c28:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c2a:	d110      	bne.n	8008c4e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008c2c:	e002      	b.n	8008c34 <create_name+0x48>
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	3301      	adds	r3, #1
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	4413      	add	r3, r2
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c3e:	d0f6      	beq.n	8008c2e <create_name+0x42>
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	4413      	add	r3, r2
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b5c      	cmp	r3, #92	@ 0x5c
 8008c4a:	d0f0      	beq.n	8008c2e <create_name+0x42>
			break;
 8008c4c:	e02a      	b.n	8008ca4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2bfe      	cmp	r3, #254	@ 0xfe
 8008c52:	d901      	bls.n	8008c58 <create_name+0x6c>
 8008c54:	2306      	movs	r3, #6
 8008c56:	e17d      	b.n	8008f54 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008c58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008c5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c60:	2101      	movs	r1, #1
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fa88 	bl	800a178 <ff_convert>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <create_name+0x8a>
 8008c72:	2306      	movs	r3, #6
 8008c74:	e16e      	b.n	8008f54 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c7a:	d809      	bhi.n	8008c90 <create_name+0xa4>
 8008c7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c7e:	4619      	mov	r1, r3
 8008c80:	488d      	ldr	r0, [pc, #564]	@ (8008eb8 <create_name+0x2cc>)
 8008c82:	f7fe fce4 	bl	800764e <chk_chr>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <create_name+0xa4>
 8008c8c:	2306      	movs	r3, #6
 8008c8e:	e161      	b.n	8008f54 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	617a      	str	r2, [r7, #20]
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008c9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008ca0:	e7b4      	b.n	8008c0c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008ca2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	441a      	add	r2, r3
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008cae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cb0:	2b1f      	cmp	r3, #31
 8008cb2:	d801      	bhi.n	8008cb8 <create_name+0xcc>
 8008cb4:	2304      	movs	r3, #4
 8008cb6:	e000      	b.n	8008cba <create_name+0xce>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008cbe:	e011      	b.n	8008ce4 <create_name+0xf8>
		w = lfn[di - 1];
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008cd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	d002      	beq.n	8008cde <create_name+0xf2>
 8008cd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cda:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cdc:	d106      	bne.n	8008cec <create_name+0x100>
		di--;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1ea      	bne.n	8008cc0 <create_name+0xd4>
 8008cea:	e000      	b.n	8008cee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008cec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <create_name+0x118>
 8008d00:	2306      	movs	r3, #6
 8008d02:	e127      	b.n	8008f54 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	3324      	adds	r3, #36	@ 0x24
 8008d08:	220b      	movs	r2, #11
 8008d0a:	2120      	movs	r1, #32
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fe fc5c 	bl	80075ca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008d12:	2300      	movs	r3, #0
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	e002      	b.n	8008d1e <create_name+0x132>
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	61bb      	str	r3, [r7, #24]
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d0f5      	beq.n	8008d18 <create_name+0x12c>
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d38:	d0ee      	beq.n	8008d18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <create_name+0x168>
 8008d40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d44:	f043 0303 	orr.w	r3, r3, #3
 8008d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008d4c:	e002      	b.n	8008d54 <create_name+0x168>
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d009      	beq.n	8008d6e <create_name+0x182>
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008d60:	3b01      	subs	r3, #1
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d6c:	d1ef      	bne.n	8008d4e <create_name+0x162>

	i = b = 0; ni = 8;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d74:	2300      	movs	r3, #0
 8008d76:	623b      	str	r3, [r7, #32]
 8008d78:	2308      	movs	r3, #8
 8008d7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	61ba      	str	r2, [r7, #24]
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4413      	add	r3, r2
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008d8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 8090 	beq.w	8008eb4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008d94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d006      	beq.n	8008da8 <create_name+0x1bc>
 8008d9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d9e:	d10a      	bne.n	8008db6 <create_name+0x1ca>
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d006      	beq.n	8008db6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dac:	f043 0303 	orr.w	r3, r3, #3
 8008db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008db4:	e07d      	b.n	8008eb2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008db6:	6a3a      	ldr	r2, [r7, #32]
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d203      	bcs.n	8008dc6 <create_name+0x1da>
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d123      	bne.n	8008e0e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	2b0b      	cmp	r3, #11
 8008dca:	d106      	bne.n	8008dda <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dd0:	f043 0303 	orr.w	r3, r3, #3
 8008dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008dd8:	e075      	b.n	8008ec6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d005      	beq.n	8008dee <create_name+0x202>
 8008de2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008de6:	f043 0303 	orr.w	r3, r3, #3
 8008dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d866      	bhi.n	8008ec4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	2308      	movs	r3, #8
 8008dfc:	623b      	str	r3, [r7, #32]
 8008dfe:	230b      	movs	r3, #11
 8008e00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008e02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008e0c:	e051      	b.n	8008eb2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008e0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e10:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e12:	d914      	bls.n	8008e3e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008e14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e16:	2100      	movs	r1, #0
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f001 f9ad 	bl	800a178 <ff_convert>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d004      	beq.n	8008e32 <create_name+0x246>
 8008e28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e2a:	3b80      	subs	r3, #128	@ 0x80
 8008e2c:	4a23      	ldr	r2, [pc, #140]	@ (8008ebc <create_name+0x2d0>)
 8008e2e:	5cd3      	ldrb	r3, [r2, r3]
 8008e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008e32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e36:	f043 0302 	orr.w	r3, r3, #2
 8008e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008e3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <create_name+0x268>
 8008e44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e46:	4619      	mov	r1, r3
 8008e48:	481d      	ldr	r0, [pc, #116]	@ (8008ec0 <create_name+0x2d4>)
 8008e4a:	f7fe fc00 	bl	800764e <chk_chr>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d008      	beq.n	8008e66 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008e54:	235f      	movs	r3, #95	@ 0x5f
 8008e56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e5c:	f043 0303 	orr.w	r3, r3, #3
 8008e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008e64:	e01b      	b.n	8008e9e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008e66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e68:	2b40      	cmp	r3, #64	@ 0x40
 8008e6a:	d909      	bls.n	8008e80 <create_name+0x294>
 8008e6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e6e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008e70:	d806      	bhi.n	8008e80 <create_name+0x294>
					b |= 2;
 8008e72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008e7e:	e00e      	b.n	8008e9e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008e80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e82:	2b60      	cmp	r3, #96	@ 0x60
 8008e84:	d90b      	bls.n	8008e9e <create_name+0x2b2>
 8008e86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e88:	2b7a      	cmp	r3, #122	@ 0x7a
 8008e8a:	d808      	bhi.n	8008e9e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008e8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008e98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e9a:	3b20      	subs	r3, #32
 8008e9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	623a      	str	r2, [r7, #32]
 8008ea4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ea6:	b2d1      	uxtb	r1, r2
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	460a      	mov	r2, r1
 8008eae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008eb2:	e763      	b.n	8008d7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008eb4:	bf00      	nop
 8008eb6:	e006      	b.n	8008ec6 <create_name+0x2da>
 8008eb8:	08010738 	.word	0x08010738
 8008ebc:	0801085c 	.word	0x0801085c
 8008ec0:	08010744 	.word	0x08010744
			if (si > di) break;			/* No extension */
 8008ec4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ecc:	2be5      	cmp	r3, #229	@ 0xe5
 8008ece:	d103      	bne.n	8008ed8 <create_name+0x2ec>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2205      	movs	r2, #5
 8008ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d104      	bne.n	8008ee8 <create_name+0x2fc>
 8008ede:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008eec:	f003 030c 	and.w	r3, r3, #12
 8008ef0:	2b0c      	cmp	r3, #12
 8008ef2:	d005      	beq.n	8008f00 <create_name+0x314>
 8008ef4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d105      	bne.n	8008f0c <create_name+0x320>
 8008f00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f04:	f043 0302 	orr.w	r3, r3, #2
 8008f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d117      	bne.n	8008f48 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008f18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d105      	bne.n	8008f30 <create_name+0x344>
 8008f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f28:	f043 0310 	orr.w	r3, r3, #16
 8008f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008f30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f34:	f003 030c 	and.w	r3, r3, #12
 8008f38:	2b04      	cmp	r3, #4
 8008f3a:	d105      	bne.n	8008f48 <create_name+0x35c>
 8008f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008f4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008f52:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3728      	adds	r7, #40	@ 0x28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008f70:	e002      	b.n	8008f78 <follow_path+0x1c>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008f7e:	d0f8      	beq.n	8008f72 <follow_path+0x16>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b5c      	cmp	r3, #92	@ 0x5c
 8008f86:	d0f4      	beq.n	8008f72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b1f      	cmp	r3, #31
 8008f94:	d80a      	bhi.n	8008fac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2280      	movs	r2, #128	@ 0x80
 8008f9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7ff f8fe 	bl	80081a2 <dir_sdi>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]
 8008faa:	e048      	b.n	800903e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008fac:	463b      	mov	r3, r7
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fe1b 	bl	8008bec <create_name>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d139      	bne.n	8009034 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff fc5a 	bl	800887a <dir_find>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008fd0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d12c      	bne.n	8009038 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008fde:	7afb      	ldrb	r3, [r7, #11]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d127      	bne.n	8009038 <follow_path+0xdc>
 8008fe8:	2305      	movs	r3, #5
 8008fea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008fec:	e024      	b.n	8009038 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008fee:	7afb      	ldrb	r3, [r7, #11]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d121      	bne.n	800903c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	799b      	ldrb	r3, [r3, #6]
 8008ffc:	f003 0310 	and.w	r3, r3, #16
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009004:	2305      	movs	r3, #5
 8009006:	75fb      	strb	r3, [r7, #23]
 8009008:	e019      	b.n	800903e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	8992      	ldrh	r2, [r2, #12]
 8009018:	fbb3 f0f2 	udiv	r0, r3, r2
 800901c:	fb00 f202 	mul.w	r2, r0, r2
 8009020:	1a9b      	subs	r3, r3, r2
 8009022:	440b      	add	r3, r1
 8009024:	4619      	mov	r1, r3
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fa61 	bl	80084ee <ld_clust>
 800902c:	4602      	mov	r2, r0
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009032:	e7bb      	b.n	8008fac <follow_path+0x50>
			if (res != FR_OK) break;
 8009034:	bf00      	nop
 8009036:	e002      	b.n	800903e <follow_path+0xe2>
				break;
 8009038:	bf00      	nop
 800903a:	e000      	b.n	800903e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800903c:	bf00      	nop
			}
		}
	}

	return res;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009048:	b480      	push	{r7}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009050:	f04f 33ff 	mov.w	r3, #4294967295
 8009054:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d031      	beq.n	80090c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	e002      	b.n	800906c <get_ldnumber+0x24>
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	3301      	adds	r3, #1
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	2b1f      	cmp	r3, #31
 8009072:	d903      	bls.n	800907c <get_ldnumber+0x34>
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b3a      	cmp	r3, #58	@ 0x3a
 800907a:	d1f4      	bne.n	8009066 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b3a      	cmp	r3, #58	@ 0x3a
 8009082:	d11c      	bne.n	80090be <get_ldnumber+0x76>
			tp = *path;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	60fa      	str	r2, [r7, #12]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	3b30      	subs	r3, #48	@ 0x30
 8009094:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2b09      	cmp	r3, #9
 800909a:	d80e      	bhi.n	80090ba <get_ldnumber+0x72>
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d10a      	bne.n	80090ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d107      	bne.n	80090ba <get_ldnumber+0x72>
					vol = (int)i;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	3301      	adds	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	e002      	b.n	80090c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80090be:	2300      	movs	r3, #0
 80090c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80090c2:	693b      	ldr	r3, [r7, #16]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	371c      	adds	r7, #28
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	70da      	strb	r2, [r3, #3]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7fe fc7a 	bl	80079e4 <move_window>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <check_fs+0x2a>
 80090f6:	2304      	movs	r3, #4
 80090f8:	e038      	b.n	800916c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3338      	adds	r3, #56	@ 0x38
 80090fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe f9be 	bl	8007484 <ld_word>
 8009108:	4603      	mov	r3, r0
 800910a:	461a      	mov	r2, r3
 800910c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009110:	429a      	cmp	r2, r3
 8009112:	d001      	beq.n	8009118 <check_fs+0x48>
 8009114:	2303      	movs	r3, #3
 8009116:	e029      	b.n	800916c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800911e:	2be9      	cmp	r3, #233	@ 0xe9
 8009120:	d009      	beq.n	8009136 <check_fs+0x66>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009128:	2beb      	cmp	r3, #235	@ 0xeb
 800912a:	d11e      	bne.n	800916a <check_fs+0x9a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8009132:	2b90      	cmp	r3, #144	@ 0x90
 8009134:	d119      	bne.n	800916a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3338      	adds	r3, #56	@ 0x38
 800913a:	3336      	adds	r3, #54	@ 0x36
 800913c:	4618      	mov	r0, r3
 800913e:	f7fe f9b9 	bl	80074b4 <ld_dword>
 8009142:	4603      	mov	r3, r0
 8009144:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009148:	4a0a      	ldr	r2, [pc, #40]	@ (8009174 <check_fs+0xa4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d101      	bne.n	8009152 <check_fs+0x82>
 800914e:	2300      	movs	r3, #0
 8009150:	e00c      	b.n	800916c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3338      	adds	r3, #56	@ 0x38
 8009156:	3352      	adds	r3, #82	@ 0x52
 8009158:	4618      	mov	r0, r3
 800915a:	f7fe f9ab 	bl	80074b4 <ld_dword>
 800915e:	4603      	mov	r3, r0
 8009160:	4a05      	ldr	r2, [pc, #20]	@ (8009178 <check_fs+0xa8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d101      	bne.n	800916a <check_fs+0x9a>
 8009166:	2300      	movs	r3, #0
 8009168:	e000      	b.n	800916c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800916a:	2302      	movs	r3, #2
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	00544146 	.word	0x00544146
 8009178:	33544146 	.word	0x33544146

0800917c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b096      	sub	sp, #88	@ 0x58
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7ff ff59 	bl	8009048 <get_ldnumber>
 8009196:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	da01      	bge.n	80091a2 <find_volume+0x26>
 800919e:	230b      	movs	r3, #11
 80091a0:	e265      	b.n	800966e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80091a2:	4a9f      	ldr	r2, [pc, #636]	@ (8009420 <find_volume+0x2a4>)
 80091a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <find_volume+0x3a>
 80091b2:	230c      	movs	r3, #12
 80091b4:	e25b      	b.n	800966e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	f023 0301 	bic.w	r3, r3, #1
 80091c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80091c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01a      	beq.n	8009202 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fe f8b7 	bl	8007344 <disk_status>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80091dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10c      	bne.n	8009202 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <find_volume+0x82>
 80091ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80091fa:	230a      	movs	r3, #10
 80091fc:	e237      	b.n	800966e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80091fe:	2300      	movs	r3, #0
 8009200:	e235      	b.n	800966e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920a:	b2da      	uxtb	r2, r3
 800920c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	4618      	mov	r0, r3
 8009216:	f7fe f8af 	bl	8007378 <disk_initialize>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009220:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800922c:	2303      	movs	r3, #3
 800922e:	e21e      	b.n	800966e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <find_volume+0xca>
 8009236:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800923a:	f003 0304 	and.w	r3, r3, #4
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009242:	230a      	movs	r3, #10
 8009244:	e213      	b.n	800966e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009248:	7858      	ldrb	r0, [r3, #1]
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	330c      	adds	r3, #12
 800924e:	461a      	mov	r2, r3
 8009250:	2102      	movs	r1, #2
 8009252:	f7fe f8f9 	bl	8007448 <disk_ioctl>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <find_volume+0xe4>
 800925c:	2301      	movs	r3, #1
 800925e:	e206      	b.n	800966e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009262:	899b      	ldrh	r3, [r3, #12]
 8009264:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009268:	d80d      	bhi.n	8009286 <find_volume+0x10a>
 800926a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926c:	899b      	ldrh	r3, [r3, #12]
 800926e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009272:	d308      	bcc.n	8009286 <find_volume+0x10a>
 8009274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009276:	899b      	ldrh	r3, [r3, #12]
 8009278:	461a      	mov	r2, r3
 800927a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927c:	899b      	ldrh	r3, [r3, #12]
 800927e:	3b01      	subs	r3, #1
 8009280:	4013      	ands	r3, r2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <find_volume+0x10e>
 8009286:	2301      	movs	r3, #1
 8009288:	e1f1      	b.n	800966e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800928e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009290:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009292:	f7ff ff1d 	bl	80090d0 <check_fs>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800929c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d149      	bne.n	8009338 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092a4:	2300      	movs	r3, #0
 80092a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a8:	e01e      	b.n	80092e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80092b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80092b8:	4413      	add	r3, r2
 80092ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80092bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092be:	3304      	adds	r3, #4
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d006      	beq.n	80092d4 <find_volume+0x158>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c8:	3308      	adds	r3, #8
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe f8f2 	bl	80074b4 <ld_dword>
 80092d0:	4602      	mov	r2, r0
 80092d2:	e000      	b.n	80092d6 <find_volume+0x15a>
 80092d4:	2200      	movs	r2, #0
 80092d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	3358      	adds	r3, #88	@ 0x58
 80092dc:	443b      	add	r3, r7
 80092de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80092e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e4:	3301      	adds	r3, #1
 80092e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80092e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	d9dd      	bls.n	80092aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80092ee:	2300      	movs	r3, #0
 80092f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80092f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <find_volume+0x182>
 80092f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092fa:	3b01      	subs	r3, #1
 80092fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80092fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	3358      	adds	r3, #88	@ 0x58
 8009304:	443b      	add	r3, r7
 8009306:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800930a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800930c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <find_volume+0x1a2>
 8009312:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009314:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009316:	f7ff fedb 	bl	80090d0 <check_fs>
 800931a:	4603      	mov	r3, r0
 800931c:	e000      	b.n	8009320 <find_volume+0x1a4>
 800931e:	2303      	movs	r3, #3
 8009320:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009324:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009328:	2b01      	cmp	r3, #1
 800932a:	d905      	bls.n	8009338 <find_volume+0x1bc>
 800932c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800932e:	3301      	adds	r3, #1
 8009330:	643b      	str	r3, [r7, #64]	@ 0x40
 8009332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009334:	2b03      	cmp	r3, #3
 8009336:	d9e2      	bls.n	80092fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009338:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800933c:	2b04      	cmp	r3, #4
 800933e:	d101      	bne.n	8009344 <find_volume+0x1c8>
 8009340:	2301      	movs	r3, #1
 8009342:	e194      	b.n	800966e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009344:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009348:	2b01      	cmp	r3, #1
 800934a:	d901      	bls.n	8009350 <find_volume+0x1d4>
 800934c:	230d      	movs	r3, #13
 800934e:	e18e      	b.n	800966e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009352:	3338      	adds	r3, #56	@ 0x38
 8009354:	330b      	adds	r3, #11
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe f894 	bl	8007484 <ld_word>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009362:	899b      	ldrh	r3, [r3, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d001      	beq.n	800936c <find_volume+0x1f0>
 8009368:	230d      	movs	r3, #13
 800936a:	e180      	b.n	800966e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	3338      	adds	r3, #56	@ 0x38
 8009370:	3316      	adds	r3, #22
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe f886 	bl	8007484 <ld_word>
 8009378:	4603      	mov	r3, r0
 800937a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800937c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d106      	bne.n	8009390 <find_volume+0x214>
 8009382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009384:	3338      	adds	r3, #56	@ 0x38
 8009386:	3324      	adds	r3, #36	@ 0x24
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe f893 	bl	80074b4 <ld_dword>
 800938e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009394:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	789b      	ldrb	r3, [r3, #2]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d005      	beq.n	80093b4 <find_volume+0x238>
 80093a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093aa:	789b      	ldrb	r3, [r3, #2]
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d001      	beq.n	80093b4 <find_volume+0x238>
 80093b0:	230d      	movs	r3, #13
 80093b2:	e15c      	b.n	800966e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80093b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b6:	789b      	ldrb	r3, [r3, #2]
 80093b8:	461a      	mov	r2, r3
 80093ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093bc:	fb02 f303 	mul.w	r3, r2, r3
 80093c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80093c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093c8:	461a      	mov	r2, r3
 80093ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	895b      	ldrh	r3, [r3, #10]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d008      	beq.n	80093e8 <find_volume+0x26c>
 80093d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d8:	895b      	ldrh	r3, [r3, #10]
 80093da:	461a      	mov	r2, r3
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	895b      	ldrh	r3, [r3, #10]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	4013      	ands	r3, r2
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <find_volume+0x270>
 80093e8:	230d      	movs	r3, #13
 80093ea:	e140      	b.n	800966e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80093ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ee:	3338      	adds	r3, #56	@ 0x38
 80093f0:	3311      	adds	r3, #17
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe f846 	bl	8007484 <ld_word>
 80093f8:	4603      	mov	r3, r0
 80093fa:	461a      	mov	r2, r3
 80093fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	891b      	ldrh	r3, [r3, #8]
 8009404:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009406:	8992      	ldrh	r2, [r2, #12]
 8009408:	0952      	lsrs	r2, r2, #5
 800940a:	b292      	uxth	r2, r2
 800940c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009410:	fb01 f202 	mul.w	r2, r1, r2
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <find_volume+0x2a8>
 800941c:	230d      	movs	r3, #13
 800941e:	e126      	b.n	800966e <find_volume+0x4f2>
 8009420:	20000b14 	.word	0x20000b14

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009426:	3338      	adds	r3, #56	@ 0x38
 8009428:	3313      	adds	r3, #19
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe f82a 	bl	8007484 <ld_word>
 8009430:	4603      	mov	r3, r0
 8009432:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009436:	2b00      	cmp	r3, #0
 8009438:	d106      	bne.n	8009448 <find_volume+0x2cc>
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	3338      	adds	r3, #56	@ 0x38
 800943e:	3320      	adds	r3, #32
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe f837 	bl	80074b4 <ld_dword>
 8009446:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944a:	3338      	adds	r3, #56	@ 0x38
 800944c:	330e      	adds	r3, #14
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe f818 	bl	8007484 <ld_word>
 8009454:	4603      	mov	r3, r0
 8009456:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009458:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <find_volume+0x2e6>
 800945e:	230d      	movs	r3, #13
 8009460:	e105      	b.n	800966e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009462:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009466:	4413      	add	r3, r2
 8009468:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800946a:	8911      	ldrh	r1, [r2, #8]
 800946c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800946e:	8992      	ldrh	r2, [r2, #12]
 8009470:	0952      	lsrs	r2, r2, #5
 8009472:	b292      	uxth	r2, r2
 8009474:	fbb1 f2f2 	udiv	r2, r1, r2
 8009478:	b292      	uxth	r2, r2
 800947a:	4413      	add	r3, r2
 800947c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800947e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009482:	429a      	cmp	r2, r3
 8009484:	d201      	bcs.n	800948a <find_volume+0x30e>
 8009486:	230d      	movs	r3, #13
 8009488:	e0f1      	b.n	800966e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800948a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800948c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009492:	8952      	ldrh	r2, [r2, #10]
 8009494:	fbb3 f3f2 	udiv	r3, r3, r2
 8009498:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800949a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	d101      	bne.n	80094a4 <find_volume+0x328>
 80094a0:	230d      	movs	r3, #13
 80094a2:	e0e4      	b.n	800966e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80094a4:	2303      	movs	r3, #3
 80094a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d802      	bhi.n	80094ba <find_volume+0x33e>
 80094b4:	2302      	movs	r3, #2
 80094b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094bc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d802      	bhi.n	80094ca <find_volume+0x34e>
 80094c4:	2301      	movs	r3, #1
 80094c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	1c9a      	adds	r2, r3, #2
 80094ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094d6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80094d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80094da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094dc:	441a      	add	r2, r3
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80094e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	441a      	add	r2, r3
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80094ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d11e      	bne.n	8009532 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	3338      	adds	r3, #56	@ 0x38
 80094f8:	332a      	adds	r3, #42	@ 0x2a
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd ffc2 	bl	8007484 <ld_word>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <find_volume+0x38e>
 8009506:	230d      	movs	r3, #13
 8009508:	e0b1      	b.n	800966e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800950a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950c:	891b      	ldrh	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <find_volume+0x39a>
 8009512:	230d      	movs	r3, #13
 8009514:	e0ab      	b.n	800966e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009518:	3338      	adds	r3, #56	@ 0x38
 800951a:	332c      	adds	r3, #44	@ 0x2c
 800951c:	4618      	mov	r0, r3
 800951e:	f7fd ffc9 	bl	80074b4 <ld_dword>
 8009522:	4602      	mov	r2, r0
 8009524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009526:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952a:	69db      	ldr	r3, [r3, #28]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009530:	e01f      	b.n	8009572 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009534:	891b      	ldrh	r3, [r3, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <find_volume+0x3c2>
 800953a:	230d      	movs	r3, #13
 800953c:	e097      	b.n	800966e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800953e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009544:	441a      	add	r2, r3
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800954a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800954e:	2b02      	cmp	r3, #2
 8009550:	d103      	bne.n	800955a <find_volume+0x3de>
 8009552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	005b      	lsls	r3, r3, #1
 8009558:	e00a      	b.n	8009570 <find_volume+0x3f4>
 800955a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800955c:	69da      	ldr	r2, [r3, #28]
 800955e:	4613      	mov	r3, r2
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	4413      	add	r3, r2
 8009564:	085a      	lsrs	r2, r3, #1
 8009566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009570:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009574:	6a1a      	ldr	r2, [r3, #32]
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	899b      	ldrh	r3, [r3, #12]
 800957a:	4619      	mov	r1, r3
 800957c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800957e:	440b      	add	r3, r1
 8009580:	3b01      	subs	r3, #1
 8009582:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009584:	8989      	ldrh	r1, [r1, #12]
 8009586:	fbb3 f3f1 	udiv	r3, r3, r1
 800958a:	429a      	cmp	r2, r3
 800958c:	d201      	bcs.n	8009592 <find_volume+0x416>
 800958e:	230d      	movs	r3, #13
 8009590:	e06d      	b.n	800966e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	619a      	str	r2, [r3, #24]
 800959a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	2280      	movs	r2, #128	@ 0x80
 80095a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80095a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d149      	bne.n	8009644 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80095b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b2:	3338      	adds	r3, #56	@ 0x38
 80095b4:	3330      	adds	r3, #48	@ 0x30
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fd ff64 	bl	8007484 <ld_word>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d140      	bne.n	8009644 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80095c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095c4:	3301      	adds	r3, #1
 80095c6:	4619      	mov	r1, r3
 80095c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80095ca:	f7fe fa0b 	bl	80079e4 <move_window>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d137      	bne.n	8009644 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	2200      	movs	r2, #0
 80095d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	3338      	adds	r3, #56	@ 0x38
 80095de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fd ff4e 	bl	8007484 <ld_word>
 80095e8:	4603      	mov	r3, r0
 80095ea:	461a      	mov	r2, r3
 80095ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d127      	bne.n	8009644 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	3338      	adds	r3, #56	@ 0x38
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fd ff5b 	bl	80074b4 <ld_dword>
 80095fe:	4603      	mov	r3, r0
 8009600:	4a1d      	ldr	r2, [pc, #116]	@ (8009678 <find_volume+0x4fc>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d11e      	bne.n	8009644 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009608:	3338      	adds	r3, #56	@ 0x38
 800960a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800960e:	4618      	mov	r0, r3
 8009610:	f7fd ff50 	bl	80074b4 <ld_dword>
 8009614:	4603      	mov	r3, r0
 8009616:	4a19      	ldr	r2, [pc, #100]	@ (800967c <find_volume+0x500>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d113      	bne.n	8009644 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961e:	3338      	adds	r3, #56	@ 0x38
 8009620:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd ff45 	bl	80074b4 <ld_dword>
 800962a:	4602      	mov	r2, r0
 800962c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009632:	3338      	adds	r3, #56	@ 0x38
 8009634:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009638:	4618      	mov	r0, r3
 800963a:	f7fd ff3b 	bl	80074b4 <ld_dword>
 800963e:	4602      	mov	r2, r0
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800964a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800964c:	4b0c      	ldr	r3, [pc, #48]	@ (8009680 <find_volume+0x504>)
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	4b0a      	ldr	r3, [pc, #40]	@ (8009680 <find_volume+0x504>)
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	4b09      	ldr	r3, [pc, #36]	@ (8009680 <find_volume+0x504>)
 800965a:	881a      	ldrh	r2, [r3, #0]
 800965c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	4a08      	ldr	r2, [pc, #32]	@ (8009684 <find_volume+0x508>)
 8009664:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009666:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009668:	f7fe f954 	bl	8007914 <clear_lock>
#endif
	return FR_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3758      	adds	r7, #88	@ 0x58
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	41615252 	.word	0x41615252
 800967c:	61417272 	.word	0x61417272
 8009680:	20000b18 	.word	0x20000b18
 8009684:	20000b3c 	.word	0x20000b3c

08009688 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009692:	2309      	movs	r3, #9
 8009694:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01c      	beq.n	80096d6 <validate+0x4e>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d018      	beq.n	80096d6 <validate+0x4e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d013      	beq.n	80096d6 <validate+0x4e>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	889a      	ldrh	r2, [r3, #4]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	88db      	ldrh	r3, [r3, #6]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d10c      	bne.n	80096d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fd fe3e 	bl	8007344 <disk_status>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <validate+0x4e>
			res = FR_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <validate+0x5a>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	e000      	b.n	80096e4 <validate+0x5c>
 80096e2:	2300      	movs	r3, #0
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	6013      	str	r3, [r2, #0]
	return res;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b088      	sub	sp, #32
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009706:	f107 0310 	add.w	r3, r7, #16
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fc9c 	bl	8009048 <get_ldnumber>
 8009710:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da01      	bge.n	800971c <f_mount+0x28>
 8009718:	230b      	movs	r3, #11
 800971a:	e02b      	b.n	8009774 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800971c:	4a17      	ldr	r2, [pc, #92]	@ (800977c <f_mount+0x88>)
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009724:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009726:	69bb      	ldr	r3, [r7, #24]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d005      	beq.n	8009738 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800972c:	69b8      	ldr	r0, [r7, #24]
 800972e:	f7fe f8f1 	bl	8007914 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	490d      	ldr	r1, [pc, #52]	@ (800977c <f_mount+0x88>)
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <f_mount+0x66>
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d001      	beq.n	800975e <f_mount+0x6a>
 800975a:	2300      	movs	r3, #0
 800975c:	e00a      	b.n	8009774 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800975e:	f107 010c 	add.w	r1, r7, #12
 8009762:	f107 0308 	add.w	r3, r7, #8
 8009766:	2200      	movs	r2, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff fd07 	bl	800917c <find_volume>
 800976e:	4603      	mov	r3, r0
 8009770:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009772:	7dfb      	ldrb	r3, [r7, #23]
}
 8009774:	4618      	mov	r0, r3
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000b14 	.word	0x20000b14

08009780 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b09a      	sub	sp, #104	@ 0x68
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <f_open+0x18>
 8009794:	2309      	movs	r3, #9
 8009796:	e1b7      	b.n	8009b08 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009798:	79fb      	ldrb	r3, [r7, #7]
 800979a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800979e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80097a0:	79fa      	ldrb	r2, [r7, #7]
 80097a2:	f107 0114 	add.w	r1, r7, #20
 80097a6:	f107 0308 	add.w	r3, r7, #8
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fce6 	bl	800917c <find_volume>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80097b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f040 819b 	bne.w	8009af6 <f_open+0x376>
		dj.obj.fs = fs;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	f107 0318 	add.w	r3, r7, #24
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fbc5 	bl	8008f5c <follow_path>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80097d8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d118      	bne.n	8009812 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80097e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	da03      	bge.n	80097f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80097ea:	2306      	movs	r3, #6
 80097ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80097f0:	e00f      	b.n	8009812 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	bf8c      	ite	hi
 80097f8:	2301      	movhi	r3, #1
 80097fa:	2300      	movls	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	f107 0318 	add.w	r3, r7, #24
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd ff3c 	bl	8007684 <chk_lock>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	f003 031c 	and.w	r3, r3, #28
 8009818:	2b00      	cmp	r3, #0
 800981a:	d07f      	beq.n	800991c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800981c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009820:	2b00      	cmp	r3, #0
 8009822:	d017      	beq.n	8009854 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009824:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009828:	2b04      	cmp	r3, #4
 800982a:	d10e      	bne.n	800984a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800982c:	f7fd ff86 	bl	800773c <enq_lock>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d006      	beq.n	8009844 <f_open+0xc4>
 8009836:	f107 0318 	add.w	r3, r7, #24
 800983a:	4618      	mov	r0, r3
 800983c:	f7ff f8de 	bl	80089fc <dir_register>
 8009840:	4603      	mov	r3, r0
 8009842:	e000      	b.n	8009846 <f_open+0xc6>
 8009844:	2312      	movs	r3, #18
 8009846:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	f043 0308 	orr.w	r3, r3, #8
 8009850:	71fb      	strb	r3, [r7, #7]
 8009852:	e010      	b.n	8009876 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009854:	7fbb      	ldrb	r3, [r7, #30]
 8009856:	f003 0311 	and.w	r3, r3, #17
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <f_open+0xe6>
					res = FR_DENIED;
 800985e:	2307      	movs	r3, #7
 8009860:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009864:	e007      	b.n	8009876 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009866:	79fb      	ldrb	r3, [r7, #7]
 8009868:	f003 0304 	and.w	r3, r3, #4
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <f_open+0xf6>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009876:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800987a:	2b00      	cmp	r3, #0
 800987c:	d168      	bne.n	8009950 <f_open+0x1d0>
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d063      	beq.n	8009950 <f_open+0x1d0>
				dw = GET_FATTIME();
 8009888:	f7fd fcfe 	bl	8007288 <get_fattime>
 800988c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800988e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009890:	330e      	adds	r3, #14
 8009892:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009894:	4618      	mov	r0, r3
 8009896:	f7fd fe4b 	bl	8007530 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	3316      	adds	r3, #22
 800989e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fd fe45 	bl	8007530 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	330b      	adds	r3, #11
 80098aa:	2220      	movs	r2, #32
 80098ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fe1a 	bl	80084ee <ld_clust>
 80098ba:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80098c0:	2200      	movs	r2, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fe32 	bl	800852c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80098c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ca:	331c      	adds	r3, #28
 80098cc:	2100      	movs	r1, #0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd fe2e 	bl	8007530 <st_dword>
					fs->wflag = 1;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	2201      	movs	r2, #1
 80098d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80098da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d037      	beq.n	8009950 <f_open+0x1d0>
						dw = fs->winsect;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80098e6:	f107 0318 	add.w	r3, r7, #24
 80098ea:	2200      	movs	r2, #0
 80098ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fb22 	bl	8007f38 <remove_chain>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80098fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d126      	bne.n	8009950 <f_open+0x1d0>
							res = move_window(fs, dw);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe f86c 	bl	80079e4 <move_window>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009916:	3a01      	subs	r2, #1
 8009918:	615a      	str	r2, [r3, #20]
 800991a:	e019      	b.n	8009950 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800991c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009920:	2b00      	cmp	r3, #0
 8009922:	d115      	bne.n	8009950 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009924:	7fbb      	ldrb	r3, [r7, #30]
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <f_open+0x1b6>
					res = FR_NO_FILE;
 800992e:	2304      	movs	r3, #4
 8009930:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009934:	e00c      	b.n	8009950 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d007      	beq.n	8009950 <f_open+0x1d0>
 8009940:	7fbb      	ldrb	r3, [r7, #30]
 8009942:	f003 0301 	and.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <f_open+0x1d0>
						res = FR_DENIED;
 800994a:	2307      	movs	r3, #7
 800994c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009950:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009954:	2b00      	cmp	r3, #0
 8009956:	d126      	bne.n	80099a6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009958:	79fb      	ldrb	r3, [r7, #7]
 800995a:	f003 0308 	and.w	r3, r3, #8
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009968:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009972:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b01      	cmp	r3, #1
 800997c:	bf8c      	ite	hi
 800997e:	2301      	movhi	r3, #1
 8009980:	2300      	movls	r3, #0
 8009982:	b2db      	uxtb	r3, r3
 8009984:	461a      	mov	r2, r3
 8009986:	f107 0318 	add.w	r3, r7, #24
 800998a:	4611      	mov	r1, r2
 800998c:	4618      	mov	r0, r3
 800998e:	f7fd fef7 	bl	8007780 <inc_lock>
 8009992:	4602      	mov	r2, r0
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d102      	bne.n	80099a6 <f_open+0x226>
 80099a0:	2302      	movs	r3, #2
 80099a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80099a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f040 80a3 	bne.w	8009af6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099b4:	4611      	mov	r1, r2
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7fe fd99 	bl	80084ee <ld_clust>
 80099bc:	4602      	mov	r2, r0
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	331c      	adds	r3, #28
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fd fd74 	bl	80074b4 <ld_dword>
 80099cc:	4602      	mov	r2, r0
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	88da      	ldrh	r2, [r3, #6]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	79fa      	ldrb	r2, [r7, #7]
 80099ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3330      	adds	r3, #48	@ 0x30
 8009a02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009a06:	2100      	movs	r1, #0
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fd fdde 	bl	80075ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009a0e:	79fb      	ldrb	r3, [r7, #7]
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d06e      	beq.n	8009af6 <f_open+0x376>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d06a      	beq.n	8009af6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	895b      	ldrh	r3, [r3, #10]
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	899b      	ldrh	r3, [r3, #12]
 8009a32:	fb02 f303 	mul.w	r3, r2, r3
 8009a36:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a44:	e016      	b.n	8009a74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fe f887 	bl	8007b5e <get_fat>
 8009a50:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d802      	bhi.n	8009a5e <f_open+0x2de>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a64:	d102      	bne.n	8009a6c <f_open+0x2ec>
 8009a66:	2301      	movs	r3, #1
 8009a68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009a6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d103      	bne.n	8009a84 <f_open+0x304>
 8009a7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d8e0      	bhi.n	8009a46 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009a88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009a8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d131      	bne.n	8009af6 <f_open+0x376>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	899b      	ldrh	r3, [r3, #12]
 8009a96:	461a      	mov	r2, r3
 8009a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a9e:	fb01 f202 	mul.w	r2, r1, r2
 8009aa2:	1a9b      	subs	r3, r3, r2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d026      	beq.n	8009af6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe f837 	bl	8007b20 <clust2sect>
 8009ab2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d103      	bne.n	8009ac2 <f_open+0x342>
						res = FR_INT_ERR;
 8009aba:	2302      	movs	r3, #2
 8009abc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009ac0:	e019      	b.n	8009af6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	899b      	ldrh	r3, [r3, #12]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad0:	441a      	add	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	7858      	ldrb	r0, [r3, #1]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6a1a      	ldr	r2, [r3, #32]
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f7fd fc6f 	bl	80073c8 <disk_read>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <f_open+0x376>
 8009af0:	2301      	movs	r3, #1
 8009af2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009af6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <f_open+0x384>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009b04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3768      	adds	r7, #104	@ 0x68
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08c      	sub	sp, #48	@ 0x30
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f107 0210 	add.w	r2, r7, #16
 8009b2e:	4611      	mov	r1, r2
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff fda9 	bl	8009688 <validate>
 8009b36:	4603      	mov	r3, r0
 8009b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d107      	bne.n	8009b54 <f_write+0x44>
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	7d5b      	ldrb	r3, [r3, #21]
 8009b48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <f_write+0x4a>
 8009b54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b58:	e16a      	b.n	8009e30 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	7d1b      	ldrb	r3, [r3, #20]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <f_write+0x5a>
 8009b66:	2307      	movs	r3, #7
 8009b68:	e162      	b.n	8009e30 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	441a      	add	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	f080 814c 	bcs.w	8009e14 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	43db      	mvns	r3, r3
 8009b82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009b84:	e146      	b.n	8009e14 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	8992      	ldrh	r2, [r2, #12]
 8009b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b92:	fb01 f202 	mul.w	r2, r1, r2
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f040 80f1 	bne.w	8009d80 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	8992      	ldrh	r2, [r2, #12]
 8009ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	8952      	ldrh	r2, [r2, #10]
 8009bae:	3a01      	subs	r2, #1
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d143      	bne.n	8009c42 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10c      	bne.n	8009bdc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d11a      	bne.n	8009c04 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fa15 	bl	8008002 <create_chain>
 8009bd8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009bda:	e013      	b.n	8009c04 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d007      	beq.n	8009bf4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	4619      	mov	r1, r3
 8009bea:	68f8      	ldr	r0, [r7, #12]
 8009bec:	f7fe faa1 	bl	8008132 <clmt_clust>
 8009bf0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009bf2:	e007      	b.n	8009c04 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f7fe fa00 	bl	8008002 <create_chain>
 8009c02:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 8109 	beq.w	8009e1e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d104      	bne.n	8009c1c <f_write+0x10c>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2202      	movs	r2, #2
 8009c16:	755a      	strb	r2, [r3, #21]
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e109      	b.n	8009e30 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d104      	bne.n	8009c2e <f_write+0x11e>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2201      	movs	r2, #1
 8009c28:	755a      	strb	r2, [r3, #21]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e100      	b.n	8009e30 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c32:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <f_write+0x132>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	7d1b      	ldrb	r3, [r3, #20]
 8009c46:	b25b      	sxtb	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	da18      	bge.n	8009c7e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	7858      	ldrb	r0, [r3, #1]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a1a      	ldr	r2, [r3, #32]
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f7fd fbd4 	bl	8007408 <disk_write>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <f_write+0x160>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	755a      	strb	r2, [r3, #21]
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e0df      	b.n	8009e30 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	7d1b      	ldrb	r3, [r3, #20]
 8009c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	69db      	ldr	r3, [r3, #28]
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fd ff4a 	bl	8007b20 <clust2sect>
 8009c8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <f_write+0x18e>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2202      	movs	r2, #2
 8009c98:	755a      	strb	r2, [r3, #21]
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	e0c8      	b.n	8009e30 <f_write+0x320>
			sect += csect;
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	899b      	ldrh	r3, [r3, #12]
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cb2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d043      	beq.n	8009d42 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	8952      	ldrh	r2, [r2, #10]
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d905      	bls.n	8009cd4 <f_write+0x1c4>
					cc = fs->csize - csect;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	895b      	ldrh	r3, [r3, #10]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	7858      	ldrb	r0, [r3, #1]
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	f7fd fb93 	bl	8007408 <disk_write>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <f_write+0x1e2>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2201      	movs	r2, #1
 8009cec:	755a      	strb	r2, [r3, #21]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e09e      	b.n	8009e30 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a1a      	ldr	r2, [r3, #32]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	6a3a      	ldr	r2, [r7, #32]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d918      	bls.n	8009d32 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a1a      	ldr	r2, [r3, #32]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	8992      	ldrh	r2, [r2, #12]
 8009d12:	fb02 f303 	mul.w	r3, r2, r3
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	18d1      	adds	r1, r2, r3
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	899b      	ldrh	r3, [r3, #12]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f7fd fc32 	bl	8007588 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	7d1b      	ldrb	r3, [r3, #20]
 8009d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	899b      	ldrh	r3, [r3, #12]
 8009d36:	461a      	mov	r2, r3
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	fb02 f303 	mul.w	r3, r2, r3
 8009d3e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009d40:	e04b      	b.n	8009dda <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d016      	beq.n	8009d7a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	699a      	ldr	r2, [r3, #24]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d210      	bcs.n	8009d7a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	7858      	ldrb	r0, [r3, #1]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d62:	2301      	movs	r3, #1
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	f7fd fb2f 	bl	80073c8 <disk_read>
 8009d6a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2201      	movs	r2, #1
 8009d74:	755a      	strb	r2, [r3, #21]
 8009d76:	2301      	movs	r3, #1
 8009d78:	e05a      	b.n	8009e30 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	899b      	ldrh	r3, [r3, #12]
 8009d84:	4618      	mov	r0, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	699b      	ldr	r3, [r3, #24]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	8992      	ldrh	r2, [r2, #12]
 8009d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d92:	fb01 f202 	mul.w	r2, r1, r2
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	1ac3      	subs	r3, r0, r3
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d901      	bls.n	8009da8 <f_write+0x298>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	699b      	ldr	r3, [r3, #24]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	8992      	ldrh	r2, [r2, #12]
 8009db6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009dba:	fb00 f202 	mul.w	r2, r0, r2
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dc4:	69f9      	ldr	r1, [r7, #28]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fd fbde 	bl	8007588 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	7d1b      	ldrb	r3, [r3, #20]
 8009dd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dde:	4413      	add	r3, r2
 8009de0:	61fb      	str	r3, [r7, #28]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de8:	441a      	add	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	619a      	str	r2, [r3, #24]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68da      	ldr	r2, [r3, #12]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	bf38      	it	cc
 8009dfa:	461a      	movcc	r2, r3
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	60da      	str	r2, [r3, #12]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e06:	441a      	add	r2, r3
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f47f aeb5 	bne.w	8009b86 <f_write+0x76>
 8009e1c:	e000      	b.n	8009e20 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009e1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	7d1b      	ldrb	r3, [r3, #20]
 8009e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3730      	adds	r7, #48	@ 0x30
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f107 0208 	add.w	r2, r7, #8
 8009e46:	4611      	mov	r1, r2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff fc1d 	bl	8009688 <validate>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d168      	bne.n	8009f2a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7d1b      	ldrb	r3, [r3, #20]
 8009e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d062      	beq.n	8009f2a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	7d1b      	ldrb	r3, [r3, #20]
 8009e68:	b25b      	sxtb	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da15      	bge.n	8009e9a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	7858      	ldrb	r0, [r3, #1]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a1a      	ldr	r2, [r3, #32]
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f7fd fac3 	bl	8007408 <disk_write>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <f_sync+0x54>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e04f      	b.n	8009f2c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7d1b      	ldrb	r3, [r3, #20]
 8009e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009e9a:	f7fd f9f5 	bl	8007288 <get_fattime>
 8009e9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f7fd fd9b 	bl	80079e4 <move_window>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d138      	bne.n	8009f2a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	330b      	adds	r3, #11
 8009ec2:	781a      	ldrb	r2, [r3, #0]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	330b      	adds	r3, #11
 8009ec8:	f042 0220 	orr.w	r2, r2, #32
 8009ecc:	b2d2      	uxtb	r2, r2
 8009ece:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	f7fe fb26 	bl	800852c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f103 021c 	add.w	r2, r3, #28
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7fd fb1f 	bl	8007530 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3316      	adds	r3, #22
 8009ef6:	6939      	ldr	r1, [r7, #16]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fd fb19 	bl	8007530 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3312      	adds	r3, #18
 8009f02:	2100      	movs	r1, #0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fd faf8 	bl	80074fa <st_word>
					fs->wflag = 1;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fd94 	bl	8007a40 <sync_fs>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	7d1b      	ldrb	r3, [r3, #20]
 8009f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3718      	adds	r7, #24
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff ff7b 	bl	8009e38 <f_sync>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d118      	bne.n	8009f7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f107 0208 	add.w	r2, r7, #8
 8009f52:	4611      	mov	r1, r2
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff fb97 	bl	8009688 <validate>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10c      	bne.n	8009f7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fd fc97 	bl	800789c <dec_lock>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d102      	bne.n	8009f7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009f94:	78fb      	ldrb	r3, [r7, #3]
 8009f96:	2b0a      	cmp	r3, #10
 8009f98:	d103      	bne.n	8009fa2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009f9a:	210d      	movs	r1, #13
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fff3 	bl	8009f88 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	db25      	blt.n	8009ffa <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	60fa      	str	r2, [r7, #12]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2b3c      	cmp	r3, #60	@ 0x3c
 8009fc0:	dd12      	ble.n	8009fe8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f103 010c 	add.w	r1, r3, #12
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	f107 0308 	add.w	r3, r7, #8
 8009fd2:	f7ff fd9d 	bl	8009b10 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d101      	bne.n	8009fe2 <putc_bfd+0x5a>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e001      	b.n	8009fe6 <putc_bfd+0x5e>
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	1c5a      	adds	r2, r3, #1
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	609a      	str	r2, [r3, #8]
 8009ff8:	e000      	b.n	8009ffc <putc_bfd+0x74>
	if (i < 0) return;
 8009ffa:	bf00      	nop
}
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	db16      	blt.n	800a040 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f103 010c 	add.w	r1, r3, #12
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	461a      	mov	r2, r3
 800a022:	f107 030c 	add.w	r3, r7, #12
 800a026:	f7ff fd73 	bl	8009b10 <f_write>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d107      	bne.n	800a040 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	4293      	cmp	r3, r2
 800a038:	d102      	bne.n	800a040 <putc_flush+0x3e>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	e001      	b.n	800a044 <putc_flush+0x42>
	return EOF;
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	605a      	str	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	609a      	str	r2, [r3, #8]
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b096      	sub	sp, #88	@ 0x58
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800a080:	f107 030c 	add.w	r3, r7, #12
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff ffe0 	bl	800a04c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800a08c:	e009      	b.n	800a0a2 <f_puts+0x2c>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	781a      	ldrb	r2, [r3, #0]
 800a096:	f107 030c 	add.w	r3, r7, #12
 800a09a:	4611      	mov	r1, r2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff ff73 	bl	8009f88 <putc_bfd>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1f1      	bne.n	800a08e <f_puts+0x18>
	return putc_flush(&pb);
 800a0aa:	f107 030c 	add.w	r3, r7, #12
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff ffa7 	bl	800a002 <putc_flush>
 800a0b4:	4603      	mov	r3, r0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3758      	adds	r7, #88	@ 0x58
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0d8:	7a5b      	ldrb	r3, [r3, #9]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d131      	bne.n	800a144 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0e2:	7a5b      	ldrb	r3, [r3, #9]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a0ee:	4b19      	ldr	r3, [pc, #100]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0f0:	7a5b      	ldrb	r3, [r3, #9]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	4a17      	ldr	r2, [pc, #92]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a0fe:	4b15      	ldr	r3, [pc, #84]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a100:	7a5b      	ldrb	r3, [r3, #9]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	461a      	mov	r2, r3
 800a106:	4b13      	ldr	r3, [pc, #76]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a108:	4413      	add	r3, r2
 800a10a:	79fa      	ldrb	r2, [r7, #7]
 800a10c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a10e:	4b11      	ldr	r3, [pc, #68]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a110:	7a5b      	ldrb	r3, [r3, #9]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	b2d1      	uxtb	r1, r2
 800a118:	4a0e      	ldr	r2, [pc, #56]	@ (800a154 <FATFS_LinkDriverEx+0x94>)
 800a11a:	7251      	strb	r1, [r2, #9]
 800a11c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a11e:	7dbb      	ldrb	r3, [r7, #22]
 800a120:	3330      	adds	r3, #48	@ 0x30
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	3301      	adds	r3, #1
 800a12c:	223a      	movs	r2, #58	@ 0x3a
 800a12e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	3302      	adds	r3, #2
 800a134:	222f      	movs	r2, #47	@ 0x2f
 800a136:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	3303      	adds	r3, #3
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
}
 800a146:	4618      	mov	r0, r3
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000d3c 	.word	0x20000d3c

0800a158 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a162:	2200      	movs	r2, #0
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff ffaa 	bl	800a0c0 <FATFS_LinkDriverEx>
 800a16c:	4603      	mov	r3, r0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	6039      	str	r1, [r7, #0]
 800a182:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a184:	88fb      	ldrh	r3, [r7, #6]
 800a186:	2b7f      	cmp	r3, #127	@ 0x7f
 800a188:	d802      	bhi.n	800a190 <ff_convert+0x18>
		c = chr;
 800a18a:	88fb      	ldrh	r3, [r7, #6]
 800a18c:	81fb      	strh	r3, [r7, #14]
 800a18e:	e025      	b.n	800a1dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00b      	beq.n	800a1ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2bff      	cmp	r3, #255	@ 0xff
 800a19a:	d805      	bhi.n	800a1a8 <ff_convert+0x30>
 800a19c:	88fb      	ldrh	r3, [r7, #6]
 800a19e:	3b80      	subs	r3, #128	@ 0x80
 800a1a0:	4a12      	ldr	r2, [pc, #72]	@ (800a1ec <ff_convert+0x74>)
 800a1a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1a6:	e000      	b.n	800a1aa <ff_convert+0x32>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	81fb      	strh	r3, [r7, #14]
 800a1ac:	e016      	b.n	800a1dc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	81fb      	strh	r3, [r7, #14]
 800a1b2:	e009      	b.n	800a1c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a1b4:	89fb      	ldrh	r3, [r7, #14]
 800a1b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a1ec <ff_convert+0x74>)
 800a1b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1bc:	88fa      	ldrh	r2, [r7, #6]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d006      	beq.n	800a1d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a1c2:	89fb      	ldrh	r3, [r7, #14]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	81fb      	strh	r3, [r7, #14]
 800a1c8:	89fb      	ldrh	r3, [r7, #14]
 800a1ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1cc:	d9f2      	bls.n	800a1b4 <ff_convert+0x3c>
 800a1ce:	e000      	b.n	800a1d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a1d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a1d2:	89fb      	ldrh	r3, [r7, #14]
 800a1d4:	3380      	adds	r3, #128	@ 0x80
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a1dc:	89fb      	ldrh	r3, [r7, #14]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	080108ec 	.word	0x080108ec

0800a1f0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b087      	sub	sp, #28
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a1fa:	88fb      	ldrh	r3, [r7, #6]
 800a1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a200:	d201      	bcs.n	800a206 <ff_wtoupper+0x16>
 800a202:	4b3e      	ldr	r3, [pc, #248]	@ (800a2fc <ff_wtoupper+0x10c>)
 800a204:	e000      	b.n	800a208 <ff_wtoupper+0x18>
 800a206:	4b3e      	ldr	r3, [pc, #248]	@ (800a300 <ff_wtoupper+0x110>)
 800a208:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	1c9a      	adds	r2, r3, #2
 800a20e:	617a      	str	r2, [r7, #20]
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a214:	8a7b      	ldrh	r3, [r7, #18]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d068      	beq.n	800a2ec <ff_wtoupper+0xfc>
 800a21a:	88fa      	ldrh	r2, [r7, #6]
 800a21c:	8a7b      	ldrh	r3, [r7, #18]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d364      	bcc.n	800a2ec <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	1c9a      	adds	r2, r3, #2
 800a226:	617a      	str	r2, [r7, #20]
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	823b      	strh	r3, [r7, #16]
 800a22c:	8a3b      	ldrh	r3, [r7, #16]
 800a22e:	0a1b      	lsrs	r3, r3, #8
 800a230:	81fb      	strh	r3, [r7, #14]
 800a232:	8a3b      	ldrh	r3, [r7, #16]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a238:	88fa      	ldrh	r2, [r7, #6]
 800a23a:	8a79      	ldrh	r1, [r7, #18]
 800a23c:	8a3b      	ldrh	r3, [r7, #16]
 800a23e:	440b      	add	r3, r1
 800a240:	429a      	cmp	r2, r3
 800a242:	da49      	bge.n	800a2d8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a244:	89fb      	ldrh	r3, [r7, #14]
 800a246:	2b08      	cmp	r3, #8
 800a248:	d84f      	bhi.n	800a2ea <ff_wtoupper+0xfa>
 800a24a:	a201      	add	r2, pc, #4	@ (adr r2, 800a250 <ff_wtoupper+0x60>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a275 	.word	0x0800a275
 800a254:	0800a287 	.word	0x0800a287
 800a258:	0800a29d 	.word	0x0800a29d
 800a25c:	0800a2a5 	.word	0x0800a2a5
 800a260:	0800a2ad 	.word	0x0800a2ad
 800a264:	0800a2b5 	.word	0x0800a2b5
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a2c5 	.word	0x0800a2c5
 800a270:	0800a2cd 	.word	0x0800a2cd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a274:	88fa      	ldrh	r2, [r7, #6]
 800a276:	8a7b      	ldrh	r3, [r7, #18]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	005b      	lsls	r3, r3, #1
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4413      	add	r3, r2
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	80fb      	strh	r3, [r7, #6]
 800a284:	e027      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a286:	88fa      	ldrh	r2, [r7, #6]
 800a288:	8a7b      	ldrh	r3, [r7, #18]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	b29b      	uxth	r3, r3
 800a294:	88fa      	ldrh	r2, [r7, #6]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	80fb      	strh	r3, [r7, #6]
 800a29a:	e01c      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a29c:	88fb      	ldrh	r3, [r7, #6]
 800a29e:	3b10      	subs	r3, #16
 800a2a0:	80fb      	strh	r3, [r7, #6]
 800a2a2:	e018      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a2a4:	88fb      	ldrh	r3, [r7, #6]
 800a2a6:	3b20      	subs	r3, #32
 800a2a8:	80fb      	strh	r3, [r7, #6]
 800a2aa:	e014      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	3b30      	subs	r3, #48	@ 0x30
 800a2b0:	80fb      	strh	r3, [r7, #6]
 800a2b2:	e010      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a2b4:	88fb      	ldrh	r3, [r7, #6]
 800a2b6:	3b1a      	subs	r3, #26
 800a2b8:	80fb      	strh	r3, [r7, #6]
 800a2ba:	e00c      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	3308      	adds	r3, #8
 800a2c0:	80fb      	strh	r3, [r7, #6]
 800a2c2:	e008      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	3b50      	subs	r3, #80	@ 0x50
 800a2c8:	80fb      	strh	r3, [r7, #6]
 800a2ca:	e004      	b.n	800a2d6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a2d2:	80fb      	strh	r3, [r7, #6]
 800a2d4:	bf00      	nop
			}
			break;
 800a2d6:	e008      	b.n	800a2ea <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a2d8:	89fb      	ldrh	r3, [r7, #14]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d195      	bne.n	800a20a <ff_wtoupper+0x1a>
 800a2de:	8a3b      	ldrh	r3, [r7, #16]
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a2e8:	e78f      	b.n	800a20a <ff_wtoupper+0x1a>
			break;
 800a2ea:	bf00      	nop
	}

	return chr;
 800a2ec:	88fb      	ldrh	r3, [r7, #6]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	080109ec 	.word	0x080109ec
 800a300:	08010be0 	.word	0x08010be0

0800a304 <atoi>:
 800a304:	220a      	movs	r2, #10
 800a306:	2100      	movs	r1, #0
 800a308:	f000 b87c 	b.w	800a404 <strtol>

0800a30c <_strtol_l.constprop.0>:
 800a30c:	2b24      	cmp	r3, #36	@ 0x24
 800a30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a312:	4686      	mov	lr, r0
 800a314:	4690      	mov	r8, r2
 800a316:	d801      	bhi.n	800a31c <_strtol_l.constprop.0+0x10>
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d106      	bne.n	800a32a <_strtol_l.constprop.0+0x1e>
 800a31c:	f001 f998 	bl	800b650 <__errno>
 800a320:	2316      	movs	r3, #22
 800a322:	6003      	str	r3, [r0, #0]
 800a324:	2000      	movs	r0, #0
 800a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32a:	4834      	ldr	r0, [pc, #208]	@ (800a3fc <_strtol_l.constprop.0+0xf0>)
 800a32c:	460d      	mov	r5, r1
 800a32e:	462a      	mov	r2, r5
 800a330:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a334:	5d06      	ldrb	r6, [r0, r4]
 800a336:	f016 0608 	ands.w	r6, r6, #8
 800a33a:	d1f8      	bne.n	800a32e <_strtol_l.constprop.0+0x22>
 800a33c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a33e:	d12d      	bne.n	800a39c <_strtol_l.constprop.0+0x90>
 800a340:	782c      	ldrb	r4, [r5, #0]
 800a342:	2601      	movs	r6, #1
 800a344:	1c95      	adds	r5, r2, #2
 800a346:	f033 0210 	bics.w	r2, r3, #16
 800a34a:	d109      	bne.n	800a360 <_strtol_l.constprop.0+0x54>
 800a34c:	2c30      	cmp	r4, #48	@ 0x30
 800a34e:	d12a      	bne.n	800a3a6 <_strtol_l.constprop.0+0x9a>
 800a350:	782a      	ldrb	r2, [r5, #0]
 800a352:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a356:	2a58      	cmp	r2, #88	@ 0x58
 800a358:	d125      	bne.n	800a3a6 <_strtol_l.constprop.0+0x9a>
 800a35a:	786c      	ldrb	r4, [r5, #1]
 800a35c:	2310      	movs	r3, #16
 800a35e:	3502      	adds	r5, #2
 800a360:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a364:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a368:	2200      	movs	r2, #0
 800a36a:	fbbc f9f3 	udiv	r9, ip, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	fb03 ca19 	mls	sl, r3, r9, ip
 800a374:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a378:	2f09      	cmp	r7, #9
 800a37a:	d81b      	bhi.n	800a3b4 <_strtol_l.constprop.0+0xa8>
 800a37c:	463c      	mov	r4, r7
 800a37e:	42a3      	cmp	r3, r4
 800a380:	dd27      	ble.n	800a3d2 <_strtol_l.constprop.0+0xc6>
 800a382:	1c57      	adds	r7, r2, #1
 800a384:	d007      	beq.n	800a396 <_strtol_l.constprop.0+0x8a>
 800a386:	4581      	cmp	r9, r0
 800a388:	d320      	bcc.n	800a3cc <_strtol_l.constprop.0+0xc0>
 800a38a:	d101      	bne.n	800a390 <_strtol_l.constprop.0+0x84>
 800a38c:	45a2      	cmp	sl, r4
 800a38e:	db1d      	blt.n	800a3cc <_strtol_l.constprop.0+0xc0>
 800a390:	fb00 4003 	mla	r0, r0, r3, r4
 800a394:	2201      	movs	r2, #1
 800a396:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a39a:	e7eb      	b.n	800a374 <_strtol_l.constprop.0+0x68>
 800a39c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a39e:	bf04      	itt	eq
 800a3a0:	782c      	ldrbeq	r4, [r5, #0]
 800a3a2:	1c95      	addeq	r5, r2, #2
 800a3a4:	e7cf      	b.n	800a346 <_strtol_l.constprop.0+0x3a>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1da      	bne.n	800a360 <_strtol_l.constprop.0+0x54>
 800a3aa:	2c30      	cmp	r4, #48	@ 0x30
 800a3ac:	bf0c      	ite	eq
 800a3ae:	2308      	moveq	r3, #8
 800a3b0:	230a      	movne	r3, #10
 800a3b2:	e7d5      	b.n	800a360 <_strtol_l.constprop.0+0x54>
 800a3b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3b8:	2f19      	cmp	r7, #25
 800a3ba:	d801      	bhi.n	800a3c0 <_strtol_l.constprop.0+0xb4>
 800a3bc:	3c37      	subs	r4, #55	@ 0x37
 800a3be:	e7de      	b.n	800a37e <_strtol_l.constprop.0+0x72>
 800a3c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3c4:	2f19      	cmp	r7, #25
 800a3c6:	d804      	bhi.n	800a3d2 <_strtol_l.constprop.0+0xc6>
 800a3c8:	3c57      	subs	r4, #87	@ 0x57
 800a3ca:	e7d8      	b.n	800a37e <_strtol_l.constprop.0+0x72>
 800a3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d0:	e7e1      	b.n	800a396 <_strtol_l.constprop.0+0x8a>
 800a3d2:	1c53      	adds	r3, r2, #1
 800a3d4:	d108      	bne.n	800a3e8 <_strtol_l.constprop.0+0xdc>
 800a3d6:	2322      	movs	r3, #34	@ 0x22
 800a3d8:	f8ce 3000 	str.w	r3, [lr]
 800a3dc:	4660      	mov	r0, ip
 800a3de:	f1b8 0f00 	cmp.w	r8, #0
 800a3e2:	d0a0      	beq.n	800a326 <_strtol_l.constprop.0+0x1a>
 800a3e4:	1e69      	subs	r1, r5, #1
 800a3e6:	e006      	b.n	800a3f6 <_strtol_l.constprop.0+0xea>
 800a3e8:	b106      	cbz	r6, 800a3ec <_strtol_l.constprop.0+0xe0>
 800a3ea:	4240      	negs	r0, r0
 800a3ec:	f1b8 0f00 	cmp.w	r8, #0
 800a3f0:	d099      	beq.n	800a326 <_strtol_l.constprop.0+0x1a>
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	d1f6      	bne.n	800a3e4 <_strtol_l.constprop.0+0xd8>
 800a3f6:	f8c8 1000 	str.w	r1, [r8]
 800a3fa:	e794      	b.n	800a326 <_strtol_l.constprop.0+0x1a>
 800a3fc:	08010c9d 	.word	0x08010c9d

0800a400 <_strtol_r>:
 800a400:	f7ff bf84 	b.w	800a30c <_strtol_l.constprop.0>

0800a404 <strtol>:
 800a404:	4613      	mov	r3, r2
 800a406:	460a      	mov	r2, r1
 800a408:	4601      	mov	r1, r0
 800a40a:	4802      	ldr	r0, [pc, #8]	@ (800a414 <strtol+0x10>)
 800a40c:	6800      	ldr	r0, [r0, #0]
 800a40e:	f7ff bf7d 	b.w	800a30c <_strtol_l.constprop.0>
 800a412:	bf00      	nop
 800a414:	20000034 	.word	0x20000034

0800a418 <__cvt>:
 800a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	ec57 6b10 	vmov	r6, r7, d0
 800a420:	2f00      	cmp	r7, #0
 800a422:	460c      	mov	r4, r1
 800a424:	4619      	mov	r1, r3
 800a426:	463b      	mov	r3, r7
 800a428:	bfbb      	ittet	lt
 800a42a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a42e:	461f      	movlt	r7, r3
 800a430:	2300      	movge	r3, #0
 800a432:	232d      	movlt	r3, #45	@ 0x2d
 800a434:	700b      	strb	r3, [r1, #0]
 800a436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a438:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a43c:	4691      	mov	r9, r2
 800a43e:	f023 0820 	bic.w	r8, r3, #32
 800a442:	bfbc      	itt	lt
 800a444:	4632      	movlt	r2, r6
 800a446:	4616      	movlt	r6, r2
 800a448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a44c:	d005      	beq.n	800a45a <__cvt+0x42>
 800a44e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a452:	d100      	bne.n	800a456 <__cvt+0x3e>
 800a454:	3401      	adds	r4, #1
 800a456:	2102      	movs	r1, #2
 800a458:	e000      	b.n	800a45c <__cvt+0x44>
 800a45a:	2103      	movs	r1, #3
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	ab02      	add	r3, sp, #8
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	ec47 6b10 	vmov	d0, r6, r7
 800a468:	4653      	mov	r3, sl
 800a46a:	4622      	mov	r2, r4
 800a46c:	f001 f9ac 	bl	800b7c8 <_dtoa_r>
 800a470:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a474:	4605      	mov	r5, r0
 800a476:	d119      	bne.n	800a4ac <__cvt+0x94>
 800a478:	f019 0f01 	tst.w	r9, #1
 800a47c:	d00e      	beq.n	800a49c <__cvt+0x84>
 800a47e:	eb00 0904 	add.w	r9, r0, r4
 800a482:	2200      	movs	r2, #0
 800a484:	2300      	movs	r3, #0
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f6 fb35 	bl	8000af8 <__aeabi_dcmpeq>
 800a48e:	b108      	cbz	r0, 800a494 <__cvt+0x7c>
 800a490:	f8cd 900c 	str.w	r9, [sp, #12]
 800a494:	2230      	movs	r2, #48	@ 0x30
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	454b      	cmp	r3, r9
 800a49a:	d31e      	bcc.n	800a4da <__cvt+0xc2>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4a0:	1b5b      	subs	r3, r3, r5
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	b004      	add	sp, #16
 800a4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4b0:	eb00 0904 	add.w	r9, r0, r4
 800a4b4:	d1e5      	bne.n	800a482 <__cvt+0x6a>
 800a4b6:	7803      	ldrb	r3, [r0, #0]
 800a4b8:	2b30      	cmp	r3, #48	@ 0x30
 800a4ba:	d10a      	bne.n	800a4d2 <__cvt+0xba>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 fb18 	bl	8000af8 <__aeabi_dcmpeq>
 800a4c8:	b918      	cbnz	r0, 800a4d2 <__cvt+0xba>
 800a4ca:	f1c4 0401 	rsb	r4, r4, #1
 800a4ce:	f8ca 4000 	str.w	r4, [sl]
 800a4d2:	f8da 3000 	ldr.w	r3, [sl]
 800a4d6:	4499      	add	r9, r3
 800a4d8:	e7d3      	b.n	800a482 <__cvt+0x6a>
 800a4da:	1c59      	adds	r1, r3, #1
 800a4dc:	9103      	str	r1, [sp, #12]
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	e7d9      	b.n	800a496 <__cvt+0x7e>

0800a4e2 <__exponent>:
 800a4e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	bfba      	itte	lt
 800a4e8:	4249      	neglt	r1, r1
 800a4ea:	232d      	movlt	r3, #45	@ 0x2d
 800a4ec:	232b      	movge	r3, #43	@ 0x2b
 800a4ee:	2909      	cmp	r1, #9
 800a4f0:	7002      	strb	r2, [r0, #0]
 800a4f2:	7043      	strb	r3, [r0, #1]
 800a4f4:	dd29      	ble.n	800a54a <__exponent+0x68>
 800a4f6:	f10d 0307 	add.w	r3, sp, #7
 800a4fa:	461d      	mov	r5, r3
 800a4fc:	270a      	movs	r7, #10
 800a4fe:	461a      	mov	r2, r3
 800a500:	fbb1 f6f7 	udiv	r6, r1, r7
 800a504:	fb07 1416 	mls	r4, r7, r6, r1
 800a508:	3430      	adds	r4, #48	@ 0x30
 800a50a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a50e:	460c      	mov	r4, r1
 800a510:	2c63      	cmp	r4, #99	@ 0x63
 800a512:	f103 33ff 	add.w	r3, r3, #4294967295
 800a516:	4631      	mov	r1, r6
 800a518:	dcf1      	bgt.n	800a4fe <__exponent+0x1c>
 800a51a:	3130      	adds	r1, #48	@ 0x30
 800a51c:	1e94      	subs	r4, r2, #2
 800a51e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a522:	1c41      	adds	r1, r0, #1
 800a524:	4623      	mov	r3, r4
 800a526:	42ab      	cmp	r3, r5
 800a528:	d30a      	bcc.n	800a540 <__exponent+0x5e>
 800a52a:	f10d 0309 	add.w	r3, sp, #9
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	42ac      	cmp	r4, r5
 800a532:	bf88      	it	hi
 800a534:	2300      	movhi	r3, #0
 800a536:	3302      	adds	r3, #2
 800a538:	4403      	add	r3, r0
 800a53a:	1a18      	subs	r0, r3, r0
 800a53c:	b003      	add	sp, #12
 800a53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a540:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a544:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a548:	e7ed      	b.n	800a526 <__exponent+0x44>
 800a54a:	2330      	movs	r3, #48	@ 0x30
 800a54c:	3130      	adds	r1, #48	@ 0x30
 800a54e:	7083      	strb	r3, [r0, #2]
 800a550:	70c1      	strb	r1, [r0, #3]
 800a552:	1d03      	adds	r3, r0, #4
 800a554:	e7f1      	b.n	800a53a <__exponent+0x58>
	...

0800a558 <_printf_float>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	b08d      	sub	sp, #52	@ 0x34
 800a55e:	460c      	mov	r4, r1
 800a560:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a564:	4616      	mov	r6, r2
 800a566:	461f      	mov	r7, r3
 800a568:	4605      	mov	r5, r0
 800a56a:	f001 f827 	bl	800b5bc <_localeconv_r>
 800a56e:	6803      	ldr	r3, [r0, #0]
 800a570:	9304      	str	r3, [sp, #16]
 800a572:	4618      	mov	r0, r3
 800a574:	f7f5 fe94 	bl	80002a0 <strlen>
 800a578:	2300      	movs	r3, #0
 800a57a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a57c:	f8d8 3000 	ldr.w	r3, [r8]
 800a580:	9005      	str	r0, [sp, #20]
 800a582:	3307      	adds	r3, #7
 800a584:	f023 0307 	bic.w	r3, r3, #7
 800a588:	f103 0208 	add.w	r2, r3, #8
 800a58c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a590:	f8d4 b000 	ldr.w	fp, [r4]
 800a594:	f8c8 2000 	str.w	r2, [r8]
 800a598:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a59c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5a0:	9307      	str	r3, [sp, #28]
 800a5a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a5aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a820 <_printf_float+0x2c8>)
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	f7f6 fad2 	bl	8000b5c <__aeabi_dcmpun>
 800a5b8:	bb70      	cbnz	r0, 800a618 <_printf_float+0xc0>
 800a5ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5be:	4b98      	ldr	r3, [pc, #608]	@ (800a820 <_printf_float+0x2c8>)
 800a5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c4:	f7f6 faac 	bl	8000b20 <__aeabi_dcmple>
 800a5c8:	bb30      	cbnz	r0, 800a618 <_printf_float+0xc0>
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f6 fa9b 	bl	8000b0c <__aeabi_dcmplt>
 800a5d6:	b110      	cbz	r0, 800a5de <_printf_float+0x86>
 800a5d8:	232d      	movs	r3, #45	@ 0x2d
 800a5da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5de:	4a91      	ldr	r2, [pc, #580]	@ (800a824 <_printf_float+0x2cc>)
 800a5e0:	4b91      	ldr	r3, [pc, #580]	@ (800a828 <_printf_float+0x2d0>)
 800a5e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5e6:	bf94      	ite	ls
 800a5e8:	4690      	movls	r8, r2
 800a5ea:	4698      	movhi	r8, r3
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	f02b 0304 	bic.w	r3, fp, #4
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	9700      	str	r7, [sp, #0]
 800a5fc:	4633      	mov	r3, r6
 800a5fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a600:	4621      	mov	r1, r4
 800a602:	4628      	mov	r0, r5
 800a604:	f000 f9d2 	bl	800a9ac <_printf_common>
 800a608:	3001      	adds	r0, #1
 800a60a:	f040 808d 	bne.w	800a728 <_printf_float+0x1d0>
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295
 800a612:	b00d      	add	sp, #52	@ 0x34
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f6 fa9c 	bl	8000b5c <__aeabi_dcmpun>
 800a624:	b140      	cbz	r0, 800a638 <_printf_float+0xe0>
 800a626:	464b      	mov	r3, r9
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbc      	itt	lt
 800a62c:	232d      	movlt	r3, #45	@ 0x2d
 800a62e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a632:	4a7e      	ldr	r2, [pc, #504]	@ (800a82c <_printf_float+0x2d4>)
 800a634:	4b7e      	ldr	r3, [pc, #504]	@ (800a830 <_printf_float+0x2d8>)
 800a636:	e7d4      	b.n	800a5e2 <_printf_float+0x8a>
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a63e:	9206      	str	r2, [sp, #24]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	d13b      	bne.n	800a6bc <_printf_float+0x164>
 800a644:	2306      	movs	r3, #6
 800a646:	6063      	str	r3, [r4, #4]
 800a648:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a64c:	2300      	movs	r3, #0
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	9303      	str	r3, [sp, #12]
 800a652:	ab0a      	add	r3, sp, #40	@ 0x28
 800a654:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a658:	ab09      	add	r3, sp, #36	@ 0x24
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	6861      	ldr	r1, [r4, #4]
 800a65e:	ec49 8b10 	vmov	d0, r8, r9
 800a662:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a666:	4628      	mov	r0, r5
 800a668:	f7ff fed6 	bl	800a418 <__cvt>
 800a66c:	9b06      	ldr	r3, [sp, #24]
 800a66e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a670:	2b47      	cmp	r3, #71	@ 0x47
 800a672:	4680      	mov	r8, r0
 800a674:	d129      	bne.n	800a6ca <_printf_float+0x172>
 800a676:	1cc8      	adds	r0, r1, #3
 800a678:	db02      	blt.n	800a680 <_printf_float+0x128>
 800a67a:	6863      	ldr	r3, [r4, #4]
 800a67c:	4299      	cmp	r1, r3
 800a67e:	dd41      	ble.n	800a704 <_printf_float+0x1ac>
 800a680:	f1aa 0a02 	sub.w	sl, sl, #2
 800a684:	fa5f fa8a 	uxtb.w	sl, sl
 800a688:	3901      	subs	r1, #1
 800a68a:	4652      	mov	r2, sl
 800a68c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a690:	9109      	str	r1, [sp, #36]	@ 0x24
 800a692:	f7ff ff26 	bl	800a4e2 <__exponent>
 800a696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a698:	1813      	adds	r3, r2, r0
 800a69a:	2a01      	cmp	r2, #1
 800a69c:	4681      	mov	r9, r0
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	dc02      	bgt.n	800a6a8 <_printf_float+0x150>
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	07d2      	lsls	r2, r2, #31
 800a6a6:	d501      	bpl.n	800a6ac <_printf_float+0x154>
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0a2      	beq.n	800a5fa <_printf_float+0xa2>
 800a6b4:	232d      	movs	r3, #45	@ 0x2d
 800a6b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6ba:	e79e      	b.n	800a5fa <_printf_float+0xa2>
 800a6bc:	9a06      	ldr	r2, [sp, #24]
 800a6be:	2a47      	cmp	r2, #71	@ 0x47
 800a6c0:	d1c2      	bne.n	800a648 <_printf_float+0xf0>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1c0      	bne.n	800a648 <_printf_float+0xf0>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e7bd      	b.n	800a646 <_printf_float+0xee>
 800a6ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6ce:	d9db      	bls.n	800a688 <_printf_float+0x130>
 800a6d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6d4:	d118      	bne.n	800a708 <_printf_float+0x1b0>
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	dd0b      	ble.n	800a6f4 <_printf_float+0x19c>
 800a6dc:	6121      	str	r1, [r4, #16]
 800a6de:	b913      	cbnz	r3, 800a6e6 <_printf_float+0x18e>
 800a6e0:	6822      	ldr	r2, [r4, #0]
 800a6e2:	07d0      	lsls	r0, r2, #31
 800a6e4:	d502      	bpl.n	800a6ec <_printf_float+0x194>
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	440b      	add	r3, r1
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	e7db      	b.n	800a6ac <_printf_float+0x154>
 800a6f4:	b913      	cbnz	r3, 800a6fc <_printf_float+0x1a4>
 800a6f6:	6822      	ldr	r2, [r4, #0]
 800a6f8:	07d2      	lsls	r2, r2, #31
 800a6fa:	d501      	bpl.n	800a700 <_printf_float+0x1a8>
 800a6fc:	3302      	adds	r3, #2
 800a6fe:	e7f4      	b.n	800a6ea <_printf_float+0x192>
 800a700:	2301      	movs	r3, #1
 800a702:	e7f2      	b.n	800a6ea <_printf_float+0x192>
 800a704:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a70a:	4299      	cmp	r1, r3
 800a70c:	db05      	blt.n	800a71a <_printf_float+0x1c2>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	6121      	str	r1, [r4, #16]
 800a712:	07d8      	lsls	r0, r3, #31
 800a714:	d5ea      	bpl.n	800a6ec <_printf_float+0x194>
 800a716:	1c4b      	adds	r3, r1, #1
 800a718:	e7e7      	b.n	800a6ea <_printf_float+0x192>
 800a71a:	2900      	cmp	r1, #0
 800a71c:	bfd4      	ite	le
 800a71e:	f1c1 0202 	rsble	r2, r1, #2
 800a722:	2201      	movgt	r2, #1
 800a724:	4413      	add	r3, r2
 800a726:	e7e0      	b.n	800a6ea <_printf_float+0x192>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	055a      	lsls	r2, r3, #21
 800a72c:	d407      	bmi.n	800a73e <_printf_float+0x1e6>
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	4642      	mov	r2, r8
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	47b8      	blx	r7
 800a738:	3001      	adds	r0, #1
 800a73a:	d12b      	bne.n	800a794 <_printf_float+0x23c>
 800a73c:	e767      	b.n	800a60e <_printf_float+0xb6>
 800a73e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a742:	f240 80dd 	bls.w	800a900 <_printf_float+0x3a8>
 800a746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	f7f6 f9d3 	bl	8000af8 <__aeabi_dcmpeq>
 800a752:	2800      	cmp	r0, #0
 800a754:	d033      	beq.n	800a7be <_printf_float+0x266>
 800a756:	4a37      	ldr	r2, [pc, #220]	@ (800a834 <_printf_float+0x2dc>)
 800a758:	2301      	movs	r3, #1
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f af54 	beq.w	800a60e <_printf_float+0xb6>
 800a766:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a76a:	4543      	cmp	r3, r8
 800a76c:	db02      	blt.n	800a774 <_printf_float+0x21c>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	07d8      	lsls	r0, r3, #31
 800a772:	d50f      	bpl.n	800a794 <_printf_float+0x23c>
 800a774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	47b8      	blx	r7
 800a77e:	3001      	adds	r0, #1
 800a780:	f43f af45 	beq.w	800a60e <_printf_float+0xb6>
 800a784:	f04f 0900 	mov.w	r9, #0
 800a788:	f108 38ff 	add.w	r8, r8, #4294967295
 800a78c:	f104 0a1a 	add.w	sl, r4, #26
 800a790:	45c8      	cmp	r8, r9
 800a792:	dc09      	bgt.n	800a7a8 <_printf_float+0x250>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	079b      	lsls	r3, r3, #30
 800a798:	f100 8103 	bmi.w	800a9a2 <_printf_float+0x44a>
 800a79c:	68e0      	ldr	r0, [r4, #12]
 800a79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7a0:	4298      	cmp	r0, r3
 800a7a2:	bfb8      	it	lt
 800a7a4:	4618      	movlt	r0, r3
 800a7a6:	e734      	b.n	800a612 <_printf_float+0xba>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f43f af2b 	beq.w	800a60e <_printf_float+0xb6>
 800a7b8:	f109 0901 	add.w	r9, r9, #1
 800a7bc:	e7e8      	b.n	800a790 <_printf_float+0x238>
 800a7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc39      	bgt.n	800a838 <_printf_float+0x2e0>
 800a7c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <_printf_float+0x2dc>)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f af1d 	beq.w	800a60e <_printf_float+0xb6>
 800a7d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a7d8:	ea59 0303 	orrs.w	r3, r9, r3
 800a7dc:	d102      	bne.n	800a7e4 <_printf_float+0x28c>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	07d9      	lsls	r1, r3, #31
 800a7e2:	d5d7      	bpl.n	800a794 <_printf_float+0x23c>
 800a7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f43f af0d 	beq.w	800a60e <_printf_float+0xb6>
 800a7f4:	f04f 0a00 	mov.w	sl, #0
 800a7f8:	f104 0b1a 	add.w	fp, r4, #26
 800a7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7fe:	425b      	negs	r3, r3
 800a800:	4553      	cmp	r3, sl
 800a802:	dc01      	bgt.n	800a808 <_printf_float+0x2b0>
 800a804:	464b      	mov	r3, r9
 800a806:	e793      	b.n	800a730 <_printf_float+0x1d8>
 800a808:	2301      	movs	r3, #1
 800a80a:	465a      	mov	r2, fp
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	47b8      	blx	r7
 800a812:	3001      	adds	r0, #1
 800a814:	f43f aefb 	beq.w	800a60e <_printf_float+0xb6>
 800a818:	f10a 0a01 	add.w	sl, sl, #1
 800a81c:	e7ee      	b.n	800a7fc <_printf_float+0x2a4>
 800a81e:	bf00      	nop
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	08010d9d 	.word	0x08010d9d
 800a828:	08010da1 	.word	0x08010da1
 800a82c:	08010da5 	.word	0x08010da5
 800a830:	08010da9 	.word	0x08010da9
 800a834:	08011037 	.word	0x08011037
 800a838:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a83a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a83e:	4553      	cmp	r3, sl
 800a840:	bfa8      	it	ge
 800a842:	4653      	movge	r3, sl
 800a844:	2b00      	cmp	r3, #0
 800a846:	4699      	mov	r9, r3
 800a848:	dc36      	bgt.n	800a8b8 <_printf_float+0x360>
 800a84a:	f04f 0b00 	mov.w	fp, #0
 800a84e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a852:	f104 021a 	add.w	r2, r4, #26
 800a856:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	eba3 0309 	sub.w	r3, r3, r9
 800a85e:	455b      	cmp	r3, fp
 800a860:	dc31      	bgt.n	800a8c6 <_printf_float+0x36e>
 800a862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a864:	459a      	cmp	sl, r3
 800a866:	dc3a      	bgt.n	800a8de <_printf_float+0x386>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07da      	lsls	r2, r3, #31
 800a86c:	d437      	bmi.n	800a8de <_printf_float+0x386>
 800a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a870:	ebaa 0903 	sub.w	r9, sl, r3
 800a874:	9b06      	ldr	r3, [sp, #24]
 800a876:	ebaa 0303 	sub.w	r3, sl, r3
 800a87a:	4599      	cmp	r9, r3
 800a87c:	bfa8      	it	ge
 800a87e:	4699      	movge	r9, r3
 800a880:	f1b9 0f00 	cmp.w	r9, #0
 800a884:	dc33      	bgt.n	800a8ee <_printf_float+0x396>
 800a886:	f04f 0800 	mov.w	r8, #0
 800a88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a88e:	f104 0b1a 	add.w	fp, r4, #26
 800a892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a894:	ebaa 0303 	sub.w	r3, sl, r3
 800a898:	eba3 0309 	sub.w	r3, r3, r9
 800a89c:	4543      	cmp	r3, r8
 800a89e:	f77f af79 	ble.w	800a794 <_printf_float+0x23c>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	465a      	mov	r2, fp
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f43f aeae 	beq.w	800a60e <_printf_float+0xb6>
 800a8b2:	f108 0801 	add.w	r8, r8, #1
 800a8b6:	e7ec      	b.n	800a892 <_printf_float+0x33a>
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d1c2      	bne.n	800a84a <_printf_float+0x2f2>
 800a8c4:	e6a3      	b.n	800a60e <_printf_float+0xb6>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	9206      	str	r2, [sp, #24]
 800a8ce:	47b8      	blx	r7
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f43f ae9c 	beq.w	800a60e <_printf_float+0xb6>
 800a8d6:	9a06      	ldr	r2, [sp, #24]
 800a8d8:	f10b 0b01 	add.w	fp, fp, #1
 800a8dc:	e7bb      	b.n	800a856 <_printf_float+0x2fe>
 800a8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d1c0      	bne.n	800a86e <_printf_float+0x316>
 800a8ec:	e68f      	b.n	800a60e <_printf_float+0xb6>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4442      	add	r2, r8
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d1c3      	bne.n	800a886 <_printf_float+0x32e>
 800a8fe:	e686      	b.n	800a60e <_printf_float+0xb6>
 800a900:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a904:	f1ba 0f01 	cmp.w	sl, #1
 800a908:	dc01      	bgt.n	800a90e <_printf_float+0x3b6>
 800a90a:	07db      	lsls	r3, r3, #31
 800a90c:	d536      	bpl.n	800a97c <_printf_float+0x424>
 800a90e:	2301      	movs	r3, #1
 800a910:	4642      	mov	r2, r8
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae78 	beq.w	800a60e <_printf_float+0xb6>
 800a91e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f ae70 	beq.w	800a60e <_printf_float+0xb6>
 800a92e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a93a:	f7f6 f8dd 	bl	8000af8 <__aeabi_dcmpeq>
 800a93e:	b9c0      	cbnz	r0, 800a972 <_printf_float+0x41a>
 800a940:	4653      	mov	r3, sl
 800a942:	f108 0201 	add.w	r2, r8, #1
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d10c      	bne.n	800a96a <_printf_float+0x412>
 800a950:	e65d      	b.n	800a60e <_printf_float+0xb6>
 800a952:	2301      	movs	r3, #1
 800a954:	465a      	mov	r2, fp
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae56 	beq.w	800a60e <_printf_float+0xb6>
 800a962:	f108 0801 	add.w	r8, r8, #1
 800a966:	45d0      	cmp	r8, sl
 800a968:	dbf3      	blt.n	800a952 <_printf_float+0x3fa>
 800a96a:	464b      	mov	r3, r9
 800a96c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a970:	e6df      	b.n	800a732 <_printf_float+0x1da>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	f104 0b1a 	add.w	fp, r4, #26
 800a97a:	e7f4      	b.n	800a966 <_printf_float+0x40e>
 800a97c:	2301      	movs	r3, #1
 800a97e:	4642      	mov	r2, r8
 800a980:	e7e1      	b.n	800a946 <_printf_float+0x3ee>
 800a982:	2301      	movs	r3, #1
 800a984:	464a      	mov	r2, r9
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	f43f ae3e 	beq.w	800a60e <_printf_float+0xb6>
 800a992:	f108 0801 	add.w	r8, r8, #1
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a99a:	1a5b      	subs	r3, r3, r1
 800a99c:	4543      	cmp	r3, r8
 800a99e:	dcf0      	bgt.n	800a982 <_printf_float+0x42a>
 800a9a0:	e6fc      	b.n	800a79c <_printf_float+0x244>
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	f104 0919 	add.w	r9, r4, #25
 800a9aa:	e7f4      	b.n	800a996 <_printf_float+0x43e>

0800a9ac <_printf_common>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	4698      	mov	r8, r3
 800a9b4:	688a      	ldr	r2, [r1, #8]
 800a9b6:	690b      	ldr	r3, [r1, #16]
 800a9b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	bfb8      	it	lt
 800a9c0:	4613      	movlt	r3, r2
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	b10a      	cbz	r2, 800a9d2 <_printf_common+0x26>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	6033      	str	r3, [r6, #0]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	0699      	lsls	r1, r3, #26
 800a9d6:	bf42      	ittt	mi
 800a9d8:	6833      	ldrmi	r3, [r6, #0]
 800a9da:	3302      	addmi	r3, #2
 800a9dc:	6033      	strmi	r3, [r6, #0]
 800a9de:	6825      	ldr	r5, [r4, #0]
 800a9e0:	f015 0506 	ands.w	r5, r5, #6
 800a9e4:	d106      	bne.n	800a9f4 <_printf_common+0x48>
 800a9e6:	f104 0a19 	add.w	sl, r4, #25
 800a9ea:	68e3      	ldr	r3, [r4, #12]
 800a9ec:	6832      	ldr	r2, [r6, #0]
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	42ab      	cmp	r3, r5
 800a9f2:	dc26      	bgt.n	800aa42 <_printf_common+0x96>
 800a9f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	3b00      	subs	r3, #0
 800a9fc:	bf18      	it	ne
 800a9fe:	2301      	movne	r3, #1
 800aa00:	0692      	lsls	r2, r2, #26
 800aa02:	d42b      	bmi.n	800aa5c <_printf_common+0xb0>
 800aa04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa08:	4641      	mov	r1, r8
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	47c8      	blx	r9
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d01e      	beq.n	800aa50 <_printf_common+0xa4>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	6922      	ldr	r2, [r4, #16]
 800aa16:	f003 0306 	and.w	r3, r3, #6
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	bf02      	ittt	eq
 800aa1e:	68e5      	ldreq	r5, [r4, #12]
 800aa20:	6833      	ldreq	r3, [r6, #0]
 800aa22:	1aed      	subeq	r5, r5, r3
 800aa24:	68a3      	ldr	r3, [r4, #8]
 800aa26:	bf0c      	ite	eq
 800aa28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa2c:	2500      	movne	r5, #0
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	bfc4      	itt	gt
 800aa32:	1a9b      	subgt	r3, r3, r2
 800aa34:	18ed      	addgt	r5, r5, r3
 800aa36:	2600      	movs	r6, #0
 800aa38:	341a      	adds	r4, #26
 800aa3a:	42b5      	cmp	r5, r6
 800aa3c:	d11a      	bne.n	800aa74 <_printf_common+0xc8>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e008      	b.n	800aa54 <_printf_common+0xa8>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4652      	mov	r2, sl
 800aa46:	4641      	mov	r1, r8
 800aa48:	4638      	mov	r0, r7
 800aa4a:	47c8      	blx	r9
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d103      	bne.n	800aa58 <_printf_common+0xac>
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa58:	3501      	adds	r5, #1
 800aa5a:	e7c6      	b.n	800a9ea <_printf_common+0x3e>
 800aa5c:	18e1      	adds	r1, r4, r3
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	2030      	movs	r0, #48	@ 0x30
 800aa62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa66:	4422      	add	r2, r4
 800aa68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa70:	3302      	adds	r3, #2
 800aa72:	e7c7      	b.n	800aa04 <_printf_common+0x58>
 800aa74:	2301      	movs	r3, #1
 800aa76:	4622      	mov	r2, r4
 800aa78:	4641      	mov	r1, r8
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	47c8      	blx	r9
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d0e6      	beq.n	800aa50 <_printf_common+0xa4>
 800aa82:	3601      	adds	r6, #1
 800aa84:	e7d9      	b.n	800aa3a <_printf_common+0x8e>
	...

0800aa88 <_printf_i>:
 800aa88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8c:	7e0f      	ldrb	r7, [r1, #24]
 800aa8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa90:	2f78      	cmp	r7, #120	@ 0x78
 800aa92:	4691      	mov	r9, r2
 800aa94:	4680      	mov	r8, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	469a      	mov	sl, r3
 800aa9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa9e:	d807      	bhi.n	800aab0 <_printf_i+0x28>
 800aaa0:	2f62      	cmp	r7, #98	@ 0x62
 800aaa2:	d80a      	bhi.n	800aaba <_printf_i+0x32>
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	f000 80d2 	beq.w	800ac4e <_printf_i+0x1c6>
 800aaaa:	2f58      	cmp	r7, #88	@ 0x58
 800aaac:	f000 80b9 	beq.w	800ac22 <_printf_i+0x19a>
 800aab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aab8:	e03a      	b.n	800ab30 <_printf_i+0xa8>
 800aaba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aabe:	2b15      	cmp	r3, #21
 800aac0:	d8f6      	bhi.n	800aab0 <_printf_i+0x28>
 800aac2:	a101      	add	r1, pc, #4	@ (adr r1, 800aac8 <_printf_i+0x40>)
 800aac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aac8:	0800ab21 	.word	0x0800ab21
 800aacc:	0800ab35 	.word	0x0800ab35
 800aad0:	0800aab1 	.word	0x0800aab1
 800aad4:	0800aab1 	.word	0x0800aab1
 800aad8:	0800aab1 	.word	0x0800aab1
 800aadc:	0800aab1 	.word	0x0800aab1
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800aab1 	.word	0x0800aab1
 800aae8:	0800aab1 	.word	0x0800aab1
 800aaec:	0800aab1 	.word	0x0800aab1
 800aaf0:	0800aab1 	.word	0x0800aab1
 800aaf4:	0800ac35 	.word	0x0800ac35
 800aaf8:	0800ab5f 	.word	0x0800ab5f
 800aafc:	0800abef 	.word	0x0800abef
 800ab00:	0800aab1 	.word	0x0800aab1
 800ab04:	0800aab1 	.word	0x0800aab1
 800ab08:	0800ac57 	.word	0x0800ac57
 800ab0c:	0800aab1 	.word	0x0800aab1
 800ab10:	0800ab5f 	.word	0x0800ab5f
 800ab14:	0800aab1 	.word	0x0800aab1
 800ab18:	0800aab1 	.word	0x0800aab1
 800ab1c:	0800abf7 	.word	0x0800abf7
 800ab20:	6833      	ldr	r3, [r6, #0]
 800ab22:	1d1a      	adds	r2, r3, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6032      	str	r2, [r6, #0]
 800ab28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab30:	2301      	movs	r3, #1
 800ab32:	e09d      	b.n	800ac70 <_printf_i+0x1e8>
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	1d19      	adds	r1, r3, #4
 800ab3a:	6031      	str	r1, [r6, #0]
 800ab3c:	0606      	lsls	r6, r0, #24
 800ab3e:	d501      	bpl.n	800ab44 <_printf_i+0xbc>
 800ab40:	681d      	ldr	r5, [r3, #0]
 800ab42:	e003      	b.n	800ab4c <_printf_i+0xc4>
 800ab44:	0645      	lsls	r5, r0, #25
 800ab46:	d5fb      	bpl.n	800ab40 <_printf_i+0xb8>
 800ab48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	da03      	bge.n	800ab58 <_printf_i+0xd0>
 800ab50:	232d      	movs	r3, #45	@ 0x2d
 800ab52:	426d      	negs	r5, r5
 800ab54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab58:	4859      	ldr	r0, [pc, #356]	@ (800acc0 <_printf_i+0x238>)
 800ab5a:	230a      	movs	r3, #10
 800ab5c:	e011      	b.n	800ab82 <_printf_i+0xfa>
 800ab5e:	6821      	ldr	r1, [r4, #0]
 800ab60:	6833      	ldr	r3, [r6, #0]
 800ab62:	0608      	lsls	r0, r1, #24
 800ab64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab68:	d402      	bmi.n	800ab70 <_printf_i+0xe8>
 800ab6a:	0649      	lsls	r1, r1, #25
 800ab6c:	bf48      	it	mi
 800ab6e:	b2ad      	uxthmi	r5, r5
 800ab70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab72:	4853      	ldr	r0, [pc, #332]	@ (800acc0 <_printf_i+0x238>)
 800ab74:	6033      	str	r3, [r6, #0]
 800ab76:	bf14      	ite	ne
 800ab78:	230a      	movne	r3, #10
 800ab7a:	2308      	moveq	r3, #8
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab82:	6866      	ldr	r6, [r4, #4]
 800ab84:	60a6      	str	r6, [r4, #8]
 800ab86:	2e00      	cmp	r6, #0
 800ab88:	bfa2      	ittt	ge
 800ab8a:	6821      	ldrge	r1, [r4, #0]
 800ab8c:	f021 0104 	bicge.w	r1, r1, #4
 800ab90:	6021      	strge	r1, [r4, #0]
 800ab92:	b90d      	cbnz	r5, 800ab98 <_printf_i+0x110>
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	d04b      	beq.n	800ac30 <_printf_i+0x1a8>
 800ab98:	4616      	mov	r6, r2
 800ab9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab9e:	fb03 5711 	mls	r7, r3, r1, r5
 800aba2:	5dc7      	ldrb	r7, [r0, r7]
 800aba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aba8:	462f      	mov	r7, r5
 800abaa:	42bb      	cmp	r3, r7
 800abac:	460d      	mov	r5, r1
 800abae:	d9f4      	bls.n	800ab9a <_printf_i+0x112>
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d10b      	bne.n	800abcc <_printf_i+0x144>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	07df      	lsls	r7, r3, #31
 800abb8:	d508      	bpl.n	800abcc <_printf_i+0x144>
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	6861      	ldr	r1, [r4, #4]
 800abbe:	4299      	cmp	r1, r3
 800abc0:	bfde      	ittt	le
 800abc2:	2330      	movle	r3, #48	@ 0x30
 800abc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abcc:	1b92      	subs	r2, r2, r6
 800abce:	6122      	str	r2, [r4, #16]
 800abd0:	f8cd a000 	str.w	sl, [sp]
 800abd4:	464b      	mov	r3, r9
 800abd6:	aa03      	add	r2, sp, #12
 800abd8:	4621      	mov	r1, r4
 800abda:	4640      	mov	r0, r8
 800abdc:	f7ff fee6 	bl	800a9ac <_printf_common>
 800abe0:	3001      	adds	r0, #1
 800abe2:	d14a      	bne.n	800ac7a <_printf_i+0x1f2>
 800abe4:	f04f 30ff 	mov.w	r0, #4294967295
 800abe8:	b004      	add	sp, #16
 800abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	f043 0320 	orr.w	r3, r3, #32
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	4833      	ldr	r0, [pc, #204]	@ (800acc4 <_printf_i+0x23c>)
 800abf8:	2778      	movs	r7, #120	@ 0x78
 800abfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	6831      	ldr	r1, [r6, #0]
 800ac02:	061f      	lsls	r7, r3, #24
 800ac04:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac08:	d402      	bmi.n	800ac10 <_printf_i+0x188>
 800ac0a:	065f      	lsls	r7, r3, #25
 800ac0c:	bf48      	it	mi
 800ac0e:	b2ad      	uxthmi	r5, r5
 800ac10:	6031      	str	r1, [r6, #0]
 800ac12:	07d9      	lsls	r1, r3, #31
 800ac14:	bf44      	itt	mi
 800ac16:	f043 0320 	orrmi.w	r3, r3, #32
 800ac1a:	6023      	strmi	r3, [r4, #0]
 800ac1c:	b11d      	cbz	r5, 800ac26 <_printf_i+0x19e>
 800ac1e:	2310      	movs	r3, #16
 800ac20:	e7ac      	b.n	800ab7c <_printf_i+0xf4>
 800ac22:	4827      	ldr	r0, [pc, #156]	@ (800acc0 <_printf_i+0x238>)
 800ac24:	e7e9      	b.n	800abfa <_printf_i+0x172>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	f023 0320 	bic.w	r3, r3, #32
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	e7f6      	b.n	800ac1e <_printf_i+0x196>
 800ac30:	4616      	mov	r6, r2
 800ac32:	e7bd      	b.n	800abb0 <_printf_i+0x128>
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	6825      	ldr	r5, [r4, #0]
 800ac38:	6961      	ldr	r1, [r4, #20]
 800ac3a:	1d18      	adds	r0, r3, #4
 800ac3c:	6030      	str	r0, [r6, #0]
 800ac3e:	062e      	lsls	r6, r5, #24
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	d501      	bpl.n	800ac48 <_printf_i+0x1c0>
 800ac44:	6019      	str	r1, [r3, #0]
 800ac46:	e002      	b.n	800ac4e <_printf_i+0x1c6>
 800ac48:	0668      	lsls	r0, r5, #25
 800ac4a:	d5fb      	bpl.n	800ac44 <_printf_i+0x1bc>
 800ac4c:	8019      	strh	r1, [r3, #0]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	6123      	str	r3, [r4, #16]
 800ac52:	4616      	mov	r6, r2
 800ac54:	e7bc      	b.n	800abd0 <_printf_i+0x148>
 800ac56:	6833      	ldr	r3, [r6, #0]
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	6032      	str	r2, [r6, #0]
 800ac5c:	681e      	ldr	r6, [r3, #0]
 800ac5e:	6862      	ldr	r2, [r4, #4]
 800ac60:	2100      	movs	r1, #0
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7f5 facc 	bl	8000200 <memchr>
 800ac68:	b108      	cbz	r0, 800ac6e <_printf_i+0x1e6>
 800ac6a:	1b80      	subs	r0, r0, r6
 800ac6c:	6060      	str	r0, [r4, #4]
 800ac6e:	6863      	ldr	r3, [r4, #4]
 800ac70:	6123      	str	r3, [r4, #16]
 800ac72:	2300      	movs	r3, #0
 800ac74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac78:	e7aa      	b.n	800abd0 <_printf_i+0x148>
 800ac7a:	6923      	ldr	r3, [r4, #16]
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	4649      	mov	r1, r9
 800ac80:	4640      	mov	r0, r8
 800ac82:	47d0      	blx	sl
 800ac84:	3001      	adds	r0, #1
 800ac86:	d0ad      	beq.n	800abe4 <_printf_i+0x15c>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	079b      	lsls	r3, r3, #30
 800ac8c:	d413      	bmi.n	800acb6 <_printf_i+0x22e>
 800ac8e:	68e0      	ldr	r0, [r4, #12]
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	4298      	cmp	r0, r3
 800ac94:	bfb8      	it	lt
 800ac96:	4618      	movlt	r0, r3
 800ac98:	e7a6      	b.n	800abe8 <_printf_i+0x160>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	4649      	mov	r1, r9
 800aca0:	4640      	mov	r0, r8
 800aca2:	47d0      	blx	sl
 800aca4:	3001      	adds	r0, #1
 800aca6:	d09d      	beq.n	800abe4 <_printf_i+0x15c>
 800aca8:	3501      	adds	r5, #1
 800acaa:	68e3      	ldr	r3, [r4, #12]
 800acac:	9903      	ldr	r1, [sp, #12]
 800acae:	1a5b      	subs	r3, r3, r1
 800acb0:	42ab      	cmp	r3, r5
 800acb2:	dcf2      	bgt.n	800ac9a <_printf_i+0x212>
 800acb4:	e7eb      	b.n	800ac8e <_printf_i+0x206>
 800acb6:	2500      	movs	r5, #0
 800acb8:	f104 0619 	add.w	r6, r4, #25
 800acbc:	e7f5      	b.n	800acaa <_printf_i+0x222>
 800acbe:	bf00      	nop
 800acc0:	08010dad 	.word	0x08010dad
 800acc4:	08010dbe 	.word	0x08010dbe

0800acc8 <_scanf_float>:
 800acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800accc:	b087      	sub	sp, #28
 800acce:	4617      	mov	r7, r2
 800acd0:	9303      	str	r3, [sp, #12]
 800acd2:	688b      	ldr	r3, [r1, #8]
 800acd4:	1e5a      	subs	r2, r3, #1
 800acd6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800acda:	bf81      	itttt	hi
 800acdc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ace0:	eb03 0b05 	addhi.w	fp, r3, r5
 800ace4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ace8:	608b      	strhi	r3, [r1, #8]
 800acea:	680b      	ldr	r3, [r1, #0]
 800acec:	460a      	mov	r2, r1
 800acee:	f04f 0500 	mov.w	r5, #0
 800acf2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800acf6:	f842 3b1c 	str.w	r3, [r2], #28
 800acfa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800acfe:	4680      	mov	r8, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	bf98      	it	ls
 800ad04:	f04f 0b00 	movls.w	fp, #0
 800ad08:	9201      	str	r2, [sp, #4]
 800ad0a:	4616      	mov	r6, r2
 800ad0c:	46aa      	mov	sl, r5
 800ad0e:	46a9      	mov	r9, r5
 800ad10:	9502      	str	r5, [sp, #8]
 800ad12:	68a2      	ldr	r2, [r4, #8]
 800ad14:	b152      	cbz	r2, 800ad2c <_scanf_float+0x64>
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b4e      	cmp	r3, #78	@ 0x4e
 800ad1c:	d864      	bhi.n	800ade8 <_scanf_float+0x120>
 800ad1e:	2b40      	cmp	r3, #64	@ 0x40
 800ad20:	d83c      	bhi.n	800ad9c <_scanf_float+0xd4>
 800ad22:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ad26:	b2c8      	uxtb	r0, r1
 800ad28:	280e      	cmp	r0, #14
 800ad2a:	d93a      	bls.n	800ada2 <_scanf_float+0xda>
 800ad2c:	f1b9 0f00 	cmp.w	r9, #0
 800ad30:	d003      	beq.n	800ad3a <_scanf_float+0x72>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad38:	6023      	str	r3, [r4, #0]
 800ad3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad3e:	f1ba 0f01 	cmp.w	sl, #1
 800ad42:	f200 8117 	bhi.w	800af74 <_scanf_float+0x2ac>
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	429e      	cmp	r6, r3
 800ad4a:	f200 8108 	bhi.w	800af5e <_scanf_float+0x296>
 800ad4e:	2001      	movs	r0, #1
 800ad50:	b007      	add	sp, #28
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ad5a:	2a0d      	cmp	r2, #13
 800ad5c:	d8e6      	bhi.n	800ad2c <_scanf_float+0x64>
 800ad5e:	a101      	add	r1, pc, #4	@ (adr r1, 800ad64 <_scanf_float+0x9c>)
 800ad60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ad64:	0800aeab 	.word	0x0800aeab
 800ad68:	0800ad2d 	.word	0x0800ad2d
 800ad6c:	0800ad2d 	.word	0x0800ad2d
 800ad70:	0800ad2d 	.word	0x0800ad2d
 800ad74:	0800af0b 	.word	0x0800af0b
 800ad78:	0800aee3 	.word	0x0800aee3
 800ad7c:	0800ad2d 	.word	0x0800ad2d
 800ad80:	0800ad2d 	.word	0x0800ad2d
 800ad84:	0800aeb9 	.word	0x0800aeb9
 800ad88:	0800ad2d 	.word	0x0800ad2d
 800ad8c:	0800ad2d 	.word	0x0800ad2d
 800ad90:	0800ad2d 	.word	0x0800ad2d
 800ad94:	0800ad2d 	.word	0x0800ad2d
 800ad98:	0800ae71 	.word	0x0800ae71
 800ad9c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ada0:	e7db      	b.n	800ad5a <_scanf_float+0x92>
 800ada2:	290e      	cmp	r1, #14
 800ada4:	d8c2      	bhi.n	800ad2c <_scanf_float+0x64>
 800ada6:	a001      	add	r0, pc, #4	@ (adr r0, 800adac <_scanf_float+0xe4>)
 800ada8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800adac:	0800ae61 	.word	0x0800ae61
 800adb0:	0800ad2d 	.word	0x0800ad2d
 800adb4:	0800ae61 	.word	0x0800ae61
 800adb8:	0800aef7 	.word	0x0800aef7
 800adbc:	0800ad2d 	.word	0x0800ad2d
 800adc0:	0800ae09 	.word	0x0800ae09
 800adc4:	0800ae47 	.word	0x0800ae47
 800adc8:	0800ae47 	.word	0x0800ae47
 800adcc:	0800ae47 	.word	0x0800ae47
 800add0:	0800ae47 	.word	0x0800ae47
 800add4:	0800ae47 	.word	0x0800ae47
 800add8:	0800ae47 	.word	0x0800ae47
 800addc:	0800ae47 	.word	0x0800ae47
 800ade0:	0800ae47 	.word	0x0800ae47
 800ade4:	0800ae47 	.word	0x0800ae47
 800ade8:	2b6e      	cmp	r3, #110	@ 0x6e
 800adea:	d809      	bhi.n	800ae00 <_scanf_float+0x138>
 800adec:	2b60      	cmp	r3, #96	@ 0x60
 800adee:	d8b2      	bhi.n	800ad56 <_scanf_float+0x8e>
 800adf0:	2b54      	cmp	r3, #84	@ 0x54
 800adf2:	d07b      	beq.n	800aeec <_scanf_float+0x224>
 800adf4:	2b59      	cmp	r3, #89	@ 0x59
 800adf6:	d199      	bne.n	800ad2c <_scanf_float+0x64>
 800adf8:	2d07      	cmp	r5, #7
 800adfa:	d197      	bne.n	800ad2c <_scanf_float+0x64>
 800adfc:	2508      	movs	r5, #8
 800adfe:	e02c      	b.n	800ae5a <_scanf_float+0x192>
 800ae00:	2b74      	cmp	r3, #116	@ 0x74
 800ae02:	d073      	beq.n	800aeec <_scanf_float+0x224>
 800ae04:	2b79      	cmp	r3, #121	@ 0x79
 800ae06:	e7f6      	b.n	800adf6 <_scanf_float+0x12e>
 800ae08:	6821      	ldr	r1, [r4, #0]
 800ae0a:	05c8      	lsls	r0, r1, #23
 800ae0c:	d51b      	bpl.n	800ae46 <_scanf_float+0x17e>
 800ae0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ae12:	6021      	str	r1, [r4, #0]
 800ae14:	f109 0901 	add.w	r9, r9, #1
 800ae18:	f1bb 0f00 	cmp.w	fp, #0
 800ae1c:	d003      	beq.n	800ae26 <_scanf_float+0x15e>
 800ae1e:	3201      	adds	r2, #1
 800ae20:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae24:	60a2      	str	r2, [r4, #8]
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	60a3      	str	r3, [r4, #8]
 800ae2c:	6923      	ldr	r3, [r4, #16]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	6123      	str	r3, [r4, #16]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	607b      	str	r3, [r7, #4]
 800ae3a:	f340 8087 	ble.w	800af4c <_scanf_float+0x284>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	3301      	adds	r3, #1
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	e765      	b.n	800ad12 <_scanf_float+0x4a>
 800ae46:	eb1a 0105 	adds.w	r1, sl, r5
 800ae4a:	f47f af6f 	bne.w	800ad2c <_scanf_float+0x64>
 800ae4e:	6822      	ldr	r2, [r4, #0]
 800ae50:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ae54:	6022      	str	r2, [r4, #0]
 800ae56:	460d      	mov	r5, r1
 800ae58:	468a      	mov	sl, r1
 800ae5a:	f806 3b01 	strb.w	r3, [r6], #1
 800ae5e:	e7e2      	b.n	800ae26 <_scanf_float+0x15e>
 800ae60:	6822      	ldr	r2, [r4, #0]
 800ae62:	0610      	lsls	r0, r2, #24
 800ae64:	f57f af62 	bpl.w	800ad2c <_scanf_float+0x64>
 800ae68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ae6c:	6022      	str	r2, [r4, #0]
 800ae6e:	e7f4      	b.n	800ae5a <_scanf_float+0x192>
 800ae70:	f1ba 0f00 	cmp.w	sl, #0
 800ae74:	d10e      	bne.n	800ae94 <_scanf_float+0x1cc>
 800ae76:	f1b9 0f00 	cmp.w	r9, #0
 800ae7a:	d10e      	bne.n	800ae9a <_scanf_float+0x1d2>
 800ae7c:	6822      	ldr	r2, [r4, #0]
 800ae7e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ae82:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ae86:	d108      	bne.n	800ae9a <_scanf_float+0x1d2>
 800ae88:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ae8c:	6022      	str	r2, [r4, #0]
 800ae8e:	f04f 0a01 	mov.w	sl, #1
 800ae92:	e7e2      	b.n	800ae5a <_scanf_float+0x192>
 800ae94:	f1ba 0f02 	cmp.w	sl, #2
 800ae98:	d055      	beq.n	800af46 <_scanf_float+0x27e>
 800ae9a:	2d01      	cmp	r5, #1
 800ae9c:	d002      	beq.n	800aea4 <_scanf_float+0x1dc>
 800ae9e:	2d04      	cmp	r5, #4
 800aea0:	f47f af44 	bne.w	800ad2c <_scanf_float+0x64>
 800aea4:	3501      	adds	r5, #1
 800aea6:	b2ed      	uxtb	r5, r5
 800aea8:	e7d7      	b.n	800ae5a <_scanf_float+0x192>
 800aeaa:	f1ba 0f01 	cmp.w	sl, #1
 800aeae:	f47f af3d 	bne.w	800ad2c <_scanf_float+0x64>
 800aeb2:	f04f 0a02 	mov.w	sl, #2
 800aeb6:	e7d0      	b.n	800ae5a <_scanf_float+0x192>
 800aeb8:	b97d      	cbnz	r5, 800aeda <_scanf_float+0x212>
 800aeba:	f1b9 0f00 	cmp.w	r9, #0
 800aebe:	f47f af38 	bne.w	800ad32 <_scanf_float+0x6a>
 800aec2:	6822      	ldr	r2, [r4, #0]
 800aec4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aec8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aecc:	f040 8108 	bne.w	800b0e0 <_scanf_float+0x418>
 800aed0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	2501      	movs	r5, #1
 800aed8:	e7bf      	b.n	800ae5a <_scanf_float+0x192>
 800aeda:	2d03      	cmp	r5, #3
 800aedc:	d0e2      	beq.n	800aea4 <_scanf_float+0x1dc>
 800aede:	2d05      	cmp	r5, #5
 800aee0:	e7de      	b.n	800aea0 <_scanf_float+0x1d8>
 800aee2:	2d02      	cmp	r5, #2
 800aee4:	f47f af22 	bne.w	800ad2c <_scanf_float+0x64>
 800aee8:	2503      	movs	r5, #3
 800aeea:	e7b6      	b.n	800ae5a <_scanf_float+0x192>
 800aeec:	2d06      	cmp	r5, #6
 800aeee:	f47f af1d 	bne.w	800ad2c <_scanf_float+0x64>
 800aef2:	2507      	movs	r5, #7
 800aef4:	e7b1      	b.n	800ae5a <_scanf_float+0x192>
 800aef6:	6822      	ldr	r2, [r4, #0]
 800aef8:	0591      	lsls	r1, r2, #22
 800aefa:	f57f af17 	bpl.w	800ad2c <_scanf_float+0x64>
 800aefe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800af02:	6022      	str	r2, [r4, #0]
 800af04:	f8cd 9008 	str.w	r9, [sp, #8]
 800af08:	e7a7      	b.n	800ae5a <_scanf_float+0x192>
 800af0a:	6822      	ldr	r2, [r4, #0]
 800af0c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800af10:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800af14:	d006      	beq.n	800af24 <_scanf_float+0x25c>
 800af16:	0550      	lsls	r0, r2, #21
 800af18:	f57f af08 	bpl.w	800ad2c <_scanf_float+0x64>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	f000 80de 	beq.w	800b0e0 <_scanf_float+0x418>
 800af24:	0591      	lsls	r1, r2, #22
 800af26:	bf58      	it	pl
 800af28:	9902      	ldrpl	r1, [sp, #8]
 800af2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800af2e:	bf58      	it	pl
 800af30:	eba9 0101 	subpl.w	r1, r9, r1
 800af34:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800af38:	bf58      	it	pl
 800af3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800af3e:	6022      	str	r2, [r4, #0]
 800af40:	f04f 0900 	mov.w	r9, #0
 800af44:	e789      	b.n	800ae5a <_scanf_float+0x192>
 800af46:	f04f 0a03 	mov.w	sl, #3
 800af4a:	e786      	b.n	800ae5a <_scanf_float+0x192>
 800af4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800af50:	4639      	mov	r1, r7
 800af52:	4640      	mov	r0, r8
 800af54:	4798      	blx	r3
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f aedb 	beq.w	800ad12 <_scanf_float+0x4a>
 800af5c:	e6e6      	b.n	800ad2c <_scanf_float+0x64>
 800af5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af66:	463a      	mov	r2, r7
 800af68:	4640      	mov	r0, r8
 800af6a:	4798      	blx	r3
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	3b01      	subs	r3, #1
 800af70:	6123      	str	r3, [r4, #16]
 800af72:	e6e8      	b.n	800ad46 <_scanf_float+0x7e>
 800af74:	1e6b      	subs	r3, r5, #1
 800af76:	2b06      	cmp	r3, #6
 800af78:	d824      	bhi.n	800afc4 <_scanf_float+0x2fc>
 800af7a:	2d02      	cmp	r5, #2
 800af7c:	d836      	bhi.n	800afec <_scanf_float+0x324>
 800af7e:	9b01      	ldr	r3, [sp, #4]
 800af80:	429e      	cmp	r6, r3
 800af82:	f67f aee4 	bls.w	800ad4e <_scanf_float+0x86>
 800af86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800af8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af8e:	463a      	mov	r2, r7
 800af90:	4640      	mov	r0, r8
 800af92:	4798      	blx	r3
 800af94:	6923      	ldr	r3, [r4, #16]
 800af96:	3b01      	subs	r3, #1
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	e7f0      	b.n	800af7e <_scanf_float+0x2b6>
 800af9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afa0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800afa4:	463a      	mov	r2, r7
 800afa6:	4640      	mov	r0, r8
 800afa8:	4798      	blx	r3
 800afaa:	6923      	ldr	r3, [r4, #16]
 800afac:	3b01      	subs	r3, #1
 800afae:	6123      	str	r3, [r4, #16]
 800afb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afb4:	fa5f fa8a 	uxtb.w	sl, sl
 800afb8:	f1ba 0f02 	cmp.w	sl, #2
 800afbc:	d1ee      	bne.n	800af9c <_scanf_float+0x2d4>
 800afbe:	3d03      	subs	r5, #3
 800afc0:	b2ed      	uxtb	r5, r5
 800afc2:	1b76      	subs	r6, r6, r5
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	05da      	lsls	r2, r3, #23
 800afc8:	d530      	bpl.n	800b02c <_scanf_float+0x364>
 800afca:	055b      	lsls	r3, r3, #21
 800afcc:	d511      	bpl.n	800aff2 <_scanf_float+0x32a>
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	429e      	cmp	r6, r3
 800afd2:	f67f aebc 	bls.w	800ad4e <_scanf_float+0x86>
 800afd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800afda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afde:	463a      	mov	r2, r7
 800afe0:	4640      	mov	r0, r8
 800afe2:	4798      	blx	r3
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	e7f0      	b.n	800afce <_scanf_float+0x306>
 800afec:	46aa      	mov	sl, r5
 800afee:	46b3      	mov	fp, r6
 800aff0:	e7de      	b.n	800afb0 <_scanf_float+0x2e8>
 800aff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aff6:	6923      	ldr	r3, [r4, #16]
 800aff8:	2965      	cmp	r1, #101	@ 0x65
 800affa:	f103 33ff 	add.w	r3, r3, #4294967295
 800affe:	f106 35ff 	add.w	r5, r6, #4294967295
 800b002:	6123      	str	r3, [r4, #16]
 800b004:	d00c      	beq.n	800b020 <_scanf_float+0x358>
 800b006:	2945      	cmp	r1, #69	@ 0x45
 800b008:	d00a      	beq.n	800b020 <_scanf_float+0x358>
 800b00a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b00e:	463a      	mov	r2, r7
 800b010:	4640      	mov	r0, r8
 800b012:	4798      	blx	r3
 800b014:	6923      	ldr	r3, [r4, #16]
 800b016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	1eb5      	subs	r5, r6, #2
 800b01e:	6123      	str	r3, [r4, #16]
 800b020:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b024:	463a      	mov	r2, r7
 800b026:	4640      	mov	r0, r8
 800b028:	4798      	blx	r3
 800b02a:	462e      	mov	r6, r5
 800b02c:	6822      	ldr	r2, [r4, #0]
 800b02e:	f012 0210 	ands.w	r2, r2, #16
 800b032:	d001      	beq.n	800b038 <_scanf_float+0x370>
 800b034:	2000      	movs	r0, #0
 800b036:	e68b      	b.n	800ad50 <_scanf_float+0x88>
 800b038:	7032      	strb	r2, [r6, #0]
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b044:	d11c      	bne.n	800b080 <_scanf_float+0x3b8>
 800b046:	9b02      	ldr	r3, [sp, #8]
 800b048:	454b      	cmp	r3, r9
 800b04a:	eba3 0209 	sub.w	r2, r3, r9
 800b04e:	d123      	bne.n	800b098 <_scanf_float+0x3d0>
 800b050:	9901      	ldr	r1, [sp, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	4640      	mov	r0, r8
 800b056:	f002 fd2f 	bl	800dab8 <_strtod_r>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	6821      	ldr	r1, [r4, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f011 0f02 	tst.w	r1, #2
 800b064:	ec57 6b10 	vmov	r6, r7, d0
 800b068:	f103 0204 	add.w	r2, r3, #4
 800b06c:	d01f      	beq.n	800b0ae <_scanf_float+0x3e6>
 800b06e:	9903      	ldr	r1, [sp, #12]
 800b070:	600a      	str	r2, [r1, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	e9c3 6700 	strd	r6, r7, [r3]
 800b078:	68e3      	ldr	r3, [r4, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60e3      	str	r3, [r4, #12]
 800b07e:	e7d9      	b.n	800b034 <_scanf_float+0x36c>
 800b080:	9b04      	ldr	r3, [sp, #16]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0e4      	beq.n	800b050 <_scanf_float+0x388>
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	230a      	movs	r3, #10
 800b08a:	3101      	adds	r1, #1
 800b08c:	4640      	mov	r0, r8
 800b08e:	f7ff f9b7 	bl	800a400 <_strtol_r>
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	9e05      	ldr	r6, [sp, #20]
 800b096:	1ac2      	subs	r2, r0, r3
 800b098:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b09c:	429e      	cmp	r6, r3
 800b09e:	bf28      	it	cs
 800b0a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b0a4:	4910      	ldr	r1, [pc, #64]	@ (800b0e8 <_scanf_float+0x420>)
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f000 f95c 	bl	800b364 <siprintf>
 800b0ac:	e7d0      	b.n	800b050 <_scanf_float+0x388>
 800b0ae:	f011 0f04 	tst.w	r1, #4
 800b0b2:	9903      	ldr	r1, [sp, #12]
 800b0b4:	600a      	str	r2, [r1, #0]
 800b0b6:	d1dc      	bne.n	800b072 <_scanf_float+0x3aa>
 800b0b8:	681d      	ldr	r5, [r3, #0]
 800b0ba:	4632      	mov	r2, r6
 800b0bc:	463b      	mov	r3, r7
 800b0be:	4630      	mov	r0, r6
 800b0c0:	4639      	mov	r1, r7
 800b0c2:	f7f5 fd4b 	bl	8000b5c <__aeabi_dcmpun>
 800b0c6:	b128      	cbz	r0, 800b0d4 <_scanf_float+0x40c>
 800b0c8:	4808      	ldr	r0, [pc, #32]	@ (800b0ec <_scanf_float+0x424>)
 800b0ca:	f000 faef 	bl	800b6ac <nanf>
 800b0ce:	ed85 0a00 	vstr	s0, [r5]
 800b0d2:	e7d1      	b.n	800b078 <_scanf_float+0x3b0>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 fd9e 	bl	8000c18 <__aeabi_d2f>
 800b0dc:	6028      	str	r0, [r5, #0]
 800b0de:	e7cb      	b.n	800b078 <_scanf_float+0x3b0>
 800b0e0:	f04f 0900 	mov.w	r9, #0
 800b0e4:	e629      	b.n	800ad3a <_scanf_float+0x72>
 800b0e6:	bf00      	nop
 800b0e8:	08010dcf 	.word	0x08010dcf
 800b0ec:	0801107f 	.word	0x0801107f

0800b0f0 <std>:
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	b510      	push	{r4, lr}
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b0fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0fe:	6083      	str	r3, [r0, #8]
 800b100:	8181      	strh	r1, [r0, #12]
 800b102:	6643      	str	r3, [r0, #100]	@ 0x64
 800b104:	81c2      	strh	r2, [r0, #14]
 800b106:	6183      	str	r3, [r0, #24]
 800b108:	4619      	mov	r1, r3
 800b10a:	2208      	movs	r2, #8
 800b10c:	305c      	adds	r0, #92	@ 0x5c
 800b10e:	f000 fa4d 	bl	800b5ac <memset>
 800b112:	4b0d      	ldr	r3, [pc, #52]	@ (800b148 <std+0x58>)
 800b114:	6263      	str	r3, [r4, #36]	@ 0x24
 800b116:	4b0d      	ldr	r3, [pc, #52]	@ (800b14c <std+0x5c>)
 800b118:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b11a:	4b0d      	ldr	r3, [pc, #52]	@ (800b150 <std+0x60>)
 800b11c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b11e:	4b0d      	ldr	r3, [pc, #52]	@ (800b154 <std+0x64>)
 800b120:	6323      	str	r3, [r4, #48]	@ 0x30
 800b122:	4b0d      	ldr	r3, [pc, #52]	@ (800b158 <std+0x68>)
 800b124:	6224      	str	r4, [r4, #32]
 800b126:	429c      	cmp	r4, r3
 800b128:	d006      	beq.n	800b138 <std+0x48>
 800b12a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b12e:	4294      	cmp	r4, r2
 800b130:	d002      	beq.n	800b138 <std+0x48>
 800b132:	33d0      	adds	r3, #208	@ 0xd0
 800b134:	429c      	cmp	r4, r3
 800b136:	d105      	bne.n	800b144 <std+0x54>
 800b138:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b140:	f000 bab0 	b.w	800b6a4 <__retarget_lock_init_recursive>
 800b144:	bd10      	pop	{r4, pc}
 800b146:	bf00      	nop
 800b148:	0800b3f9 	.word	0x0800b3f9
 800b14c:	0800b41f 	.word	0x0800b41f
 800b150:	0800b457 	.word	0x0800b457
 800b154:	0800b47b 	.word	0x0800b47b
 800b158:	20000d48 	.word	0x20000d48

0800b15c <stdio_exit_handler>:
 800b15c:	4a02      	ldr	r2, [pc, #8]	@ (800b168 <stdio_exit_handler+0xc>)
 800b15e:	4903      	ldr	r1, [pc, #12]	@ (800b16c <stdio_exit_handler+0x10>)
 800b160:	4803      	ldr	r0, [pc, #12]	@ (800b170 <stdio_exit_handler+0x14>)
 800b162:	f000 b869 	b.w	800b238 <_fwalk_sglue>
 800b166:	bf00      	nop
 800b168:	20000028 	.word	0x20000028
 800b16c:	0800e735 	.word	0x0800e735
 800b170:	20000038 	.word	0x20000038

0800b174 <cleanup_stdio>:
 800b174:	6841      	ldr	r1, [r0, #4]
 800b176:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a8 <cleanup_stdio+0x34>)
 800b178:	4299      	cmp	r1, r3
 800b17a:	b510      	push	{r4, lr}
 800b17c:	4604      	mov	r4, r0
 800b17e:	d001      	beq.n	800b184 <cleanup_stdio+0x10>
 800b180:	f003 fad8 	bl	800e734 <_fflush_r>
 800b184:	68a1      	ldr	r1, [r4, #8]
 800b186:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <cleanup_stdio+0x38>)
 800b188:	4299      	cmp	r1, r3
 800b18a:	d002      	beq.n	800b192 <cleanup_stdio+0x1e>
 800b18c:	4620      	mov	r0, r4
 800b18e:	f003 fad1 	bl	800e734 <_fflush_r>
 800b192:	68e1      	ldr	r1, [r4, #12]
 800b194:	4b06      	ldr	r3, [pc, #24]	@ (800b1b0 <cleanup_stdio+0x3c>)
 800b196:	4299      	cmp	r1, r3
 800b198:	d004      	beq.n	800b1a4 <cleanup_stdio+0x30>
 800b19a:	4620      	mov	r0, r4
 800b19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1a0:	f003 bac8 	b.w	800e734 <_fflush_r>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000d48 	.word	0x20000d48
 800b1ac:	20000db0 	.word	0x20000db0
 800b1b0:	20000e18 	.word	0x20000e18

0800b1b4 <global_stdio_init.part.0>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b1e4 <global_stdio_init.part.0+0x30>)
 800b1b8:	4c0b      	ldr	r4, [pc, #44]	@ (800b1e8 <global_stdio_init.part.0+0x34>)
 800b1ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b1ec <global_stdio_init.part.0+0x38>)
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2104      	movs	r1, #4
 800b1c4:	f7ff ff94 	bl	800b0f0 <std>
 800b1c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	2109      	movs	r1, #9
 800b1d0:	f7ff ff8e 	bl	800b0f0 <std>
 800b1d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b1d8:	2202      	movs	r2, #2
 800b1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1de:	2112      	movs	r1, #18
 800b1e0:	f7ff bf86 	b.w	800b0f0 <std>
 800b1e4:	20000e80 	.word	0x20000e80
 800b1e8:	20000d48 	.word	0x20000d48
 800b1ec:	0800b15d 	.word	0x0800b15d

0800b1f0 <__sfp_lock_acquire>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	@ (800b1f8 <__sfp_lock_acquire+0x8>)
 800b1f2:	f000 ba58 	b.w	800b6a6 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20000e89 	.word	0x20000e89

0800b1fc <__sfp_lock_release>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	@ (800b204 <__sfp_lock_release+0x8>)
 800b1fe:	f000 ba53 	b.w	800b6a8 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	20000e89 	.word	0x20000e89

0800b208 <__sinit>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	f7ff fff0 	bl	800b1f0 <__sfp_lock_acquire>
 800b210:	6a23      	ldr	r3, [r4, #32]
 800b212:	b11b      	cbz	r3, 800b21c <__sinit+0x14>
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f7ff bff0 	b.w	800b1fc <__sfp_lock_release>
 800b21c:	4b04      	ldr	r3, [pc, #16]	@ (800b230 <__sinit+0x28>)
 800b21e:	6223      	str	r3, [r4, #32]
 800b220:	4b04      	ldr	r3, [pc, #16]	@ (800b234 <__sinit+0x2c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1f5      	bne.n	800b214 <__sinit+0xc>
 800b228:	f7ff ffc4 	bl	800b1b4 <global_stdio_init.part.0>
 800b22c:	e7f2      	b.n	800b214 <__sinit+0xc>
 800b22e:	bf00      	nop
 800b230:	0800b175 	.word	0x0800b175
 800b234:	20000e80 	.word	0x20000e80

0800b238 <_fwalk_sglue>:
 800b238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b23c:	4607      	mov	r7, r0
 800b23e:	4688      	mov	r8, r1
 800b240:	4614      	mov	r4, r2
 800b242:	2600      	movs	r6, #0
 800b244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b248:	f1b9 0901 	subs.w	r9, r9, #1
 800b24c:	d505      	bpl.n	800b25a <_fwalk_sglue+0x22>
 800b24e:	6824      	ldr	r4, [r4, #0]
 800b250:	2c00      	cmp	r4, #0
 800b252:	d1f7      	bne.n	800b244 <_fwalk_sglue+0xc>
 800b254:	4630      	mov	r0, r6
 800b256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d907      	bls.n	800b270 <_fwalk_sglue+0x38>
 800b260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b264:	3301      	adds	r3, #1
 800b266:	d003      	beq.n	800b270 <_fwalk_sglue+0x38>
 800b268:	4629      	mov	r1, r5
 800b26a:	4638      	mov	r0, r7
 800b26c:	47c0      	blx	r8
 800b26e:	4306      	orrs	r6, r0
 800b270:	3568      	adds	r5, #104	@ 0x68
 800b272:	e7e9      	b.n	800b248 <_fwalk_sglue+0x10>

0800b274 <iprintf>:
 800b274:	b40f      	push	{r0, r1, r2, r3}
 800b276:	b507      	push	{r0, r1, r2, lr}
 800b278:	4906      	ldr	r1, [pc, #24]	@ (800b294 <iprintf+0x20>)
 800b27a:	ab04      	add	r3, sp, #16
 800b27c:	6808      	ldr	r0, [r1, #0]
 800b27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b282:	6881      	ldr	r1, [r0, #8]
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	f002 ff6b 	bl	800e160 <_vfiprintf_r>
 800b28a:	b003      	add	sp, #12
 800b28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b290:	b004      	add	sp, #16
 800b292:	4770      	bx	lr
 800b294:	20000034 	.word	0x20000034

0800b298 <putchar>:
 800b298:	4b02      	ldr	r3, [pc, #8]	@ (800b2a4 <putchar+0xc>)
 800b29a:	4601      	mov	r1, r0
 800b29c:	6818      	ldr	r0, [r3, #0]
 800b29e:	6882      	ldr	r2, [r0, #8]
 800b2a0:	f003 bad2 	b.w	800e848 <_putc_r>
 800b2a4:	20000034 	.word	0x20000034

0800b2a8 <_puts_r>:
 800b2a8:	6a03      	ldr	r3, [r0, #32]
 800b2aa:	b570      	push	{r4, r5, r6, lr}
 800b2ac:	6884      	ldr	r4, [r0, #8]
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	460e      	mov	r6, r1
 800b2b2:	b90b      	cbnz	r3, 800b2b8 <_puts_r+0x10>
 800b2b4:	f7ff ffa8 	bl	800b208 <__sinit>
 800b2b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2ba:	07db      	lsls	r3, r3, #31
 800b2bc:	d405      	bmi.n	800b2ca <_puts_r+0x22>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	0598      	lsls	r0, r3, #22
 800b2c2:	d402      	bmi.n	800b2ca <_puts_r+0x22>
 800b2c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2c6:	f000 f9ee 	bl	800b6a6 <__retarget_lock_acquire_recursive>
 800b2ca:	89a3      	ldrh	r3, [r4, #12]
 800b2cc:	0719      	lsls	r1, r3, #28
 800b2ce:	d502      	bpl.n	800b2d6 <_puts_r+0x2e>
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d135      	bne.n	800b342 <_puts_r+0x9a>
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 f911 	bl	800b500 <__swsetup_r>
 800b2de:	b380      	cbz	r0, 800b342 <_puts_r+0x9a>
 800b2e0:	f04f 35ff 	mov.w	r5, #4294967295
 800b2e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2e6:	07da      	lsls	r2, r3, #31
 800b2e8:	d405      	bmi.n	800b2f6 <_puts_r+0x4e>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	059b      	lsls	r3, r3, #22
 800b2ee:	d402      	bmi.n	800b2f6 <_puts_r+0x4e>
 800b2f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2f2:	f000 f9d9 	bl	800b6a8 <__retarget_lock_release_recursive>
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	bd70      	pop	{r4, r5, r6, pc}
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	da04      	bge.n	800b308 <_puts_r+0x60>
 800b2fe:	69a2      	ldr	r2, [r4, #24]
 800b300:	429a      	cmp	r2, r3
 800b302:	dc17      	bgt.n	800b334 <_puts_r+0x8c>
 800b304:	290a      	cmp	r1, #10
 800b306:	d015      	beq.n	800b334 <_puts_r+0x8c>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	6022      	str	r2, [r4, #0]
 800b30e:	7019      	strb	r1, [r3, #0]
 800b310:	68a3      	ldr	r3, [r4, #8]
 800b312:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b316:	3b01      	subs	r3, #1
 800b318:	60a3      	str	r3, [r4, #8]
 800b31a:	2900      	cmp	r1, #0
 800b31c:	d1ed      	bne.n	800b2fa <_puts_r+0x52>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	da11      	bge.n	800b346 <_puts_r+0x9e>
 800b322:	4622      	mov	r2, r4
 800b324:	210a      	movs	r1, #10
 800b326:	4628      	mov	r0, r5
 800b328:	f000 f8ab 	bl	800b482 <__swbuf_r>
 800b32c:	3001      	adds	r0, #1
 800b32e:	d0d7      	beq.n	800b2e0 <_puts_r+0x38>
 800b330:	250a      	movs	r5, #10
 800b332:	e7d7      	b.n	800b2e4 <_puts_r+0x3c>
 800b334:	4622      	mov	r2, r4
 800b336:	4628      	mov	r0, r5
 800b338:	f000 f8a3 	bl	800b482 <__swbuf_r>
 800b33c:	3001      	adds	r0, #1
 800b33e:	d1e7      	bne.n	800b310 <_puts_r+0x68>
 800b340:	e7ce      	b.n	800b2e0 <_puts_r+0x38>
 800b342:	3e01      	subs	r6, #1
 800b344:	e7e4      	b.n	800b310 <_puts_r+0x68>
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	6022      	str	r2, [r4, #0]
 800b34c:	220a      	movs	r2, #10
 800b34e:	701a      	strb	r2, [r3, #0]
 800b350:	e7ee      	b.n	800b330 <_puts_r+0x88>
	...

0800b354 <puts>:
 800b354:	4b02      	ldr	r3, [pc, #8]	@ (800b360 <puts+0xc>)
 800b356:	4601      	mov	r1, r0
 800b358:	6818      	ldr	r0, [r3, #0]
 800b35a:	f7ff bfa5 	b.w	800b2a8 <_puts_r>
 800b35e:	bf00      	nop
 800b360:	20000034 	.word	0x20000034

0800b364 <siprintf>:
 800b364:	b40e      	push	{r1, r2, r3}
 800b366:	b500      	push	{lr}
 800b368:	b09c      	sub	sp, #112	@ 0x70
 800b36a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b36c:	9002      	str	r0, [sp, #8]
 800b36e:	9006      	str	r0, [sp, #24]
 800b370:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b374:	4809      	ldr	r0, [pc, #36]	@ (800b39c <siprintf+0x38>)
 800b376:	9107      	str	r1, [sp, #28]
 800b378:	9104      	str	r1, [sp, #16]
 800b37a:	4909      	ldr	r1, [pc, #36]	@ (800b3a0 <siprintf+0x3c>)
 800b37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b380:	9105      	str	r1, [sp, #20]
 800b382:	6800      	ldr	r0, [r0, #0]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	a902      	add	r1, sp, #8
 800b388:	f002 fbf8 	bl	800db7c <_svfiprintf_r>
 800b38c:	9b02      	ldr	r3, [sp, #8]
 800b38e:	2200      	movs	r2, #0
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	b01c      	add	sp, #112	@ 0x70
 800b394:	f85d eb04 	ldr.w	lr, [sp], #4
 800b398:	b003      	add	sp, #12
 800b39a:	4770      	bx	lr
 800b39c:	20000034 	.word	0x20000034
 800b3a0:	ffff0208 	.word	0xffff0208

0800b3a4 <siscanf>:
 800b3a4:	b40e      	push	{r1, r2, r3}
 800b3a6:	b530      	push	{r4, r5, lr}
 800b3a8:	b09c      	sub	sp, #112	@ 0x70
 800b3aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b3ac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b3b0:	f854 5b04 	ldr.w	r5, [r4], #4
 800b3b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b3b8:	9002      	str	r0, [sp, #8]
 800b3ba:	9006      	str	r0, [sp, #24]
 800b3bc:	f7f4 ff70 	bl	80002a0 <strlen>
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f0 <siscanf+0x4c>)
 800b3c2:	9003      	str	r0, [sp, #12]
 800b3c4:	9007      	str	r0, [sp, #28]
 800b3c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3c8:	480a      	ldr	r0, [pc, #40]	@ (800b3f4 <siscanf+0x50>)
 800b3ca:	9401      	str	r4, [sp, #4]
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800b3d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4623      	mov	r3, r4
 800b3de:	a902      	add	r1, sp, #8
 800b3e0:	6800      	ldr	r0, [r0, #0]
 800b3e2:	f002 fd1f 	bl	800de24 <__ssvfiscanf_r>
 800b3e6:	b01c      	add	sp, #112	@ 0x70
 800b3e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3ec:	b003      	add	sp, #12
 800b3ee:	4770      	bx	lr
 800b3f0:	0800b41b 	.word	0x0800b41b
 800b3f4:	20000034 	.word	0x20000034

0800b3f8 <__sread>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b400:	f000 f902 	bl	800b608 <_read_r>
 800b404:	2800      	cmp	r0, #0
 800b406:	bfab      	itete	ge
 800b408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b40a:	89a3      	ldrhlt	r3, [r4, #12]
 800b40c:	181b      	addge	r3, r3, r0
 800b40e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b412:	bfac      	ite	ge
 800b414:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b416:	81a3      	strhlt	r3, [r4, #12]
 800b418:	bd10      	pop	{r4, pc}

0800b41a <__seofread>:
 800b41a:	2000      	movs	r0, #0
 800b41c:	4770      	bx	lr

0800b41e <__swrite>:
 800b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	461f      	mov	r7, r3
 800b424:	898b      	ldrh	r3, [r1, #12]
 800b426:	05db      	lsls	r3, r3, #23
 800b428:	4605      	mov	r5, r0
 800b42a:	460c      	mov	r4, r1
 800b42c:	4616      	mov	r6, r2
 800b42e:	d505      	bpl.n	800b43c <__swrite+0x1e>
 800b430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b434:	2302      	movs	r3, #2
 800b436:	2200      	movs	r2, #0
 800b438:	f000 f8d4 	bl	800b5e4 <_lseek_r>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b442:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b446:	81a3      	strh	r3, [r4, #12]
 800b448:	4632      	mov	r2, r6
 800b44a:	463b      	mov	r3, r7
 800b44c:	4628      	mov	r0, r5
 800b44e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b452:	f000 b8eb 	b.w	800b62c <_write_r>

0800b456 <__sseek>:
 800b456:	b510      	push	{r4, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b45e:	f000 f8c1 	bl	800b5e4 <_lseek_r>
 800b462:	1c43      	adds	r3, r0, #1
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	bf15      	itete	ne
 800b468:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b46a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b46e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b472:	81a3      	strheq	r3, [r4, #12]
 800b474:	bf18      	it	ne
 800b476:	81a3      	strhne	r3, [r4, #12]
 800b478:	bd10      	pop	{r4, pc}

0800b47a <__sclose>:
 800b47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b47e:	f000 b8a1 	b.w	800b5c4 <_close_r>

0800b482 <__swbuf_r>:
 800b482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b484:	460e      	mov	r6, r1
 800b486:	4614      	mov	r4, r2
 800b488:	4605      	mov	r5, r0
 800b48a:	b118      	cbz	r0, 800b494 <__swbuf_r+0x12>
 800b48c:	6a03      	ldr	r3, [r0, #32]
 800b48e:	b90b      	cbnz	r3, 800b494 <__swbuf_r+0x12>
 800b490:	f7ff feba 	bl	800b208 <__sinit>
 800b494:	69a3      	ldr	r3, [r4, #24]
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	071a      	lsls	r2, r3, #28
 800b49c:	d501      	bpl.n	800b4a2 <__swbuf_r+0x20>
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	b943      	cbnz	r3, 800b4b4 <__swbuf_r+0x32>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 f82b 	bl	800b500 <__swsetup_r>
 800b4aa:	b118      	cbz	r0, 800b4b4 <__swbuf_r+0x32>
 800b4ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	6922      	ldr	r2, [r4, #16]
 800b4b8:	1a98      	subs	r0, r3, r2
 800b4ba:	6963      	ldr	r3, [r4, #20]
 800b4bc:	b2f6      	uxtb	r6, r6
 800b4be:	4283      	cmp	r3, r0
 800b4c0:	4637      	mov	r7, r6
 800b4c2:	dc05      	bgt.n	800b4d0 <__swbuf_r+0x4e>
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f003 f934 	bl	800e734 <_fflush_r>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1ed      	bne.n	800b4ac <__swbuf_r+0x2a>
 800b4d0:	68a3      	ldr	r3, [r4, #8]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	60a3      	str	r3, [r4, #8]
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	6022      	str	r2, [r4, #0]
 800b4dc:	701e      	strb	r6, [r3, #0]
 800b4de:	6962      	ldr	r2, [r4, #20]
 800b4e0:	1c43      	adds	r3, r0, #1
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d004      	beq.n	800b4f0 <__swbuf_r+0x6e>
 800b4e6:	89a3      	ldrh	r3, [r4, #12]
 800b4e8:	07db      	lsls	r3, r3, #31
 800b4ea:	d5e1      	bpl.n	800b4b0 <__swbuf_r+0x2e>
 800b4ec:	2e0a      	cmp	r6, #10
 800b4ee:	d1df      	bne.n	800b4b0 <__swbuf_r+0x2e>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f003 f91e 	bl	800e734 <_fflush_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0d9      	beq.n	800b4b0 <__swbuf_r+0x2e>
 800b4fc:	e7d6      	b.n	800b4ac <__swbuf_r+0x2a>
	...

0800b500 <__swsetup_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4b29      	ldr	r3, [pc, #164]	@ (800b5a8 <__swsetup_r+0xa8>)
 800b504:	4605      	mov	r5, r0
 800b506:	6818      	ldr	r0, [r3, #0]
 800b508:	460c      	mov	r4, r1
 800b50a:	b118      	cbz	r0, 800b514 <__swsetup_r+0x14>
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b90b      	cbnz	r3, 800b514 <__swsetup_r+0x14>
 800b510:	f7ff fe7a 	bl	800b208 <__sinit>
 800b514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b518:	0719      	lsls	r1, r3, #28
 800b51a:	d422      	bmi.n	800b562 <__swsetup_r+0x62>
 800b51c:	06da      	lsls	r2, r3, #27
 800b51e:	d407      	bmi.n	800b530 <__swsetup_r+0x30>
 800b520:	2209      	movs	r2, #9
 800b522:	602a      	str	r2, [r5, #0]
 800b524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	e033      	b.n	800b598 <__swsetup_r+0x98>
 800b530:	0758      	lsls	r0, r3, #29
 800b532:	d512      	bpl.n	800b55a <__swsetup_r+0x5a>
 800b534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b536:	b141      	cbz	r1, 800b54a <__swsetup_r+0x4a>
 800b538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b53c:	4299      	cmp	r1, r3
 800b53e:	d002      	beq.n	800b546 <__swsetup_r+0x46>
 800b540:	4628      	mov	r0, r5
 800b542:	f000 ff05 	bl	800c350 <_free_r>
 800b546:	2300      	movs	r3, #0
 800b548:	6363      	str	r3, [r4, #52]	@ 0x34
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b550:	81a3      	strh	r3, [r4, #12]
 800b552:	2300      	movs	r3, #0
 800b554:	6063      	str	r3, [r4, #4]
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0308 	orr.w	r3, r3, #8
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	6923      	ldr	r3, [r4, #16]
 800b564:	b94b      	cbnz	r3, 800b57a <__swsetup_r+0x7a>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b570:	d003      	beq.n	800b57a <__swsetup_r+0x7a>
 800b572:	4621      	mov	r1, r4
 800b574:	4628      	mov	r0, r5
 800b576:	f003 f92b 	bl	800e7d0 <__smakebuf_r>
 800b57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57e:	f013 0201 	ands.w	r2, r3, #1
 800b582:	d00a      	beq.n	800b59a <__swsetup_r+0x9a>
 800b584:	2200      	movs	r2, #0
 800b586:	60a2      	str	r2, [r4, #8]
 800b588:	6962      	ldr	r2, [r4, #20]
 800b58a:	4252      	negs	r2, r2
 800b58c:	61a2      	str	r2, [r4, #24]
 800b58e:	6922      	ldr	r2, [r4, #16]
 800b590:	b942      	cbnz	r2, 800b5a4 <__swsetup_r+0xa4>
 800b592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b596:	d1c5      	bne.n	800b524 <__swsetup_r+0x24>
 800b598:	bd38      	pop	{r3, r4, r5, pc}
 800b59a:	0799      	lsls	r1, r3, #30
 800b59c:	bf58      	it	pl
 800b59e:	6962      	ldrpl	r2, [r4, #20]
 800b5a0:	60a2      	str	r2, [r4, #8]
 800b5a2:	e7f4      	b.n	800b58e <__swsetup_r+0x8e>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e7f7      	b.n	800b598 <__swsetup_r+0x98>
 800b5a8:	20000034 	.word	0x20000034

0800b5ac <memset>:
 800b5ac:	4402      	add	r2, r0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d100      	bne.n	800b5b6 <memset+0xa>
 800b5b4:	4770      	bx	lr
 800b5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ba:	e7f9      	b.n	800b5b0 <memset+0x4>

0800b5bc <_localeconv_r>:
 800b5bc:	4800      	ldr	r0, [pc, #0]	@ (800b5c0 <_localeconv_r+0x4>)
 800b5be:	4770      	bx	lr
 800b5c0:	20000174 	.word	0x20000174

0800b5c4 <_close_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	4d06      	ldr	r5, [pc, #24]	@ (800b5e0 <_close_r+0x1c>)
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	602b      	str	r3, [r5, #0]
 800b5d0:	f7f8 ff64 	bl	800449c <_close>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_close_r+0x1a>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_close_r+0x1a>
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	20000e84 	.word	0x20000e84

0800b5e4 <_lseek_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4d07      	ldr	r5, [pc, #28]	@ (800b604 <_lseek_r+0x20>)
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	602a      	str	r2, [r5, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	f7f8 ff79 	bl	80044ea <_lseek>
 800b5f8:	1c43      	adds	r3, r0, #1
 800b5fa:	d102      	bne.n	800b602 <_lseek_r+0x1e>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	b103      	cbz	r3, 800b602 <_lseek_r+0x1e>
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	20000e84 	.word	0x20000e84

0800b608 <_read_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d07      	ldr	r5, [pc, #28]	@ (800b628 <_read_r+0x20>)
 800b60c:	4604      	mov	r4, r0
 800b60e:	4608      	mov	r0, r1
 800b610:	4611      	mov	r1, r2
 800b612:	2200      	movs	r2, #0
 800b614:	602a      	str	r2, [r5, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	f7f8 ff07 	bl	800442a <_read>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_read_r+0x1e>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_read_r+0x1e>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	20000e84 	.word	0x20000e84

0800b62c <_write_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d07      	ldr	r5, [pc, #28]	@ (800b64c <_write_r+0x20>)
 800b630:	4604      	mov	r4, r0
 800b632:	4608      	mov	r0, r1
 800b634:	4611      	mov	r1, r2
 800b636:	2200      	movs	r2, #0
 800b638:	602a      	str	r2, [r5, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f7f8 ff12 	bl	8004464 <_write>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_write_r+0x1e>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_write_r+0x1e>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20000e84 	.word	0x20000e84

0800b650 <__errno>:
 800b650:	4b01      	ldr	r3, [pc, #4]	@ (800b658 <__errno+0x8>)
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	20000034 	.word	0x20000034

0800b65c <__libc_init_array>:
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	4d0d      	ldr	r5, [pc, #52]	@ (800b694 <__libc_init_array+0x38>)
 800b660:	4c0d      	ldr	r4, [pc, #52]	@ (800b698 <__libc_init_array+0x3c>)
 800b662:	1b64      	subs	r4, r4, r5
 800b664:	10a4      	asrs	r4, r4, #2
 800b666:	2600      	movs	r6, #0
 800b668:	42a6      	cmp	r6, r4
 800b66a:	d109      	bne.n	800b680 <__libc_init_array+0x24>
 800b66c:	4d0b      	ldr	r5, [pc, #44]	@ (800b69c <__libc_init_array+0x40>)
 800b66e:	4c0c      	ldr	r4, [pc, #48]	@ (800b6a0 <__libc_init_array+0x44>)
 800b670:	f004 fdf4 	bl	801025c <_init>
 800b674:	1b64      	subs	r4, r4, r5
 800b676:	10a4      	asrs	r4, r4, #2
 800b678:	2600      	movs	r6, #0
 800b67a:	42a6      	cmp	r6, r4
 800b67c:	d105      	bne.n	800b68a <__libc_init_array+0x2e>
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	f855 3b04 	ldr.w	r3, [r5], #4
 800b684:	4798      	blx	r3
 800b686:	3601      	adds	r6, #1
 800b688:	e7ee      	b.n	800b668 <__libc_init_array+0xc>
 800b68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b68e:	4798      	blx	r3
 800b690:	3601      	adds	r6, #1
 800b692:	e7f2      	b.n	800b67a <__libc_init_array+0x1e>
 800b694:	08011118 	.word	0x08011118
 800b698:	08011118 	.word	0x08011118
 800b69c:	08011118 	.word	0x08011118
 800b6a0:	0801111c 	.word	0x0801111c

0800b6a4 <__retarget_lock_init_recursive>:
 800b6a4:	4770      	bx	lr

0800b6a6 <__retarget_lock_acquire_recursive>:
 800b6a6:	4770      	bx	lr

0800b6a8 <__retarget_lock_release_recursive>:
 800b6a8:	4770      	bx	lr
	...

0800b6ac <nanf>:
 800b6ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b6b4 <nanf+0x8>
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	7fc00000 	.word	0x7fc00000

0800b6b8 <quorem>:
 800b6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6bc:	6903      	ldr	r3, [r0, #16]
 800b6be:	690c      	ldr	r4, [r1, #16]
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	4607      	mov	r7, r0
 800b6c4:	db7e      	blt.n	800b7c4 <quorem+0x10c>
 800b6c6:	3c01      	subs	r4, #1
 800b6c8:	f101 0814 	add.w	r8, r1, #20
 800b6cc:	00a3      	lsls	r3, r4, #2
 800b6ce:	f100 0514 	add.w	r5, r0, #20
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6d8:	9301      	str	r3, [sp, #4]
 800b6da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6ee:	d32e      	bcc.n	800b74e <quorem+0x96>
 800b6f0:	f04f 0a00 	mov.w	sl, #0
 800b6f4:	46c4      	mov	ip, r8
 800b6f6:	46ae      	mov	lr, r5
 800b6f8:	46d3      	mov	fp, sl
 800b6fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6fe:	b298      	uxth	r0, r3
 800b700:	fb06 a000 	mla	r0, r6, r0, sl
 800b704:	0c02      	lsrs	r2, r0, #16
 800b706:	0c1b      	lsrs	r3, r3, #16
 800b708:	fb06 2303 	mla	r3, r6, r3, r2
 800b70c:	f8de 2000 	ldr.w	r2, [lr]
 800b710:	b280      	uxth	r0, r0
 800b712:	b292      	uxth	r2, r2
 800b714:	1a12      	subs	r2, r2, r0
 800b716:	445a      	add	r2, fp
 800b718:	f8de 0000 	ldr.w	r0, [lr]
 800b71c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b720:	b29b      	uxth	r3, r3
 800b722:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b726:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b72a:	b292      	uxth	r2, r2
 800b72c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b730:	45e1      	cmp	r9, ip
 800b732:	f84e 2b04 	str.w	r2, [lr], #4
 800b736:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b73a:	d2de      	bcs.n	800b6fa <quorem+0x42>
 800b73c:	9b00      	ldr	r3, [sp, #0]
 800b73e:	58eb      	ldr	r3, [r5, r3]
 800b740:	b92b      	cbnz	r3, 800b74e <quorem+0x96>
 800b742:	9b01      	ldr	r3, [sp, #4]
 800b744:	3b04      	subs	r3, #4
 800b746:	429d      	cmp	r5, r3
 800b748:	461a      	mov	r2, r3
 800b74a:	d32f      	bcc.n	800b7ac <quorem+0xf4>
 800b74c:	613c      	str	r4, [r7, #16]
 800b74e:	4638      	mov	r0, r7
 800b750:	f001 f9c2 	bl	800cad8 <__mcmp>
 800b754:	2800      	cmp	r0, #0
 800b756:	db25      	blt.n	800b7a4 <quorem+0xec>
 800b758:	4629      	mov	r1, r5
 800b75a:	2000      	movs	r0, #0
 800b75c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b760:	f8d1 c000 	ldr.w	ip, [r1]
 800b764:	fa1f fe82 	uxth.w	lr, r2
 800b768:	fa1f f38c 	uxth.w	r3, ip
 800b76c:	eba3 030e 	sub.w	r3, r3, lr
 800b770:	4403      	add	r3, r0
 800b772:	0c12      	lsrs	r2, r2, #16
 800b774:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b778:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b782:	45c1      	cmp	r9, r8
 800b784:	f841 3b04 	str.w	r3, [r1], #4
 800b788:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b78c:	d2e6      	bcs.n	800b75c <quorem+0xa4>
 800b78e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b796:	b922      	cbnz	r2, 800b7a2 <quorem+0xea>
 800b798:	3b04      	subs	r3, #4
 800b79a:	429d      	cmp	r5, r3
 800b79c:	461a      	mov	r2, r3
 800b79e:	d30b      	bcc.n	800b7b8 <quorem+0x100>
 800b7a0:	613c      	str	r4, [r7, #16]
 800b7a2:	3601      	adds	r6, #1
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	b003      	add	sp, #12
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	6812      	ldr	r2, [r2, #0]
 800b7ae:	3b04      	subs	r3, #4
 800b7b0:	2a00      	cmp	r2, #0
 800b7b2:	d1cb      	bne.n	800b74c <quorem+0x94>
 800b7b4:	3c01      	subs	r4, #1
 800b7b6:	e7c6      	b.n	800b746 <quorem+0x8e>
 800b7b8:	6812      	ldr	r2, [r2, #0]
 800b7ba:	3b04      	subs	r3, #4
 800b7bc:	2a00      	cmp	r2, #0
 800b7be:	d1ef      	bne.n	800b7a0 <quorem+0xe8>
 800b7c0:	3c01      	subs	r4, #1
 800b7c2:	e7ea      	b.n	800b79a <quorem+0xe2>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e7ee      	b.n	800b7a6 <quorem+0xee>

0800b7c8 <_dtoa_r>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	69c7      	ldr	r7, [r0, #28]
 800b7ce:	b099      	sub	sp, #100	@ 0x64
 800b7d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7d4:	ec55 4b10 	vmov	r4, r5, d0
 800b7d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b7da:	9109      	str	r1, [sp, #36]	@ 0x24
 800b7dc:	4683      	mov	fp, r0
 800b7de:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7e2:	b97f      	cbnz	r7, 800b804 <_dtoa_r+0x3c>
 800b7e4:	2010      	movs	r0, #16
 800b7e6:	f000 fdfd 	bl	800c3e4 <malloc>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800b7f0:	b920      	cbnz	r0, 800b7fc <_dtoa_r+0x34>
 800b7f2:	4ba7      	ldr	r3, [pc, #668]	@ (800ba90 <_dtoa_r+0x2c8>)
 800b7f4:	21ef      	movs	r1, #239	@ 0xef
 800b7f6:	48a7      	ldr	r0, [pc, #668]	@ (800ba94 <_dtoa_r+0x2cc>)
 800b7f8:	f003 f942 	bl	800ea80 <__assert_func>
 800b7fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b800:	6007      	str	r7, [r0, #0]
 800b802:	60c7      	str	r7, [r0, #12]
 800b804:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b808:	6819      	ldr	r1, [r3, #0]
 800b80a:	b159      	cbz	r1, 800b824 <_dtoa_r+0x5c>
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	604a      	str	r2, [r1, #4]
 800b810:	2301      	movs	r3, #1
 800b812:	4093      	lsls	r3, r2
 800b814:	608b      	str	r3, [r1, #8]
 800b816:	4658      	mov	r0, fp
 800b818:	f000 feda 	bl	800c5d0 <_Bfree>
 800b81c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b820:	2200      	movs	r2, #0
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	1e2b      	subs	r3, r5, #0
 800b826:	bfb9      	ittee	lt
 800b828:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b82c:	9303      	strlt	r3, [sp, #12]
 800b82e:	2300      	movge	r3, #0
 800b830:	6033      	strge	r3, [r6, #0]
 800b832:	9f03      	ldr	r7, [sp, #12]
 800b834:	4b98      	ldr	r3, [pc, #608]	@ (800ba98 <_dtoa_r+0x2d0>)
 800b836:	bfbc      	itt	lt
 800b838:	2201      	movlt	r2, #1
 800b83a:	6032      	strlt	r2, [r6, #0]
 800b83c:	43bb      	bics	r3, r7
 800b83e:	d112      	bne.n	800b866 <_dtoa_r+0x9e>
 800b840:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b842:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b84c:	4323      	orrs	r3, r4
 800b84e:	f000 854d 	beq.w	800c2ec <_dtoa_r+0xb24>
 800b852:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b854:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800baac <_dtoa_r+0x2e4>
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 854f 	beq.w	800c2fc <_dtoa_r+0xb34>
 800b85e:	f10a 0303 	add.w	r3, sl, #3
 800b862:	f000 bd49 	b.w	800c2f8 <_dtoa_r+0xb30>
 800b866:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b86a:	2200      	movs	r2, #0
 800b86c:	ec51 0b17 	vmov	r0, r1, d7
 800b870:	2300      	movs	r3, #0
 800b872:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b876:	f7f5 f93f 	bl	8000af8 <__aeabi_dcmpeq>
 800b87a:	4680      	mov	r8, r0
 800b87c:	b158      	cbz	r0, 800b896 <_dtoa_r+0xce>
 800b87e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b880:	2301      	movs	r3, #1
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b886:	b113      	cbz	r3, 800b88e <_dtoa_r+0xc6>
 800b888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b88a:	4b84      	ldr	r3, [pc, #528]	@ (800ba9c <_dtoa_r+0x2d4>)
 800b88c:	6013      	str	r3, [r2, #0]
 800b88e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bab0 <_dtoa_r+0x2e8>
 800b892:	f000 bd33 	b.w	800c2fc <_dtoa_r+0xb34>
 800b896:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b89a:	aa16      	add	r2, sp, #88	@ 0x58
 800b89c:	a917      	add	r1, sp, #92	@ 0x5c
 800b89e:	4658      	mov	r0, fp
 800b8a0:	f001 fa3a 	bl	800cd18 <__d2b>
 800b8a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b8a8:	4681      	mov	r9, r0
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	d077      	beq.n	800b99e <_dtoa_r+0x1d6>
 800b8ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b8b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b8bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b8c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b8c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	4b74      	ldr	r3, [pc, #464]	@ (800baa0 <_dtoa_r+0x2d8>)
 800b8ce:	f7f4 fcf3 	bl	80002b8 <__aeabi_dsub>
 800b8d2:	a369      	add	r3, pc, #420	@ (adr r3, 800ba78 <_dtoa_r+0x2b0>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	f7f4 fea6 	bl	8000628 <__aeabi_dmul>
 800b8dc:	a368      	add	r3, pc, #416	@ (adr r3, 800ba80 <_dtoa_r+0x2b8>)
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f7f4 fceb 	bl	80002bc <__adddf3>
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	f7f4 fe32 	bl	8000554 <__aeabi_i2d>
 800b8f0:	a365      	add	r3, pc, #404	@ (adr r3, 800ba88 <_dtoa_r+0x2c0>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f7f4 fe97 	bl	8000628 <__aeabi_dmul>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4620      	mov	r0, r4
 800b900:	4629      	mov	r1, r5
 800b902:	f7f4 fcdb 	bl	80002bc <__adddf3>
 800b906:	4604      	mov	r4, r0
 800b908:	460d      	mov	r5, r1
 800b90a:	f7f5 f93d 	bl	8000b88 <__aeabi_d2iz>
 800b90e:	2200      	movs	r2, #0
 800b910:	4607      	mov	r7, r0
 800b912:	2300      	movs	r3, #0
 800b914:	4620      	mov	r0, r4
 800b916:	4629      	mov	r1, r5
 800b918:	f7f5 f8f8 	bl	8000b0c <__aeabi_dcmplt>
 800b91c:	b140      	cbz	r0, 800b930 <_dtoa_r+0x168>
 800b91e:	4638      	mov	r0, r7
 800b920:	f7f4 fe18 	bl	8000554 <__aeabi_i2d>
 800b924:	4622      	mov	r2, r4
 800b926:	462b      	mov	r3, r5
 800b928:	f7f5 f8e6 	bl	8000af8 <__aeabi_dcmpeq>
 800b92c:	b900      	cbnz	r0, 800b930 <_dtoa_r+0x168>
 800b92e:	3f01      	subs	r7, #1
 800b930:	2f16      	cmp	r7, #22
 800b932:	d851      	bhi.n	800b9d8 <_dtoa_r+0x210>
 800b934:	4b5b      	ldr	r3, [pc, #364]	@ (800baa4 <_dtoa_r+0x2dc>)
 800b936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b942:	f7f5 f8e3 	bl	8000b0c <__aeabi_dcmplt>
 800b946:	2800      	cmp	r0, #0
 800b948:	d048      	beq.n	800b9dc <_dtoa_r+0x214>
 800b94a:	3f01      	subs	r7, #1
 800b94c:	2300      	movs	r3, #0
 800b94e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b950:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b952:	1b9b      	subs	r3, r3, r6
 800b954:	1e5a      	subs	r2, r3, #1
 800b956:	bf44      	itt	mi
 800b958:	f1c3 0801 	rsbmi	r8, r3, #1
 800b95c:	2300      	movmi	r3, #0
 800b95e:	9208      	str	r2, [sp, #32]
 800b960:	bf54      	ite	pl
 800b962:	f04f 0800 	movpl.w	r8, #0
 800b966:	9308      	strmi	r3, [sp, #32]
 800b968:	2f00      	cmp	r7, #0
 800b96a:	db39      	blt.n	800b9e0 <_dtoa_r+0x218>
 800b96c:	9b08      	ldr	r3, [sp, #32]
 800b96e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b970:	443b      	add	r3, r7
 800b972:	9308      	str	r3, [sp, #32]
 800b974:	2300      	movs	r3, #0
 800b976:	930a      	str	r3, [sp, #40]	@ 0x28
 800b978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97a:	2b09      	cmp	r3, #9
 800b97c:	d864      	bhi.n	800ba48 <_dtoa_r+0x280>
 800b97e:	2b05      	cmp	r3, #5
 800b980:	bfc4      	itt	gt
 800b982:	3b04      	subgt	r3, #4
 800b984:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b988:	f1a3 0302 	sub.w	r3, r3, #2
 800b98c:	bfcc      	ite	gt
 800b98e:	2400      	movgt	r4, #0
 800b990:	2401      	movle	r4, #1
 800b992:	2b03      	cmp	r3, #3
 800b994:	d863      	bhi.n	800ba5e <_dtoa_r+0x296>
 800b996:	e8df f003 	tbb	[pc, r3]
 800b99a:	372a      	.short	0x372a
 800b99c:	5535      	.short	0x5535
 800b99e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b9a2:	441e      	add	r6, r3
 800b9a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b9a8:	2b20      	cmp	r3, #32
 800b9aa:	bfc1      	itttt	gt
 800b9ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b9b0:	409f      	lslgt	r7, r3
 800b9b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b9b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b9ba:	bfd6      	itet	le
 800b9bc:	f1c3 0320 	rsble	r3, r3, #32
 800b9c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b9c4:	fa04 f003 	lslle.w	r0, r4, r3
 800b9c8:	f7f4 fdb4 	bl	8000534 <__aeabi_ui2d>
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b9d2:	3e01      	subs	r6, #1
 800b9d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b9d6:	e777      	b.n	800b8c8 <_dtoa_r+0x100>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e7b8      	b.n	800b94e <_dtoa_r+0x186>
 800b9dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b9de:	e7b7      	b.n	800b950 <_dtoa_r+0x188>
 800b9e0:	427b      	negs	r3, r7
 800b9e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	eba8 0807 	sub.w	r8, r8, r7
 800b9ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b9ec:	e7c4      	b.n	800b978 <_dtoa_r+0x1b0>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dc35      	bgt.n	800ba64 <_dtoa_r+0x29c>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	9300      	str	r3, [sp, #0]
 800b9fc:	9307      	str	r3, [sp, #28]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba02:	e00b      	b.n	800ba1c <_dtoa_r+0x254>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e7f3      	b.n	800b9f0 <_dtoa_r+0x228>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba0e:	18fb      	adds	r3, r7, r3
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	3301      	adds	r3, #1
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	bfb8      	it	lt
 800ba1a:	2301      	movlt	r3, #1
 800ba1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ba20:	2100      	movs	r1, #0
 800ba22:	2204      	movs	r2, #4
 800ba24:	f102 0514 	add.w	r5, r2, #20
 800ba28:	429d      	cmp	r5, r3
 800ba2a:	d91f      	bls.n	800ba6c <_dtoa_r+0x2a4>
 800ba2c:	6041      	str	r1, [r0, #4]
 800ba2e:	4658      	mov	r0, fp
 800ba30:	f000 fd8e 	bl	800c550 <_Balloc>
 800ba34:	4682      	mov	sl, r0
 800ba36:	2800      	cmp	r0, #0
 800ba38:	d13c      	bne.n	800bab4 <_dtoa_r+0x2ec>
 800ba3a:	4b1b      	ldr	r3, [pc, #108]	@ (800baa8 <_dtoa_r+0x2e0>)
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ba42:	e6d8      	b.n	800b7f6 <_dtoa_r+0x2e>
 800ba44:	2301      	movs	r3, #1
 800ba46:	e7e0      	b.n	800ba0a <_dtoa_r+0x242>
 800ba48:	2401      	movs	r4, #1
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba50:	f04f 33ff 	mov.w	r3, #4294967295
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	9307      	str	r3, [sp, #28]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2312      	movs	r3, #18
 800ba5c:	e7d0      	b.n	800ba00 <_dtoa_r+0x238>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba62:	e7f5      	b.n	800ba50 <_dtoa_r+0x288>
 800ba64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	9307      	str	r3, [sp, #28]
 800ba6a:	e7d7      	b.n	800ba1c <_dtoa_r+0x254>
 800ba6c:	3101      	adds	r1, #1
 800ba6e:	0052      	lsls	r2, r2, #1
 800ba70:	e7d8      	b.n	800ba24 <_dtoa_r+0x25c>
 800ba72:	bf00      	nop
 800ba74:	f3af 8000 	nop.w
 800ba78:	636f4361 	.word	0x636f4361
 800ba7c:	3fd287a7 	.word	0x3fd287a7
 800ba80:	8b60c8b3 	.word	0x8b60c8b3
 800ba84:	3fc68a28 	.word	0x3fc68a28
 800ba88:	509f79fb 	.word	0x509f79fb
 800ba8c:	3fd34413 	.word	0x3fd34413
 800ba90:	08010de1 	.word	0x08010de1
 800ba94:	08010df8 	.word	0x08010df8
 800ba98:	7ff00000 	.word	0x7ff00000
 800ba9c:	08011038 	.word	0x08011038
 800baa0:	3ff80000 	.word	0x3ff80000
 800baa4:	08010ef0 	.word	0x08010ef0
 800baa8:	08010e50 	.word	0x08010e50
 800baac:	08010ddd 	.word	0x08010ddd
 800bab0:	08011037 	.word	0x08011037
 800bab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bab8:	6018      	str	r0, [r3, #0]
 800baba:	9b07      	ldr	r3, [sp, #28]
 800babc:	2b0e      	cmp	r3, #14
 800babe:	f200 80a4 	bhi.w	800bc0a <_dtoa_r+0x442>
 800bac2:	2c00      	cmp	r4, #0
 800bac4:	f000 80a1 	beq.w	800bc0a <_dtoa_r+0x442>
 800bac8:	2f00      	cmp	r7, #0
 800baca:	dd33      	ble.n	800bb34 <_dtoa_r+0x36c>
 800bacc:	4bad      	ldr	r3, [pc, #692]	@ (800bd84 <_dtoa_r+0x5bc>)
 800bace:	f007 020f 	and.w	r2, r7, #15
 800bad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bad6:	ed93 7b00 	vldr	d7, [r3]
 800bada:	05f8      	lsls	r0, r7, #23
 800badc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bae4:	d516      	bpl.n	800bb14 <_dtoa_r+0x34c>
 800bae6:	4ba8      	ldr	r3, [pc, #672]	@ (800bd88 <_dtoa_r+0x5c0>)
 800bae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800baf0:	f7f4 fec4 	bl	800087c <__aeabi_ddiv>
 800baf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf8:	f004 040f 	and.w	r4, r4, #15
 800bafc:	2603      	movs	r6, #3
 800bafe:	4da2      	ldr	r5, [pc, #648]	@ (800bd88 <_dtoa_r+0x5c0>)
 800bb00:	b954      	cbnz	r4, 800bb18 <_dtoa_r+0x350>
 800bb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb0a:	f7f4 feb7 	bl	800087c <__aeabi_ddiv>
 800bb0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb12:	e028      	b.n	800bb66 <_dtoa_r+0x39e>
 800bb14:	2602      	movs	r6, #2
 800bb16:	e7f2      	b.n	800bafe <_dtoa_r+0x336>
 800bb18:	07e1      	lsls	r1, r4, #31
 800bb1a:	d508      	bpl.n	800bb2e <_dtoa_r+0x366>
 800bb1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb24:	f7f4 fd80 	bl	8000628 <__aeabi_dmul>
 800bb28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb2c:	3601      	adds	r6, #1
 800bb2e:	1064      	asrs	r4, r4, #1
 800bb30:	3508      	adds	r5, #8
 800bb32:	e7e5      	b.n	800bb00 <_dtoa_r+0x338>
 800bb34:	f000 80d2 	beq.w	800bcdc <_dtoa_r+0x514>
 800bb38:	427c      	negs	r4, r7
 800bb3a:	4b92      	ldr	r3, [pc, #584]	@ (800bd84 <_dtoa_r+0x5bc>)
 800bb3c:	4d92      	ldr	r5, [pc, #584]	@ (800bd88 <_dtoa_r+0x5c0>)
 800bb3e:	f004 020f 	and.w	r2, r4, #15
 800bb42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb4e:	f7f4 fd6b 	bl	8000628 <__aeabi_dmul>
 800bb52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb56:	1124      	asrs	r4, r4, #4
 800bb58:	2300      	movs	r3, #0
 800bb5a:	2602      	movs	r6, #2
 800bb5c:	2c00      	cmp	r4, #0
 800bb5e:	f040 80b2 	bne.w	800bcc6 <_dtoa_r+0x4fe>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1d3      	bne.n	800bb0e <_dtoa_r+0x346>
 800bb66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 80b7 	beq.w	800bce0 <_dtoa_r+0x518>
 800bb72:	4b86      	ldr	r3, [pc, #536]	@ (800bd8c <_dtoa_r+0x5c4>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	f7f4 ffc7 	bl	8000b0c <__aeabi_dcmplt>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f000 80ae 	beq.w	800bce0 <_dtoa_r+0x518>
 800bb84:	9b07      	ldr	r3, [sp, #28]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f000 80aa 	beq.w	800bce0 <_dtoa_r+0x518>
 800bb8c:	9b00      	ldr	r3, [sp, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	dd37      	ble.n	800bc02 <_dtoa_r+0x43a>
 800bb92:	1e7b      	subs	r3, r7, #1
 800bb94:	9304      	str	r3, [sp, #16]
 800bb96:	4620      	mov	r0, r4
 800bb98:	4b7d      	ldr	r3, [pc, #500]	@ (800bd90 <_dtoa_r+0x5c8>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	f7f4 fd43 	bl	8000628 <__aeabi_dmul>
 800bba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bba6:	9c00      	ldr	r4, [sp, #0]
 800bba8:	3601      	adds	r6, #1
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f7f4 fcd2 	bl	8000554 <__aeabi_i2d>
 800bbb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbb4:	f7f4 fd38 	bl	8000628 <__aeabi_dmul>
 800bbb8:	4b76      	ldr	r3, [pc, #472]	@ (800bd94 <_dtoa_r+0x5cc>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f7f4 fb7e 	bl	80002bc <__adddf3>
 800bbc0:	4605      	mov	r5, r0
 800bbc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bbc6:	2c00      	cmp	r4, #0
 800bbc8:	f040 808d 	bne.w	800bce6 <_dtoa_r+0x51e>
 800bbcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd0:	4b71      	ldr	r3, [pc, #452]	@ (800bd98 <_dtoa_r+0x5d0>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f7f4 fb70 	bl	80002b8 <__aeabi_dsub>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4633      	mov	r3, r6
 800bbe4:	f7f4 ffb0 	bl	8000b48 <__aeabi_dcmpgt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	f040 828b 	bne.w	800c104 <_dtoa_r+0x93c>
 800bbee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbf2:	462a      	mov	r2, r5
 800bbf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bbf8:	f7f4 ff88 	bl	8000b0c <__aeabi_dcmplt>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	f040 8128 	bne.w	800be52 <_dtoa_r+0x68a>
 800bc02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f2c0 815a 	blt.w	800bec6 <_dtoa_r+0x6fe>
 800bc12:	2f0e      	cmp	r7, #14
 800bc14:	f300 8157 	bgt.w	800bec6 <_dtoa_r+0x6fe>
 800bc18:	4b5a      	ldr	r3, [pc, #360]	@ (800bd84 <_dtoa_r+0x5bc>)
 800bc1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc1e:	ed93 7b00 	vldr	d7, [r3]
 800bc22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	ed8d 7b00 	vstr	d7, [sp]
 800bc2a:	da03      	bge.n	800bc34 <_dtoa_r+0x46c>
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f340 8101 	ble.w	800be36 <_dtoa_r+0x66e>
 800bc34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bc38:	4656      	mov	r6, sl
 800bc3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc3e:	4620      	mov	r0, r4
 800bc40:	4629      	mov	r1, r5
 800bc42:	f7f4 fe1b 	bl	800087c <__aeabi_ddiv>
 800bc46:	f7f4 ff9f 	bl	8000b88 <__aeabi_d2iz>
 800bc4a:	4680      	mov	r8, r0
 800bc4c:	f7f4 fc82 	bl	8000554 <__aeabi_i2d>
 800bc50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc54:	f7f4 fce8 	bl	8000628 <__aeabi_dmul>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bc64:	f7f4 fb28 	bl	80002b8 <__aeabi_dsub>
 800bc68:	f806 4b01 	strb.w	r4, [r6], #1
 800bc6c:	9d07      	ldr	r5, [sp, #28]
 800bc6e:	eba6 040a 	sub.w	r4, r6, sl
 800bc72:	42a5      	cmp	r5, r4
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	f040 8117 	bne.w	800beaa <_dtoa_r+0x6e2>
 800bc7c:	f7f4 fb1e 	bl	80002bc <__adddf3>
 800bc80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc84:	4604      	mov	r4, r0
 800bc86:	460d      	mov	r5, r1
 800bc88:	f7f4 ff5e 	bl	8000b48 <__aeabi_dcmpgt>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f040 80f9 	bne.w	800be84 <_dtoa_r+0x6bc>
 800bc92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 ff2d 	bl	8000af8 <__aeabi_dcmpeq>
 800bc9e:	b118      	cbz	r0, 800bca8 <_dtoa_r+0x4e0>
 800bca0:	f018 0f01 	tst.w	r8, #1
 800bca4:	f040 80ee 	bne.w	800be84 <_dtoa_r+0x6bc>
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4658      	mov	r0, fp
 800bcac:	f000 fc90 	bl	800c5d0 <_Bfree>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	7033      	strb	r3, [r6, #0]
 800bcb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcb6:	3701      	adds	r7, #1
 800bcb8:	601f      	str	r7, [r3, #0]
 800bcba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 831d 	beq.w	800c2fc <_dtoa_r+0xb34>
 800bcc2:	601e      	str	r6, [r3, #0]
 800bcc4:	e31a      	b.n	800c2fc <_dtoa_r+0xb34>
 800bcc6:	07e2      	lsls	r2, r4, #31
 800bcc8:	d505      	bpl.n	800bcd6 <_dtoa_r+0x50e>
 800bcca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcce:	f7f4 fcab 	bl	8000628 <__aeabi_dmul>
 800bcd2:	3601      	adds	r6, #1
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	1064      	asrs	r4, r4, #1
 800bcd8:	3508      	adds	r5, #8
 800bcda:	e73f      	b.n	800bb5c <_dtoa_r+0x394>
 800bcdc:	2602      	movs	r6, #2
 800bcde:	e742      	b.n	800bb66 <_dtoa_r+0x39e>
 800bce0:	9c07      	ldr	r4, [sp, #28]
 800bce2:	9704      	str	r7, [sp, #16]
 800bce4:	e761      	b.n	800bbaa <_dtoa_r+0x3e2>
 800bce6:	4b27      	ldr	r3, [pc, #156]	@ (800bd84 <_dtoa_r+0x5bc>)
 800bce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcf2:	4454      	add	r4, sl
 800bcf4:	2900      	cmp	r1, #0
 800bcf6:	d053      	beq.n	800bda0 <_dtoa_r+0x5d8>
 800bcf8:	4928      	ldr	r1, [pc, #160]	@ (800bd9c <_dtoa_r+0x5d4>)
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	f7f4 fdbe 	bl	800087c <__aeabi_ddiv>
 800bd00:	4633      	mov	r3, r6
 800bd02:	462a      	mov	r2, r5
 800bd04:	f7f4 fad8 	bl	80002b8 <__aeabi_dsub>
 800bd08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd0c:	4656      	mov	r6, sl
 800bd0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd12:	f7f4 ff39 	bl	8000b88 <__aeabi_d2iz>
 800bd16:	4605      	mov	r5, r0
 800bd18:	f7f4 fc1c 	bl	8000554 <__aeabi_i2d>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd24:	f7f4 fac8 	bl	80002b8 <__aeabi_dsub>
 800bd28:	3530      	adds	r5, #48	@ 0x30
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd32:	f806 5b01 	strb.w	r5, [r6], #1
 800bd36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd3a:	f7f4 fee7 	bl	8000b0c <__aeabi_dcmplt>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	d171      	bne.n	800be26 <_dtoa_r+0x65e>
 800bd42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd46:	4911      	ldr	r1, [pc, #68]	@ (800bd8c <_dtoa_r+0x5c4>)
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f7f4 fab5 	bl	80002b8 <__aeabi_dsub>
 800bd4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd52:	f7f4 fedb 	bl	8000b0c <__aeabi_dcmplt>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f040 8095 	bne.w	800be86 <_dtoa_r+0x6be>
 800bd5c:	42a6      	cmp	r6, r4
 800bd5e:	f43f af50 	beq.w	800bc02 <_dtoa_r+0x43a>
 800bd62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd66:	4b0a      	ldr	r3, [pc, #40]	@ (800bd90 <_dtoa_r+0x5c8>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f7f4 fc5d 	bl	8000628 <__aeabi_dmul>
 800bd6e:	4b08      	ldr	r3, [pc, #32]	@ (800bd90 <_dtoa_r+0x5c8>)
 800bd70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd74:	2200      	movs	r2, #0
 800bd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd7a:	f7f4 fc55 	bl	8000628 <__aeabi_dmul>
 800bd7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd82:	e7c4      	b.n	800bd0e <_dtoa_r+0x546>
 800bd84:	08010ef0 	.word	0x08010ef0
 800bd88:	08010ec8 	.word	0x08010ec8
 800bd8c:	3ff00000 	.word	0x3ff00000
 800bd90:	40240000 	.word	0x40240000
 800bd94:	401c0000 	.word	0x401c0000
 800bd98:	40140000 	.word	0x40140000
 800bd9c:	3fe00000 	.word	0x3fe00000
 800bda0:	4631      	mov	r1, r6
 800bda2:	4628      	mov	r0, r5
 800bda4:	f7f4 fc40 	bl	8000628 <__aeabi_dmul>
 800bda8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdac:	9415      	str	r4, [sp, #84]	@ 0x54
 800bdae:	4656      	mov	r6, sl
 800bdb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdb4:	f7f4 fee8 	bl	8000b88 <__aeabi_d2iz>
 800bdb8:	4605      	mov	r5, r0
 800bdba:	f7f4 fbcb 	bl	8000554 <__aeabi_i2d>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc6:	f7f4 fa77 	bl	80002b8 <__aeabi_dsub>
 800bdca:	3530      	adds	r5, #48	@ 0x30
 800bdcc:	f806 5b01 	strb.w	r5, [r6], #1
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	42a6      	cmp	r6, r4
 800bdd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdda:	f04f 0200 	mov.w	r2, #0
 800bdde:	d124      	bne.n	800be2a <_dtoa_r+0x662>
 800bde0:	4bac      	ldr	r3, [pc, #688]	@ (800c094 <_dtoa_r+0x8cc>)
 800bde2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bde6:	f7f4 fa69 	bl	80002bc <__adddf3>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf2:	f7f4 fea9 	bl	8000b48 <__aeabi_dcmpgt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d145      	bne.n	800be86 <_dtoa_r+0x6be>
 800bdfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdfe:	49a5      	ldr	r1, [pc, #660]	@ (800c094 <_dtoa_r+0x8cc>)
 800be00:	2000      	movs	r0, #0
 800be02:	f7f4 fa59 	bl	80002b8 <__aeabi_dsub>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be0e:	f7f4 fe7d 	bl	8000b0c <__aeabi_dcmplt>
 800be12:	2800      	cmp	r0, #0
 800be14:	f43f aef5 	beq.w	800bc02 <_dtoa_r+0x43a>
 800be18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800be1a:	1e73      	subs	r3, r6, #1
 800be1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800be1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be22:	2b30      	cmp	r3, #48	@ 0x30
 800be24:	d0f8      	beq.n	800be18 <_dtoa_r+0x650>
 800be26:	9f04      	ldr	r7, [sp, #16]
 800be28:	e73e      	b.n	800bca8 <_dtoa_r+0x4e0>
 800be2a:	4b9b      	ldr	r3, [pc, #620]	@ (800c098 <_dtoa_r+0x8d0>)
 800be2c:	f7f4 fbfc 	bl	8000628 <__aeabi_dmul>
 800be30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be34:	e7bc      	b.n	800bdb0 <_dtoa_r+0x5e8>
 800be36:	d10c      	bne.n	800be52 <_dtoa_r+0x68a>
 800be38:	4b98      	ldr	r3, [pc, #608]	@ (800c09c <_dtoa_r+0x8d4>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be40:	f7f4 fbf2 	bl	8000628 <__aeabi_dmul>
 800be44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be48:	f7f4 fe74 	bl	8000b34 <__aeabi_dcmpge>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f000 8157 	beq.w	800c100 <_dtoa_r+0x938>
 800be52:	2400      	movs	r4, #0
 800be54:	4625      	mov	r5, r4
 800be56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be58:	43db      	mvns	r3, r3
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	4656      	mov	r6, sl
 800be5e:	2700      	movs	r7, #0
 800be60:	4621      	mov	r1, r4
 800be62:	4658      	mov	r0, fp
 800be64:	f000 fbb4 	bl	800c5d0 <_Bfree>
 800be68:	2d00      	cmp	r5, #0
 800be6a:	d0dc      	beq.n	800be26 <_dtoa_r+0x65e>
 800be6c:	b12f      	cbz	r7, 800be7a <_dtoa_r+0x6b2>
 800be6e:	42af      	cmp	r7, r5
 800be70:	d003      	beq.n	800be7a <_dtoa_r+0x6b2>
 800be72:	4639      	mov	r1, r7
 800be74:	4658      	mov	r0, fp
 800be76:	f000 fbab 	bl	800c5d0 <_Bfree>
 800be7a:	4629      	mov	r1, r5
 800be7c:	4658      	mov	r0, fp
 800be7e:	f000 fba7 	bl	800c5d0 <_Bfree>
 800be82:	e7d0      	b.n	800be26 <_dtoa_r+0x65e>
 800be84:	9704      	str	r7, [sp, #16]
 800be86:	4633      	mov	r3, r6
 800be88:	461e      	mov	r6, r3
 800be8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be8e:	2a39      	cmp	r2, #57	@ 0x39
 800be90:	d107      	bne.n	800bea2 <_dtoa_r+0x6da>
 800be92:	459a      	cmp	sl, r3
 800be94:	d1f8      	bne.n	800be88 <_dtoa_r+0x6c0>
 800be96:	9a04      	ldr	r2, [sp, #16]
 800be98:	3201      	adds	r2, #1
 800be9a:	9204      	str	r2, [sp, #16]
 800be9c:	2230      	movs	r2, #48	@ 0x30
 800be9e:	f88a 2000 	strb.w	r2, [sl]
 800bea2:	781a      	ldrb	r2, [r3, #0]
 800bea4:	3201      	adds	r2, #1
 800bea6:	701a      	strb	r2, [r3, #0]
 800bea8:	e7bd      	b.n	800be26 <_dtoa_r+0x65e>
 800beaa:	4b7b      	ldr	r3, [pc, #492]	@ (800c098 <_dtoa_r+0x8d0>)
 800beac:	2200      	movs	r2, #0
 800beae:	f7f4 fbbb 	bl	8000628 <__aeabi_dmul>
 800beb2:	2200      	movs	r2, #0
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	f7f4 fe1d 	bl	8000af8 <__aeabi_dcmpeq>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f43f aebb 	beq.w	800bc3a <_dtoa_r+0x472>
 800bec4:	e6f0      	b.n	800bca8 <_dtoa_r+0x4e0>
 800bec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bec8:	2a00      	cmp	r2, #0
 800beca:	f000 80db 	beq.w	800c084 <_dtoa_r+0x8bc>
 800bece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed0:	2a01      	cmp	r2, #1
 800bed2:	f300 80bf 	bgt.w	800c054 <_dtoa_r+0x88c>
 800bed6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bed8:	2a00      	cmp	r2, #0
 800beda:	f000 80b7 	beq.w	800c04c <_dtoa_r+0x884>
 800bede:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bee2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bee4:	4646      	mov	r6, r8
 800bee6:	9a08      	ldr	r2, [sp, #32]
 800bee8:	2101      	movs	r1, #1
 800beea:	441a      	add	r2, r3
 800beec:	4658      	mov	r0, fp
 800beee:	4498      	add	r8, r3
 800bef0:	9208      	str	r2, [sp, #32]
 800bef2:	f000 fc6b 	bl	800c7cc <__i2b>
 800bef6:	4605      	mov	r5, r0
 800bef8:	b15e      	cbz	r6, 800bf12 <_dtoa_r+0x74a>
 800befa:	9b08      	ldr	r3, [sp, #32]
 800befc:	2b00      	cmp	r3, #0
 800befe:	dd08      	ble.n	800bf12 <_dtoa_r+0x74a>
 800bf00:	42b3      	cmp	r3, r6
 800bf02:	9a08      	ldr	r2, [sp, #32]
 800bf04:	bfa8      	it	ge
 800bf06:	4633      	movge	r3, r6
 800bf08:	eba8 0803 	sub.w	r8, r8, r3
 800bf0c:	1af6      	subs	r6, r6, r3
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	9308      	str	r3, [sp, #32]
 800bf12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf14:	b1f3      	cbz	r3, 800bf54 <_dtoa_r+0x78c>
 800bf16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 80b7 	beq.w	800c08c <_dtoa_r+0x8c4>
 800bf1e:	b18c      	cbz	r4, 800bf44 <_dtoa_r+0x77c>
 800bf20:	4629      	mov	r1, r5
 800bf22:	4622      	mov	r2, r4
 800bf24:	4658      	mov	r0, fp
 800bf26:	f000 fd11 	bl	800c94c <__pow5mult>
 800bf2a:	464a      	mov	r2, r9
 800bf2c:	4601      	mov	r1, r0
 800bf2e:	4605      	mov	r5, r0
 800bf30:	4658      	mov	r0, fp
 800bf32:	f000 fc61 	bl	800c7f8 <__multiply>
 800bf36:	4649      	mov	r1, r9
 800bf38:	9004      	str	r0, [sp, #16]
 800bf3a:	4658      	mov	r0, fp
 800bf3c:	f000 fb48 	bl	800c5d0 <_Bfree>
 800bf40:	9b04      	ldr	r3, [sp, #16]
 800bf42:	4699      	mov	r9, r3
 800bf44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf46:	1b1a      	subs	r2, r3, r4
 800bf48:	d004      	beq.n	800bf54 <_dtoa_r+0x78c>
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	f000 fcfd 	bl	800c94c <__pow5mult>
 800bf52:	4681      	mov	r9, r0
 800bf54:	2101      	movs	r1, #1
 800bf56:	4658      	mov	r0, fp
 800bf58:	f000 fc38 	bl	800c7cc <__i2b>
 800bf5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf5e:	4604      	mov	r4, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 81cf 	beq.w	800c304 <_dtoa_r+0xb3c>
 800bf66:	461a      	mov	r2, r3
 800bf68:	4601      	mov	r1, r0
 800bf6a:	4658      	mov	r0, fp
 800bf6c:	f000 fcee 	bl	800c94c <__pow5mult>
 800bf70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	4604      	mov	r4, r0
 800bf76:	f300 8095 	bgt.w	800c0a4 <_dtoa_r+0x8dc>
 800bf7a:	9b02      	ldr	r3, [sp, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f040 8087 	bne.w	800c090 <_dtoa_r+0x8c8>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f040 8089 	bne.w	800c0a0 <_dtoa_r+0x8d8>
 800bf8e:	9b03      	ldr	r3, [sp, #12]
 800bf90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf94:	0d1b      	lsrs	r3, r3, #20
 800bf96:	051b      	lsls	r3, r3, #20
 800bf98:	b12b      	cbz	r3, 800bfa6 <_dtoa_r+0x7de>
 800bf9a:	9b08      	ldr	r3, [sp, #32]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	9308      	str	r3, [sp, #32]
 800bfa0:	f108 0801 	add.w	r8, r8, #1
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 81b0 	beq.w	800c310 <_dtoa_r+0xb48>
 800bfb0:	6923      	ldr	r3, [r4, #16]
 800bfb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfb6:	6918      	ldr	r0, [r3, #16]
 800bfb8:	f000 fbbc 	bl	800c734 <__hi0bits>
 800bfbc:	f1c0 0020 	rsb	r0, r0, #32
 800bfc0:	9b08      	ldr	r3, [sp, #32]
 800bfc2:	4418      	add	r0, r3
 800bfc4:	f010 001f 	ands.w	r0, r0, #31
 800bfc8:	d077      	beq.n	800c0ba <_dtoa_r+0x8f2>
 800bfca:	f1c0 0320 	rsb	r3, r0, #32
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	dd6b      	ble.n	800c0aa <_dtoa_r+0x8e2>
 800bfd2:	9b08      	ldr	r3, [sp, #32]
 800bfd4:	f1c0 001c 	rsb	r0, r0, #28
 800bfd8:	4403      	add	r3, r0
 800bfda:	4480      	add	r8, r0
 800bfdc:	4406      	add	r6, r0
 800bfde:	9308      	str	r3, [sp, #32]
 800bfe0:	f1b8 0f00 	cmp.w	r8, #0
 800bfe4:	dd05      	ble.n	800bff2 <_dtoa_r+0x82a>
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	4642      	mov	r2, r8
 800bfea:	4658      	mov	r0, fp
 800bfec:	f000 fd08 	bl	800ca00 <__lshift>
 800bff0:	4681      	mov	r9, r0
 800bff2:	9b08      	ldr	r3, [sp, #32]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd05      	ble.n	800c004 <_dtoa_r+0x83c>
 800bff8:	4621      	mov	r1, r4
 800bffa:	461a      	mov	r2, r3
 800bffc:	4658      	mov	r0, fp
 800bffe:	f000 fcff 	bl	800ca00 <__lshift>
 800c002:	4604      	mov	r4, r0
 800c004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c006:	2b00      	cmp	r3, #0
 800c008:	d059      	beq.n	800c0be <_dtoa_r+0x8f6>
 800c00a:	4621      	mov	r1, r4
 800c00c:	4648      	mov	r0, r9
 800c00e:	f000 fd63 	bl	800cad8 <__mcmp>
 800c012:	2800      	cmp	r0, #0
 800c014:	da53      	bge.n	800c0be <_dtoa_r+0x8f6>
 800c016:	1e7b      	subs	r3, r7, #1
 800c018:	9304      	str	r3, [sp, #16]
 800c01a:	4649      	mov	r1, r9
 800c01c:	2300      	movs	r3, #0
 800c01e:	220a      	movs	r2, #10
 800c020:	4658      	mov	r0, fp
 800c022:	f000 faf7 	bl	800c614 <__multadd>
 800c026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c028:	4681      	mov	r9, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 8172 	beq.w	800c314 <_dtoa_r+0xb4c>
 800c030:	2300      	movs	r3, #0
 800c032:	4629      	mov	r1, r5
 800c034:	220a      	movs	r2, #10
 800c036:	4658      	mov	r0, fp
 800c038:	f000 faec 	bl	800c614 <__multadd>
 800c03c:	9b00      	ldr	r3, [sp, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	4605      	mov	r5, r0
 800c042:	dc67      	bgt.n	800c114 <_dtoa_r+0x94c>
 800c044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c046:	2b02      	cmp	r3, #2
 800c048:	dc41      	bgt.n	800c0ce <_dtoa_r+0x906>
 800c04a:	e063      	b.n	800c114 <_dtoa_r+0x94c>
 800c04c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c04e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c052:	e746      	b.n	800bee2 <_dtoa_r+0x71a>
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	1e5c      	subs	r4, r3, #1
 800c058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c05a:	42a3      	cmp	r3, r4
 800c05c:	bfbf      	itttt	lt
 800c05e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c060:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c062:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c064:	1ae3      	sublt	r3, r4, r3
 800c066:	bfb4      	ite	lt
 800c068:	18d2      	addlt	r2, r2, r3
 800c06a:	1b1c      	subge	r4, r3, r4
 800c06c:	9b07      	ldr	r3, [sp, #28]
 800c06e:	bfbc      	itt	lt
 800c070:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c072:	2400      	movlt	r4, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	bfb5      	itete	lt
 800c078:	eba8 0603 	sublt.w	r6, r8, r3
 800c07c:	9b07      	ldrge	r3, [sp, #28]
 800c07e:	2300      	movlt	r3, #0
 800c080:	4646      	movge	r6, r8
 800c082:	e730      	b.n	800bee6 <_dtoa_r+0x71e>
 800c084:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c086:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c088:	4646      	mov	r6, r8
 800c08a:	e735      	b.n	800bef8 <_dtoa_r+0x730>
 800c08c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c08e:	e75c      	b.n	800bf4a <_dtoa_r+0x782>
 800c090:	2300      	movs	r3, #0
 800c092:	e788      	b.n	800bfa6 <_dtoa_r+0x7de>
 800c094:	3fe00000 	.word	0x3fe00000
 800c098:	40240000 	.word	0x40240000
 800c09c:	40140000 	.word	0x40140000
 800c0a0:	9b02      	ldr	r3, [sp, #8]
 800c0a2:	e780      	b.n	800bfa6 <_dtoa_r+0x7de>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0a8:	e782      	b.n	800bfb0 <_dtoa_r+0x7e8>
 800c0aa:	d099      	beq.n	800bfe0 <_dtoa_r+0x818>
 800c0ac:	9a08      	ldr	r2, [sp, #32]
 800c0ae:	331c      	adds	r3, #28
 800c0b0:	441a      	add	r2, r3
 800c0b2:	4498      	add	r8, r3
 800c0b4:	441e      	add	r6, r3
 800c0b6:	9208      	str	r2, [sp, #32]
 800c0b8:	e792      	b.n	800bfe0 <_dtoa_r+0x818>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	e7f6      	b.n	800c0ac <_dtoa_r+0x8e4>
 800c0be:	9b07      	ldr	r3, [sp, #28]
 800c0c0:	9704      	str	r7, [sp, #16]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dc20      	bgt.n	800c108 <_dtoa_r+0x940>
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	dd1e      	ble.n	800c10c <_dtoa_r+0x944>
 800c0ce:	9b00      	ldr	r3, [sp, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f47f aec0 	bne.w	800be56 <_dtoa_r+0x68e>
 800c0d6:	4621      	mov	r1, r4
 800c0d8:	2205      	movs	r2, #5
 800c0da:	4658      	mov	r0, fp
 800c0dc:	f000 fa9a 	bl	800c614 <__multadd>
 800c0e0:	4601      	mov	r1, r0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4648      	mov	r0, r9
 800c0e6:	f000 fcf7 	bl	800cad8 <__mcmp>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	f77f aeb3 	ble.w	800be56 <_dtoa_r+0x68e>
 800c0f0:	4656      	mov	r6, sl
 800c0f2:	2331      	movs	r3, #49	@ 0x31
 800c0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800c0f8:	9b04      	ldr	r3, [sp, #16]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	9304      	str	r3, [sp, #16]
 800c0fe:	e6ae      	b.n	800be5e <_dtoa_r+0x696>
 800c100:	9c07      	ldr	r4, [sp, #28]
 800c102:	9704      	str	r7, [sp, #16]
 800c104:	4625      	mov	r5, r4
 800c106:	e7f3      	b.n	800c0f0 <_dtoa_r+0x928>
 800c108:	9b07      	ldr	r3, [sp, #28]
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 8104 	beq.w	800c31c <_dtoa_r+0xb54>
 800c114:	2e00      	cmp	r6, #0
 800c116:	dd05      	ble.n	800c124 <_dtoa_r+0x95c>
 800c118:	4629      	mov	r1, r5
 800c11a:	4632      	mov	r2, r6
 800c11c:	4658      	mov	r0, fp
 800c11e:	f000 fc6f 	bl	800ca00 <__lshift>
 800c122:	4605      	mov	r5, r0
 800c124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c126:	2b00      	cmp	r3, #0
 800c128:	d05a      	beq.n	800c1e0 <_dtoa_r+0xa18>
 800c12a:	6869      	ldr	r1, [r5, #4]
 800c12c:	4658      	mov	r0, fp
 800c12e:	f000 fa0f 	bl	800c550 <_Balloc>
 800c132:	4606      	mov	r6, r0
 800c134:	b928      	cbnz	r0, 800c142 <_dtoa_r+0x97a>
 800c136:	4b84      	ldr	r3, [pc, #528]	@ (800c348 <_dtoa_r+0xb80>)
 800c138:	4602      	mov	r2, r0
 800c13a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c13e:	f7ff bb5a 	b.w	800b7f6 <_dtoa_r+0x2e>
 800c142:	692a      	ldr	r2, [r5, #16]
 800c144:	3202      	adds	r2, #2
 800c146:	0092      	lsls	r2, r2, #2
 800c148:	f105 010c 	add.w	r1, r5, #12
 800c14c:	300c      	adds	r0, #12
 800c14e:	f002 fc81 	bl	800ea54 <memcpy>
 800c152:	2201      	movs	r2, #1
 800c154:	4631      	mov	r1, r6
 800c156:	4658      	mov	r0, fp
 800c158:	f000 fc52 	bl	800ca00 <__lshift>
 800c15c:	f10a 0301 	add.w	r3, sl, #1
 800c160:	9307      	str	r3, [sp, #28]
 800c162:	9b00      	ldr	r3, [sp, #0]
 800c164:	4453      	add	r3, sl
 800c166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c168:	9b02      	ldr	r3, [sp, #8]
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	462f      	mov	r7, r5
 800c170:	930a      	str	r3, [sp, #40]	@ 0x28
 800c172:	4605      	mov	r5, r0
 800c174:	9b07      	ldr	r3, [sp, #28]
 800c176:	4621      	mov	r1, r4
 800c178:	3b01      	subs	r3, #1
 800c17a:	4648      	mov	r0, r9
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	f7ff fa9b 	bl	800b6b8 <quorem>
 800c182:	4639      	mov	r1, r7
 800c184:	9002      	str	r0, [sp, #8]
 800c186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c18a:	4648      	mov	r0, r9
 800c18c:	f000 fca4 	bl	800cad8 <__mcmp>
 800c190:	462a      	mov	r2, r5
 800c192:	9008      	str	r0, [sp, #32]
 800c194:	4621      	mov	r1, r4
 800c196:	4658      	mov	r0, fp
 800c198:	f000 fcba 	bl	800cb10 <__mdiff>
 800c19c:	68c2      	ldr	r2, [r0, #12]
 800c19e:	4606      	mov	r6, r0
 800c1a0:	bb02      	cbnz	r2, 800c1e4 <_dtoa_r+0xa1c>
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	4648      	mov	r0, r9
 800c1a6:	f000 fc97 	bl	800cad8 <__mcmp>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4658      	mov	r0, fp
 800c1b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1b2:	f000 fa0d 	bl	800c5d0 <_Bfree>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1ba:	9e07      	ldr	r6, [sp, #28]
 800c1bc:	ea43 0102 	orr.w	r1, r3, r2
 800c1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1c2:	4319      	orrs	r1, r3
 800c1c4:	d110      	bne.n	800c1e8 <_dtoa_r+0xa20>
 800c1c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c1ca:	d029      	beq.n	800c220 <_dtoa_r+0xa58>
 800c1cc:	9b08      	ldr	r3, [sp, #32]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dd02      	ble.n	800c1d8 <_dtoa_r+0xa10>
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c1d8:	9b00      	ldr	r3, [sp, #0]
 800c1da:	f883 8000 	strb.w	r8, [r3]
 800c1de:	e63f      	b.n	800be60 <_dtoa_r+0x698>
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	e7bb      	b.n	800c15c <_dtoa_r+0x994>
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	e7e1      	b.n	800c1ac <_dtoa_r+0x9e4>
 800c1e8:	9b08      	ldr	r3, [sp, #32]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	db04      	blt.n	800c1f8 <_dtoa_r+0xa30>
 800c1ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1f0:	430b      	orrs	r3, r1
 800c1f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c1f4:	430b      	orrs	r3, r1
 800c1f6:	d120      	bne.n	800c23a <_dtoa_r+0xa72>
 800c1f8:	2a00      	cmp	r2, #0
 800c1fa:	dded      	ble.n	800c1d8 <_dtoa_r+0xa10>
 800c1fc:	4649      	mov	r1, r9
 800c1fe:	2201      	movs	r2, #1
 800c200:	4658      	mov	r0, fp
 800c202:	f000 fbfd 	bl	800ca00 <__lshift>
 800c206:	4621      	mov	r1, r4
 800c208:	4681      	mov	r9, r0
 800c20a:	f000 fc65 	bl	800cad8 <__mcmp>
 800c20e:	2800      	cmp	r0, #0
 800c210:	dc03      	bgt.n	800c21a <_dtoa_r+0xa52>
 800c212:	d1e1      	bne.n	800c1d8 <_dtoa_r+0xa10>
 800c214:	f018 0f01 	tst.w	r8, #1
 800c218:	d0de      	beq.n	800c1d8 <_dtoa_r+0xa10>
 800c21a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c21e:	d1d8      	bne.n	800c1d2 <_dtoa_r+0xa0a>
 800c220:	9a00      	ldr	r2, [sp, #0]
 800c222:	2339      	movs	r3, #57	@ 0x39
 800c224:	7013      	strb	r3, [r2, #0]
 800c226:	4633      	mov	r3, r6
 800c228:	461e      	mov	r6, r3
 800c22a:	3b01      	subs	r3, #1
 800c22c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c230:	2a39      	cmp	r2, #57	@ 0x39
 800c232:	d052      	beq.n	800c2da <_dtoa_r+0xb12>
 800c234:	3201      	adds	r2, #1
 800c236:	701a      	strb	r2, [r3, #0]
 800c238:	e612      	b.n	800be60 <_dtoa_r+0x698>
 800c23a:	2a00      	cmp	r2, #0
 800c23c:	dd07      	ble.n	800c24e <_dtoa_r+0xa86>
 800c23e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c242:	d0ed      	beq.n	800c220 <_dtoa_r+0xa58>
 800c244:	9a00      	ldr	r2, [sp, #0]
 800c246:	f108 0301 	add.w	r3, r8, #1
 800c24a:	7013      	strb	r3, [r2, #0]
 800c24c:	e608      	b.n	800be60 <_dtoa_r+0x698>
 800c24e:	9b07      	ldr	r3, [sp, #28]
 800c250:	9a07      	ldr	r2, [sp, #28]
 800c252:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c258:	4293      	cmp	r3, r2
 800c25a:	d028      	beq.n	800c2ae <_dtoa_r+0xae6>
 800c25c:	4649      	mov	r1, r9
 800c25e:	2300      	movs	r3, #0
 800c260:	220a      	movs	r2, #10
 800c262:	4658      	mov	r0, fp
 800c264:	f000 f9d6 	bl	800c614 <__multadd>
 800c268:	42af      	cmp	r7, r5
 800c26a:	4681      	mov	r9, r0
 800c26c:	f04f 0300 	mov.w	r3, #0
 800c270:	f04f 020a 	mov.w	r2, #10
 800c274:	4639      	mov	r1, r7
 800c276:	4658      	mov	r0, fp
 800c278:	d107      	bne.n	800c28a <_dtoa_r+0xac2>
 800c27a:	f000 f9cb 	bl	800c614 <__multadd>
 800c27e:	4607      	mov	r7, r0
 800c280:	4605      	mov	r5, r0
 800c282:	9b07      	ldr	r3, [sp, #28]
 800c284:	3301      	adds	r3, #1
 800c286:	9307      	str	r3, [sp, #28]
 800c288:	e774      	b.n	800c174 <_dtoa_r+0x9ac>
 800c28a:	f000 f9c3 	bl	800c614 <__multadd>
 800c28e:	4629      	mov	r1, r5
 800c290:	4607      	mov	r7, r0
 800c292:	2300      	movs	r3, #0
 800c294:	220a      	movs	r2, #10
 800c296:	4658      	mov	r0, fp
 800c298:	f000 f9bc 	bl	800c614 <__multadd>
 800c29c:	4605      	mov	r5, r0
 800c29e:	e7f0      	b.n	800c282 <_dtoa_r+0xaba>
 800c2a0:	9b00      	ldr	r3, [sp, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	bfcc      	ite	gt
 800c2a6:	461e      	movgt	r6, r3
 800c2a8:	2601      	movle	r6, #1
 800c2aa:	4456      	add	r6, sl
 800c2ac:	2700      	movs	r7, #0
 800c2ae:	4649      	mov	r1, r9
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f000 fba4 	bl	800ca00 <__lshift>
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4681      	mov	r9, r0
 800c2bc:	f000 fc0c 	bl	800cad8 <__mcmp>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	dcb0      	bgt.n	800c226 <_dtoa_r+0xa5e>
 800c2c4:	d102      	bne.n	800c2cc <_dtoa_r+0xb04>
 800c2c6:	f018 0f01 	tst.w	r8, #1
 800c2ca:	d1ac      	bne.n	800c226 <_dtoa_r+0xa5e>
 800c2cc:	4633      	mov	r3, r6
 800c2ce:	461e      	mov	r6, r3
 800c2d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2d4:	2a30      	cmp	r2, #48	@ 0x30
 800c2d6:	d0fa      	beq.n	800c2ce <_dtoa_r+0xb06>
 800c2d8:	e5c2      	b.n	800be60 <_dtoa_r+0x698>
 800c2da:	459a      	cmp	sl, r3
 800c2dc:	d1a4      	bne.n	800c228 <_dtoa_r+0xa60>
 800c2de:	9b04      	ldr	r3, [sp, #16]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	9304      	str	r3, [sp, #16]
 800c2e4:	2331      	movs	r3, #49	@ 0x31
 800c2e6:	f88a 3000 	strb.w	r3, [sl]
 800c2ea:	e5b9      	b.n	800be60 <_dtoa_r+0x698>
 800c2ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c34c <_dtoa_r+0xb84>
 800c2f2:	b11b      	cbz	r3, 800c2fc <_dtoa_r+0xb34>
 800c2f4:	f10a 0308 	add.w	r3, sl, #8
 800c2f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c2fa:	6013      	str	r3, [r2, #0]
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	b019      	add	sp, #100	@ 0x64
 800c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c306:	2b01      	cmp	r3, #1
 800c308:	f77f ae37 	ble.w	800bf7a <_dtoa_r+0x7b2>
 800c30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c310:	2001      	movs	r0, #1
 800c312:	e655      	b.n	800bfc0 <_dtoa_r+0x7f8>
 800c314:	9b00      	ldr	r3, [sp, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	f77f aed6 	ble.w	800c0c8 <_dtoa_r+0x900>
 800c31c:	4656      	mov	r6, sl
 800c31e:	4621      	mov	r1, r4
 800c320:	4648      	mov	r0, r9
 800c322:	f7ff f9c9 	bl	800b6b8 <quorem>
 800c326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c32a:	f806 8b01 	strb.w	r8, [r6], #1
 800c32e:	9b00      	ldr	r3, [sp, #0]
 800c330:	eba6 020a 	sub.w	r2, r6, sl
 800c334:	4293      	cmp	r3, r2
 800c336:	ddb3      	ble.n	800c2a0 <_dtoa_r+0xad8>
 800c338:	4649      	mov	r1, r9
 800c33a:	2300      	movs	r3, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	4658      	mov	r0, fp
 800c340:	f000 f968 	bl	800c614 <__multadd>
 800c344:	4681      	mov	r9, r0
 800c346:	e7ea      	b.n	800c31e <_dtoa_r+0xb56>
 800c348:	08010e50 	.word	0x08010e50
 800c34c:	08010dd4 	.word	0x08010dd4

0800c350 <_free_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	4605      	mov	r5, r0
 800c354:	2900      	cmp	r1, #0
 800c356:	d041      	beq.n	800c3dc <_free_r+0x8c>
 800c358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c35c:	1f0c      	subs	r4, r1, #4
 800c35e:	2b00      	cmp	r3, #0
 800c360:	bfb8      	it	lt
 800c362:	18e4      	addlt	r4, r4, r3
 800c364:	f000 f8e8 	bl	800c538 <__malloc_lock>
 800c368:	4a1d      	ldr	r2, [pc, #116]	@ (800c3e0 <_free_r+0x90>)
 800c36a:	6813      	ldr	r3, [r2, #0]
 800c36c:	b933      	cbnz	r3, 800c37c <_free_r+0x2c>
 800c36e:	6063      	str	r3, [r4, #4]
 800c370:	6014      	str	r4, [r2, #0]
 800c372:	4628      	mov	r0, r5
 800c374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c378:	f000 b8e4 	b.w	800c544 <__malloc_unlock>
 800c37c:	42a3      	cmp	r3, r4
 800c37e:	d908      	bls.n	800c392 <_free_r+0x42>
 800c380:	6820      	ldr	r0, [r4, #0]
 800c382:	1821      	adds	r1, r4, r0
 800c384:	428b      	cmp	r3, r1
 800c386:	bf01      	itttt	eq
 800c388:	6819      	ldreq	r1, [r3, #0]
 800c38a:	685b      	ldreq	r3, [r3, #4]
 800c38c:	1809      	addeq	r1, r1, r0
 800c38e:	6021      	streq	r1, [r4, #0]
 800c390:	e7ed      	b.n	800c36e <_free_r+0x1e>
 800c392:	461a      	mov	r2, r3
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	b10b      	cbz	r3, 800c39c <_free_r+0x4c>
 800c398:	42a3      	cmp	r3, r4
 800c39a:	d9fa      	bls.n	800c392 <_free_r+0x42>
 800c39c:	6811      	ldr	r1, [r2, #0]
 800c39e:	1850      	adds	r0, r2, r1
 800c3a0:	42a0      	cmp	r0, r4
 800c3a2:	d10b      	bne.n	800c3bc <_free_r+0x6c>
 800c3a4:	6820      	ldr	r0, [r4, #0]
 800c3a6:	4401      	add	r1, r0
 800c3a8:	1850      	adds	r0, r2, r1
 800c3aa:	4283      	cmp	r3, r0
 800c3ac:	6011      	str	r1, [r2, #0]
 800c3ae:	d1e0      	bne.n	800c372 <_free_r+0x22>
 800c3b0:	6818      	ldr	r0, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	6053      	str	r3, [r2, #4]
 800c3b6:	4408      	add	r0, r1
 800c3b8:	6010      	str	r0, [r2, #0]
 800c3ba:	e7da      	b.n	800c372 <_free_r+0x22>
 800c3bc:	d902      	bls.n	800c3c4 <_free_r+0x74>
 800c3be:	230c      	movs	r3, #12
 800c3c0:	602b      	str	r3, [r5, #0]
 800c3c2:	e7d6      	b.n	800c372 <_free_r+0x22>
 800c3c4:	6820      	ldr	r0, [r4, #0]
 800c3c6:	1821      	adds	r1, r4, r0
 800c3c8:	428b      	cmp	r3, r1
 800c3ca:	bf04      	itt	eq
 800c3cc:	6819      	ldreq	r1, [r3, #0]
 800c3ce:	685b      	ldreq	r3, [r3, #4]
 800c3d0:	6063      	str	r3, [r4, #4]
 800c3d2:	bf04      	itt	eq
 800c3d4:	1809      	addeq	r1, r1, r0
 800c3d6:	6021      	streq	r1, [r4, #0]
 800c3d8:	6054      	str	r4, [r2, #4]
 800c3da:	e7ca      	b.n	800c372 <_free_r+0x22>
 800c3dc:	bd38      	pop	{r3, r4, r5, pc}
 800c3de:	bf00      	nop
 800c3e0:	20000e90 	.word	0x20000e90

0800c3e4 <malloc>:
 800c3e4:	4b02      	ldr	r3, [pc, #8]	@ (800c3f0 <malloc+0xc>)
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	f000 b825 	b.w	800c438 <_malloc_r>
 800c3ee:	bf00      	nop
 800c3f0:	20000034 	.word	0x20000034

0800c3f4 <sbrk_aligned>:
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	4e0f      	ldr	r6, [pc, #60]	@ (800c434 <sbrk_aligned+0x40>)
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	6831      	ldr	r1, [r6, #0]
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	b911      	cbnz	r1, 800c406 <sbrk_aligned+0x12>
 800c400:	f002 fb18 	bl	800ea34 <_sbrk_r>
 800c404:	6030      	str	r0, [r6, #0]
 800c406:	4621      	mov	r1, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	f002 fb13 	bl	800ea34 <_sbrk_r>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d103      	bne.n	800c41a <sbrk_aligned+0x26>
 800c412:	f04f 34ff 	mov.w	r4, #4294967295
 800c416:	4620      	mov	r0, r4
 800c418:	bd70      	pop	{r4, r5, r6, pc}
 800c41a:	1cc4      	adds	r4, r0, #3
 800c41c:	f024 0403 	bic.w	r4, r4, #3
 800c420:	42a0      	cmp	r0, r4
 800c422:	d0f8      	beq.n	800c416 <sbrk_aligned+0x22>
 800c424:	1a21      	subs	r1, r4, r0
 800c426:	4628      	mov	r0, r5
 800c428:	f002 fb04 	bl	800ea34 <_sbrk_r>
 800c42c:	3001      	adds	r0, #1
 800c42e:	d1f2      	bne.n	800c416 <sbrk_aligned+0x22>
 800c430:	e7ef      	b.n	800c412 <sbrk_aligned+0x1e>
 800c432:	bf00      	nop
 800c434:	20000e8c 	.word	0x20000e8c

0800c438 <_malloc_r>:
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c43c:	1ccd      	adds	r5, r1, #3
 800c43e:	f025 0503 	bic.w	r5, r5, #3
 800c442:	3508      	adds	r5, #8
 800c444:	2d0c      	cmp	r5, #12
 800c446:	bf38      	it	cc
 800c448:	250c      	movcc	r5, #12
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	4606      	mov	r6, r0
 800c44e:	db01      	blt.n	800c454 <_malloc_r+0x1c>
 800c450:	42a9      	cmp	r1, r5
 800c452:	d904      	bls.n	800c45e <_malloc_r+0x26>
 800c454:	230c      	movs	r3, #12
 800c456:	6033      	str	r3, [r6, #0]
 800c458:	2000      	movs	r0, #0
 800c45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c534 <_malloc_r+0xfc>
 800c462:	f000 f869 	bl	800c538 <__malloc_lock>
 800c466:	f8d8 3000 	ldr.w	r3, [r8]
 800c46a:	461c      	mov	r4, r3
 800c46c:	bb44      	cbnz	r4, 800c4c0 <_malloc_r+0x88>
 800c46e:	4629      	mov	r1, r5
 800c470:	4630      	mov	r0, r6
 800c472:	f7ff ffbf 	bl	800c3f4 <sbrk_aligned>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	4604      	mov	r4, r0
 800c47a:	d158      	bne.n	800c52e <_malloc_r+0xf6>
 800c47c:	f8d8 4000 	ldr.w	r4, [r8]
 800c480:	4627      	mov	r7, r4
 800c482:	2f00      	cmp	r7, #0
 800c484:	d143      	bne.n	800c50e <_malloc_r+0xd6>
 800c486:	2c00      	cmp	r4, #0
 800c488:	d04b      	beq.n	800c522 <_malloc_r+0xea>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	4639      	mov	r1, r7
 800c48e:	4630      	mov	r0, r6
 800c490:	eb04 0903 	add.w	r9, r4, r3
 800c494:	f002 face 	bl	800ea34 <_sbrk_r>
 800c498:	4581      	cmp	r9, r0
 800c49a:	d142      	bne.n	800c522 <_malloc_r+0xea>
 800c49c:	6821      	ldr	r1, [r4, #0]
 800c49e:	1a6d      	subs	r5, r5, r1
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f7ff ffa6 	bl	800c3f4 <sbrk_aligned>
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	d03a      	beq.n	800c522 <_malloc_r+0xea>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	442b      	add	r3, r5
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	bb62      	cbnz	r2, 800c514 <_malloc_r+0xdc>
 800c4ba:	f8c8 7000 	str.w	r7, [r8]
 800c4be:	e00f      	b.n	800c4e0 <_malloc_r+0xa8>
 800c4c0:	6822      	ldr	r2, [r4, #0]
 800c4c2:	1b52      	subs	r2, r2, r5
 800c4c4:	d420      	bmi.n	800c508 <_malloc_r+0xd0>
 800c4c6:	2a0b      	cmp	r2, #11
 800c4c8:	d917      	bls.n	800c4fa <_malloc_r+0xc2>
 800c4ca:	1961      	adds	r1, r4, r5
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	6025      	str	r5, [r4, #0]
 800c4d0:	bf18      	it	ne
 800c4d2:	6059      	strne	r1, [r3, #4]
 800c4d4:	6863      	ldr	r3, [r4, #4]
 800c4d6:	bf08      	it	eq
 800c4d8:	f8c8 1000 	streq.w	r1, [r8]
 800c4dc:	5162      	str	r2, [r4, r5]
 800c4de:	604b      	str	r3, [r1, #4]
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f000 f82f 	bl	800c544 <__malloc_unlock>
 800c4e6:	f104 000b 	add.w	r0, r4, #11
 800c4ea:	1d23      	adds	r3, r4, #4
 800c4ec:	f020 0007 	bic.w	r0, r0, #7
 800c4f0:	1ac2      	subs	r2, r0, r3
 800c4f2:	bf1c      	itt	ne
 800c4f4:	1a1b      	subne	r3, r3, r0
 800c4f6:	50a3      	strne	r3, [r4, r2]
 800c4f8:	e7af      	b.n	800c45a <_malloc_r+0x22>
 800c4fa:	6862      	ldr	r2, [r4, #4]
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	bf0c      	ite	eq
 800c500:	f8c8 2000 	streq.w	r2, [r8]
 800c504:	605a      	strne	r2, [r3, #4]
 800c506:	e7eb      	b.n	800c4e0 <_malloc_r+0xa8>
 800c508:	4623      	mov	r3, r4
 800c50a:	6864      	ldr	r4, [r4, #4]
 800c50c:	e7ae      	b.n	800c46c <_malloc_r+0x34>
 800c50e:	463c      	mov	r4, r7
 800c510:	687f      	ldr	r7, [r7, #4]
 800c512:	e7b6      	b.n	800c482 <_malloc_r+0x4a>
 800c514:	461a      	mov	r2, r3
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	42a3      	cmp	r3, r4
 800c51a:	d1fb      	bne.n	800c514 <_malloc_r+0xdc>
 800c51c:	2300      	movs	r3, #0
 800c51e:	6053      	str	r3, [r2, #4]
 800c520:	e7de      	b.n	800c4e0 <_malloc_r+0xa8>
 800c522:	230c      	movs	r3, #12
 800c524:	6033      	str	r3, [r6, #0]
 800c526:	4630      	mov	r0, r6
 800c528:	f000 f80c 	bl	800c544 <__malloc_unlock>
 800c52c:	e794      	b.n	800c458 <_malloc_r+0x20>
 800c52e:	6005      	str	r5, [r0, #0]
 800c530:	e7d6      	b.n	800c4e0 <_malloc_r+0xa8>
 800c532:	bf00      	nop
 800c534:	20000e90 	.word	0x20000e90

0800c538 <__malloc_lock>:
 800c538:	4801      	ldr	r0, [pc, #4]	@ (800c540 <__malloc_lock+0x8>)
 800c53a:	f7ff b8b4 	b.w	800b6a6 <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	20000e88 	.word	0x20000e88

0800c544 <__malloc_unlock>:
 800c544:	4801      	ldr	r0, [pc, #4]	@ (800c54c <__malloc_unlock+0x8>)
 800c546:	f7ff b8af 	b.w	800b6a8 <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	20000e88 	.word	0x20000e88

0800c550 <_Balloc>:
 800c550:	b570      	push	{r4, r5, r6, lr}
 800c552:	69c6      	ldr	r6, [r0, #28]
 800c554:	4604      	mov	r4, r0
 800c556:	460d      	mov	r5, r1
 800c558:	b976      	cbnz	r6, 800c578 <_Balloc+0x28>
 800c55a:	2010      	movs	r0, #16
 800c55c:	f7ff ff42 	bl	800c3e4 <malloc>
 800c560:	4602      	mov	r2, r0
 800c562:	61e0      	str	r0, [r4, #28]
 800c564:	b920      	cbnz	r0, 800c570 <_Balloc+0x20>
 800c566:	4b18      	ldr	r3, [pc, #96]	@ (800c5c8 <_Balloc+0x78>)
 800c568:	4818      	ldr	r0, [pc, #96]	@ (800c5cc <_Balloc+0x7c>)
 800c56a:	216b      	movs	r1, #107	@ 0x6b
 800c56c:	f002 fa88 	bl	800ea80 <__assert_func>
 800c570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c574:	6006      	str	r6, [r0, #0]
 800c576:	60c6      	str	r6, [r0, #12]
 800c578:	69e6      	ldr	r6, [r4, #28]
 800c57a:	68f3      	ldr	r3, [r6, #12]
 800c57c:	b183      	cbz	r3, 800c5a0 <_Balloc+0x50>
 800c57e:	69e3      	ldr	r3, [r4, #28]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c586:	b9b8      	cbnz	r0, 800c5b8 <_Balloc+0x68>
 800c588:	2101      	movs	r1, #1
 800c58a:	fa01 f605 	lsl.w	r6, r1, r5
 800c58e:	1d72      	adds	r2, r6, #5
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	4620      	mov	r0, r4
 800c594:	f002 fa92 	bl	800eabc <_calloc_r>
 800c598:	b160      	cbz	r0, 800c5b4 <_Balloc+0x64>
 800c59a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c59e:	e00e      	b.n	800c5be <_Balloc+0x6e>
 800c5a0:	2221      	movs	r2, #33	@ 0x21
 800c5a2:	2104      	movs	r1, #4
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f002 fa89 	bl	800eabc <_calloc_r>
 800c5aa:	69e3      	ldr	r3, [r4, #28]
 800c5ac:	60f0      	str	r0, [r6, #12]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e4      	bne.n	800c57e <_Balloc+0x2e>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	bd70      	pop	{r4, r5, r6, pc}
 800c5b8:	6802      	ldr	r2, [r0, #0]
 800c5ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5c4:	e7f7      	b.n	800c5b6 <_Balloc+0x66>
 800c5c6:	bf00      	nop
 800c5c8:	08010de1 	.word	0x08010de1
 800c5cc:	08010e61 	.word	0x08010e61

0800c5d0 <_Bfree>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	69c6      	ldr	r6, [r0, #28]
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	b976      	cbnz	r6, 800c5f8 <_Bfree+0x28>
 800c5da:	2010      	movs	r0, #16
 800c5dc:	f7ff ff02 	bl	800c3e4 <malloc>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	61e8      	str	r0, [r5, #28]
 800c5e4:	b920      	cbnz	r0, 800c5f0 <_Bfree+0x20>
 800c5e6:	4b09      	ldr	r3, [pc, #36]	@ (800c60c <_Bfree+0x3c>)
 800c5e8:	4809      	ldr	r0, [pc, #36]	@ (800c610 <_Bfree+0x40>)
 800c5ea:	218f      	movs	r1, #143	@ 0x8f
 800c5ec:	f002 fa48 	bl	800ea80 <__assert_func>
 800c5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5f4:	6006      	str	r6, [r0, #0]
 800c5f6:	60c6      	str	r6, [r0, #12]
 800c5f8:	b13c      	cbz	r4, 800c60a <_Bfree+0x3a>
 800c5fa:	69eb      	ldr	r3, [r5, #28]
 800c5fc:	6862      	ldr	r2, [r4, #4]
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c604:	6021      	str	r1, [r4, #0]
 800c606:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	08010de1 	.word	0x08010de1
 800c610:	08010e61 	.word	0x08010e61

0800c614 <__multadd>:
 800c614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c618:	690d      	ldr	r5, [r1, #16]
 800c61a:	4607      	mov	r7, r0
 800c61c:	460c      	mov	r4, r1
 800c61e:	461e      	mov	r6, r3
 800c620:	f101 0c14 	add.w	ip, r1, #20
 800c624:	2000      	movs	r0, #0
 800c626:	f8dc 3000 	ldr.w	r3, [ip]
 800c62a:	b299      	uxth	r1, r3
 800c62c:	fb02 6101 	mla	r1, r2, r1, r6
 800c630:	0c1e      	lsrs	r6, r3, #16
 800c632:	0c0b      	lsrs	r3, r1, #16
 800c634:	fb02 3306 	mla	r3, r2, r6, r3
 800c638:	b289      	uxth	r1, r1
 800c63a:	3001      	adds	r0, #1
 800c63c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c640:	4285      	cmp	r5, r0
 800c642:	f84c 1b04 	str.w	r1, [ip], #4
 800c646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c64a:	dcec      	bgt.n	800c626 <__multadd+0x12>
 800c64c:	b30e      	cbz	r6, 800c692 <__multadd+0x7e>
 800c64e:	68a3      	ldr	r3, [r4, #8]
 800c650:	42ab      	cmp	r3, r5
 800c652:	dc19      	bgt.n	800c688 <__multadd+0x74>
 800c654:	6861      	ldr	r1, [r4, #4]
 800c656:	4638      	mov	r0, r7
 800c658:	3101      	adds	r1, #1
 800c65a:	f7ff ff79 	bl	800c550 <_Balloc>
 800c65e:	4680      	mov	r8, r0
 800c660:	b928      	cbnz	r0, 800c66e <__multadd+0x5a>
 800c662:	4602      	mov	r2, r0
 800c664:	4b0c      	ldr	r3, [pc, #48]	@ (800c698 <__multadd+0x84>)
 800c666:	480d      	ldr	r0, [pc, #52]	@ (800c69c <__multadd+0x88>)
 800c668:	21ba      	movs	r1, #186	@ 0xba
 800c66a:	f002 fa09 	bl	800ea80 <__assert_func>
 800c66e:	6922      	ldr	r2, [r4, #16]
 800c670:	3202      	adds	r2, #2
 800c672:	f104 010c 	add.w	r1, r4, #12
 800c676:	0092      	lsls	r2, r2, #2
 800c678:	300c      	adds	r0, #12
 800c67a:	f002 f9eb 	bl	800ea54 <memcpy>
 800c67e:	4621      	mov	r1, r4
 800c680:	4638      	mov	r0, r7
 800c682:	f7ff ffa5 	bl	800c5d0 <_Bfree>
 800c686:	4644      	mov	r4, r8
 800c688:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c68c:	3501      	adds	r5, #1
 800c68e:	615e      	str	r6, [r3, #20]
 800c690:	6125      	str	r5, [r4, #16]
 800c692:	4620      	mov	r0, r4
 800c694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c698:	08010e50 	.word	0x08010e50
 800c69c:	08010e61 	.word	0x08010e61

0800c6a0 <__s2b>:
 800c6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a4:	460c      	mov	r4, r1
 800c6a6:	4615      	mov	r5, r2
 800c6a8:	461f      	mov	r7, r3
 800c6aa:	2209      	movs	r2, #9
 800c6ac:	3308      	adds	r3, #8
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	db09      	blt.n	800c6d0 <__s2b+0x30>
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f7ff ff47 	bl	800c550 <_Balloc>
 800c6c2:	b940      	cbnz	r0, 800c6d6 <__s2b+0x36>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	4b19      	ldr	r3, [pc, #100]	@ (800c72c <__s2b+0x8c>)
 800c6c8:	4819      	ldr	r0, [pc, #100]	@ (800c730 <__s2b+0x90>)
 800c6ca:	21d3      	movs	r1, #211	@ 0xd3
 800c6cc:	f002 f9d8 	bl	800ea80 <__assert_func>
 800c6d0:	0052      	lsls	r2, r2, #1
 800c6d2:	3101      	adds	r1, #1
 800c6d4:	e7f0      	b.n	800c6b8 <__s2b+0x18>
 800c6d6:	9b08      	ldr	r3, [sp, #32]
 800c6d8:	6143      	str	r3, [r0, #20]
 800c6da:	2d09      	cmp	r5, #9
 800c6dc:	f04f 0301 	mov.w	r3, #1
 800c6e0:	6103      	str	r3, [r0, #16]
 800c6e2:	dd16      	ble.n	800c712 <__s2b+0x72>
 800c6e4:	f104 0909 	add.w	r9, r4, #9
 800c6e8:	46c8      	mov	r8, r9
 800c6ea:	442c      	add	r4, r5
 800c6ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	3b30      	subs	r3, #48	@ 0x30
 800c6f4:	220a      	movs	r2, #10
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff ff8c 	bl	800c614 <__multadd>
 800c6fc:	45a0      	cmp	r8, r4
 800c6fe:	d1f5      	bne.n	800c6ec <__s2b+0x4c>
 800c700:	f1a5 0408 	sub.w	r4, r5, #8
 800c704:	444c      	add	r4, r9
 800c706:	1b2d      	subs	r5, r5, r4
 800c708:	1963      	adds	r3, r4, r5
 800c70a:	42bb      	cmp	r3, r7
 800c70c:	db04      	blt.n	800c718 <__s2b+0x78>
 800c70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c712:	340a      	adds	r4, #10
 800c714:	2509      	movs	r5, #9
 800c716:	e7f6      	b.n	800c706 <__s2b+0x66>
 800c718:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c71c:	4601      	mov	r1, r0
 800c71e:	3b30      	subs	r3, #48	@ 0x30
 800c720:	220a      	movs	r2, #10
 800c722:	4630      	mov	r0, r6
 800c724:	f7ff ff76 	bl	800c614 <__multadd>
 800c728:	e7ee      	b.n	800c708 <__s2b+0x68>
 800c72a:	bf00      	nop
 800c72c:	08010e50 	.word	0x08010e50
 800c730:	08010e61 	.word	0x08010e61

0800c734 <__hi0bits>:
 800c734:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c738:	4603      	mov	r3, r0
 800c73a:	bf36      	itet	cc
 800c73c:	0403      	lslcc	r3, r0, #16
 800c73e:	2000      	movcs	r0, #0
 800c740:	2010      	movcc	r0, #16
 800c742:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c746:	bf3c      	itt	cc
 800c748:	021b      	lslcc	r3, r3, #8
 800c74a:	3008      	addcc	r0, #8
 800c74c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c750:	bf3c      	itt	cc
 800c752:	011b      	lslcc	r3, r3, #4
 800c754:	3004      	addcc	r0, #4
 800c756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c75a:	bf3c      	itt	cc
 800c75c:	009b      	lslcc	r3, r3, #2
 800c75e:	3002      	addcc	r0, #2
 800c760:	2b00      	cmp	r3, #0
 800c762:	db05      	blt.n	800c770 <__hi0bits+0x3c>
 800c764:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c768:	f100 0001 	add.w	r0, r0, #1
 800c76c:	bf08      	it	eq
 800c76e:	2020      	moveq	r0, #32
 800c770:	4770      	bx	lr

0800c772 <__lo0bits>:
 800c772:	6803      	ldr	r3, [r0, #0]
 800c774:	4602      	mov	r2, r0
 800c776:	f013 0007 	ands.w	r0, r3, #7
 800c77a:	d00b      	beq.n	800c794 <__lo0bits+0x22>
 800c77c:	07d9      	lsls	r1, r3, #31
 800c77e:	d421      	bmi.n	800c7c4 <__lo0bits+0x52>
 800c780:	0798      	lsls	r0, r3, #30
 800c782:	bf49      	itett	mi
 800c784:	085b      	lsrmi	r3, r3, #1
 800c786:	089b      	lsrpl	r3, r3, #2
 800c788:	2001      	movmi	r0, #1
 800c78a:	6013      	strmi	r3, [r2, #0]
 800c78c:	bf5c      	itt	pl
 800c78e:	6013      	strpl	r3, [r2, #0]
 800c790:	2002      	movpl	r0, #2
 800c792:	4770      	bx	lr
 800c794:	b299      	uxth	r1, r3
 800c796:	b909      	cbnz	r1, 800c79c <__lo0bits+0x2a>
 800c798:	0c1b      	lsrs	r3, r3, #16
 800c79a:	2010      	movs	r0, #16
 800c79c:	b2d9      	uxtb	r1, r3
 800c79e:	b909      	cbnz	r1, 800c7a4 <__lo0bits+0x32>
 800c7a0:	3008      	adds	r0, #8
 800c7a2:	0a1b      	lsrs	r3, r3, #8
 800c7a4:	0719      	lsls	r1, r3, #28
 800c7a6:	bf04      	itt	eq
 800c7a8:	091b      	lsreq	r3, r3, #4
 800c7aa:	3004      	addeq	r0, #4
 800c7ac:	0799      	lsls	r1, r3, #30
 800c7ae:	bf04      	itt	eq
 800c7b0:	089b      	lsreq	r3, r3, #2
 800c7b2:	3002      	addeq	r0, #2
 800c7b4:	07d9      	lsls	r1, r3, #31
 800c7b6:	d403      	bmi.n	800c7c0 <__lo0bits+0x4e>
 800c7b8:	085b      	lsrs	r3, r3, #1
 800c7ba:	f100 0001 	add.w	r0, r0, #1
 800c7be:	d003      	beq.n	800c7c8 <__lo0bits+0x56>
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	4770      	bx	lr
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	4770      	bx	lr
 800c7c8:	2020      	movs	r0, #32
 800c7ca:	4770      	bx	lr

0800c7cc <__i2b>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	2101      	movs	r1, #1
 800c7d2:	f7ff febd 	bl	800c550 <_Balloc>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	b928      	cbnz	r0, 800c7e6 <__i2b+0x1a>
 800c7da:	4b05      	ldr	r3, [pc, #20]	@ (800c7f0 <__i2b+0x24>)
 800c7dc:	4805      	ldr	r0, [pc, #20]	@ (800c7f4 <__i2b+0x28>)
 800c7de:	f240 1145 	movw	r1, #325	@ 0x145
 800c7e2:	f002 f94d 	bl	800ea80 <__assert_func>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	6144      	str	r4, [r0, #20]
 800c7ea:	6103      	str	r3, [r0, #16]
 800c7ec:	bd10      	pop	{r4, pc}
 800c7ee:	bf00      	nop
 800c7f0:	08010e50 	.word	0x08010e50
 800c7f4:	08010e61 	.word	0x08010e61

0800c7f8 <__multiply>:
 800c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fc:	4614      	mov	r4, r2
 800c7fe:	690a      	ldr	r2, [r1, #16]
 800c800:	6923      	ldr	r3, [r4, #16]
 800c802:	429a      	cmp	r2, r3
 800c804:	bfa8      	it	ge
 800c806:	4623      	movge	r3, r4
 800c808:	460f      	mov	r7, r1
 800c80a:	bfa4      	itt	ge
 800c80c:	460c      	movge	r4, r1
 800c80e:	461f      	movge	r7, r3
 800c810:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c814:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	6861      	ldr	r1, [r4, #4]
 800c81c:	eb0a 0609 	add.w	r6, sl, r9
 800c820:	42b3      	cmp	r3, r6
 800c822:	b085      	sub	sp, #20
 800c824:	bfb8      	it	lt
 800c826:	3101      	addlt	r1, #1
 800c828:	f7ff fe92 	bl	800c550 <_Balloc>
 800c82c:	b930      	cbnz	r0, 800c83c <__multiply+0x44>
 800c82e:	4602      	mov	r2, r0
 800c830:	4b44      	ldr	r3, [pc, #272]	@ (800c944 <__multiply+0x14c>)
 800c832:	4845      	ldr	r0, [pc, #276]	@ (800c948 <__multiply+0x150>)
 800c834:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c838:	f002 f922 	bl	800ea80 <__assert_func>
 800c83c:	f100 0514 	add.w	r5, r0, #20
 800c840:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c844:	462b      	mov	r3, r5
 800c846:	2200      	movs	r2, #0
 800c848:	4543      	cmp	r3, r8
 800c84a:	d321      	bcc.n	800c890 <__multiply+0x98>
 800c84c:	f107 0114 	add.w	r1, r7, #20
 800c850:	f104 0214 	add.w	r2, r4, #20
 800c854:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c858:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	1b13      	subs	r3, r2, r4
 800c860:	3b15      	subs	r3, #21
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	3304      	adds	r3, #4
 800c868:	f104 0715 	add.w	r7, r4, #21
 800c86c:	42ba      	cmp	r2, r7
 800c86e:	bf38      	it	cc
 800c870:	2304      	movcc	r3, #4
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	9103      	str	r1, [sp, #12]
 800c878:	428b      	cmp	r3, r1
 800c87a:	d80c      	bhi.n	800c896 <__multiply+0x9e>
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	dd03      	ble.n	800c888 <__multiply+0x90>
 800c880:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c884:	2b00      	cmp	r3, #0
 800c886:	d05b      	beq.n	800c940 <__multiply+0x148>
 800c888:	6106      	str	r6, [r0, #16]
 800c88a:	b005      	add	sp, #20
 800c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c890:	f843 2b04 	str.w	r2, [r3], #4
 800c894:	e7d8      	b.n	800c848 <__multiply+0x50>
 800c896:	f8b1 a000 	ldrh.w	sl, [r1]
 800c89a:	f1ba 0f00 	cmp.w	sl, #0
 800c89e:	d024      	beq.n	800c8ea <__multiply+0xf2>
 800c8a0:	f104 0e14 	add.w	lr, r4, #20
 800c8a4:	46a9      	mov	r9, r5
 800c8a6:	f04f 0c00 	mov.w	ip, #0
 800c8aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8ae:	f8d9 3000 	ldr.w	r3, [r9]
 800c8b2:	fa1f fb87 	uxth.w	fp, r7
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c8bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c8c0:	f8d9 7000 	ldr.w	r7, [r9]
 800c8c4:	4463      	add	r3, ip
 800c8c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800c8ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c8d8:	4572      	cmp	r2, lr
 800c8da:	f849 3b04 	str.w	r3, [r9], #4
 800c8de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c8e2:	d8e2      	bhi.n	800c8aa <__multiply+0xb2>
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	f845 c003 	str.w	ip, [r5, r3]
 800c8ea:	9b03      	ldr	r3, [sp, #12]
 800c8ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c8f0:	3104      	adds	r1, #4
 800c8f2:	f1b9 0f00 	cmp.w	r9, #0
 800c8f6:	d021      	beq.n	800c93c <__multiply+0x144>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	f104 0c14 	add.w	ip, r4, #20
 800c8fe:	46ae      	mov	lr, r5
 800c900:	f04f 0a00 	mov.w	sl, #0
 800c904:	f8bc b000 	ldrh.w	fp, [ip]
 800c908:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c90c:	fb09 770b 	mla	r7, r9, fp, r7
 800c910:	4457      	add	r7, sl
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c918:	f84e 3b04 	str.w	r3, [lr], #4
 800c91c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c920:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c924:	f8be 3000 	ldrh.w	r3, [lr]
 800c928:	fb09 330a 	mla	r3, r9, sl, r3
 800c92c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c930:	4562      	cmp	r2, ip
 800c932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c936:	d8e5      	bhi.n	800c904 <__multiply+0x10c>
 800c938:	9f01      	ldr	r7, [sp, #4]
 800c93a:	51eb      	str	r3, [r5, r7]
 800c93c:	3504      	adds	r5, #4
 800c93e:	e799      	b.n	800c874 <__multiply+0x7c>
 800c940:	3e01      	subs	r6, #1
 800c942:	e79b      	b.n	800c87c <__multiply+0x84>
 800c944:	08010e50 	.word	0x08010e50
 800c948:	08010e61 	.word	0x08010e61

0800c94c <__pow5mult>:
 800c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c950:	4615      	mov	r5, r2
 800c952:	f012 0203 	ands.w	r2, r2, #3
 800c956:	4607      	mov	r7, r0
 800c958:	460e      	mov	r6, r1
 800c95a:	d007      	beq.n	800c96c <__pow5mult+0x20>
 800c95c:	4c25      	ldr	r4, [pc, #148]	@ (800c9f4 <__pow5mult+0xa8>)
 800c95e:	3a01      	subs	r2, #1
 800c960:	2300      	movs	r3, #0
 800c962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c966:	f7ff fe55 	bl	800c614 <__multadd>
 800c96a:	4606      	mov	r6, r0
 800c96c:	10ad      	asrs	r5, r5, #2
 800c96e:	d03d      	beq.n	800c9ec <__pow5mult+0xa0>
 800c970:	69fc      	ldr	r4, [r7, #28]
 800c972:	b97c      	cbnz	r4, 800c994 <__pow5mult+0x48>
 800c974:	2010      	movs	r0, #16
 800c976:	f7ff fd35 	bl	800c3e4 <malloc>
 800c97a:	4602      	mov	r2, r0
 800c97c:	61f8      	str	r0, [r7, #28]
 800c97e:	b928      	cbnz	r0, 800c98c <__pow5mult+0x40>
 800c980:	4b1d      	ldr	r3, [pc, #116]	@ (800c9f8 <__pow5mult+0xac>)
 800c982:	481e      	ldr	r0, [pc, #120]	@ (800c9fc <__pow5mult+0xb0>)
 800c984:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c988:	f002 f87a 	bl	800ea80 <__assert_func>
 800c98c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c990:	6004      	str	r4, [r0, #0]
 800c992:	60c4      	str	r4, [r0, #12]
 800c994:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c998:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c99c:	b94c      	cbnz	r4, 800c9b2 <__pow5mult+0x66>
 800c99e:	f240 2171 	movw	r1, #625	@ 0x271
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	f7ff ff12 	bl	800c7cc <__i2b>
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	6003      	str	r3, [r0, #0]
 800c9b2:	f04f 0900 	mov.w	r9, #0
 800c9b6:	07eb      	lsls	r3, r5, #31
 800c9b8:	d50a      	bpl.n	800c9d0 <__pow5mult+0x84>
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4638      	mov	r0, r7
 800c9c0:	f7ff ff1a 	bl	800c7f8 <__multiply>
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	4680      	mov	r8, r0
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f7ff fe01 	bl	800c5d0 <_Bfree>
 800c9ce:	4646      	mov	r6, r8
 800c9d0:	106d      	asrs	r5, r5, #1
 800c9d2:	d00b      	beq.n	800c9ec <__pow5mult+0xa0>
 800c9d4:	6820      	ldr	r0, [r4, #0]
 800c9d6:	b938      	cbnz	r0, 800c9e8 <__pow5mult+0x9c>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4638      	mov	r0, r7
 800c9de:	f7ff ff0b 	bl	800c7f8 <__multiply>
 800c9e2:	6020      	str	r0, [r4, #0]
 800c9e4:	f8c0 9000 	str.w	r9, [r0]
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	e7e4      	b.n	800c9b6 <__pow5mult+0x6a>
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08010ebc 	.word	0x08010ebc
 800c9f8:	08010de1 	.word	0x08010de1
 800c9fc:	08010e61 	.word	0x08010e61

0800ca00 <__lshift>:
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	460c      	mov	r4, r1
 800ca06:	6849      	ldr	r1, [r1, #4]
 800ca08:	6923      	ldr	r3, [r4, #16]
 800ca0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca0e:	68a3      	ldr	r3, [r4, #8]
 800ca10:	4607      	mov	r7, r0
 800ca12:	4691      	mov	r9, r2
 800ca14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca18:	f108 0601 	add.w	r6, r8, #1
 800ca1c:	42b3      	cmp	r3, r6
 800ca1e:	db0b      	blt.n	800ca38 <__lshift+0x38>
 800ca20:	4638      	mov	r0, r7
 800ca22:	f7ff fd95 	bl	800c550 <_Balloc>
 800ca26:	4605      	mov	r5, r0
 800ca28:	b948      	cbnz	r0, 800ca3e <__lshift+0x3e>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4b28      	ldr	r3, [pc, #160]	@ (800cad0 <__lshift+0xd0>)
 800ca2e:	4829      	ldr	r0, [pc, #164]	@ (800cad4 <__lshift+0xd4>)
 800ca30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca34:	f002 f824 	bl	800ea80 <__assert_func>
 800ca38:	3101      	adds	r1, #1
 800ca3a:	005b      	lsls	r3, r3, #1
 800ca3c:	e7ee      	b.n	800ca1c <__lshift+0x1c>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f100 0114 	add.w	r1, r0, #20
 800ca44:	f100 0210 	add.w	r2, r0, #16
 800ca48:	4618      	mov	r0, r3
 800ca4a:	4553      	cmp	r3, sl
 800ca4c:	db33      	blt.n	800cab6 <__lshift+0xb6>
 800ca4e:	6920      	ldr	r0, [r4, #16]
 800ca50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca54:	f104 0314 	add.w	r3, r4, #20
 800ca58:	f019 091f 	ands.w	r9, r9, #31
 800ca5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca64:	d02b      	beq.n	800cabe <__lshift+0xbe>
 800ca66:	f1c9 0e20 	rsb	lr, r9, #32
 800ca6a:	468a      	mov	sl, r1
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	6818      	ldr	r0, [r3, #0]
 800ca70:	fa00 f009 	lsl.w	r0, r0, r9
 800ca74:	4310      	orrs	r0, r2
 800ca76:	f84a 0b04 	str.w	r0, [sl], #4
 800ca7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca7e:	459c      	cmp	ip, r3
 800ca80:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca84:	d8f3      	bhi.n	800ca6e <__lshift+0x6e>
 800ca86:	ebac 0304 	sub.w	r3, ip, r4
 800ca8a:	3b15      	subs	r3, #21
 800ca8c:	f023 0303 	bic.w	r3, r3, #3
 800ca90:	3304      	adds	r3, #4
 800ca92:	f104 0015 	add.w	r0, r4, #21
 800ca96:	4584      	cmp	ip, r0
 800ca98:	bf38      	it	cc
 800ca9a:	2304      	movcc	r3, #4
 800ca9c:	50ca      	str	r2, [r1, r3]
 800ca9e:	b10a      	cbz	r2, 800caa4 <__lshift+0xa4>
 800caa0:	f108 0602 	add.w	r6, r8, #2
 800caa4:	3e01      	subs	r6, #1
 800caa6:	4638      	mov	r0, r7
 800caa8:	612e      	str	r6, [r5, #16]
 800caaa:	4621      	mov	r1, r4
 800caac:	f7ff fd90 	bl	800c5d0 <_Bfree>
 800cab0:	4628      	mov	r0, r5
 800cab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab6:	f842 0f04 	str.w	r0, [r2, #4]!
 800caba:	3301      	adds	r3, #1
 800cabc:	e7c5      	b.n	800ca4a <__lshift+0x4a>
 800cabe:	3904      	subs	r1, #4
 800cac0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cac4:	f841 2f04 	str.w	r2, [r1, #4]!
 800cac8:	459c      	cmp	ip, r3
 800caca:	d8f9      	bhi.n	800cac0 <__lshift+0xc0>
 800cacc:	e7ea      	b.n	800caa4 <__lshift+0xa4>
 800cace:	bf00      	nop
 800cad0:	08010e50 	.word	0x08010e50
 800cad4:	08010e61 	.word	0x08010e61

0800cad8 <__mcmp>:
 800cad8:	690a      	ldr	r2, [r1, #16]
 800cada:	4603      	mov	r3, r0
 800cadc:	6900      	ldr	r0, [r0, #16]
 800cade:	1a80      	subs	r0, r0, r2
 800cae0:	b530      	push	{r4, r5, lr}
 800cae2:	d10e      	bne.n	800cb02 <__mcmp+0x2a>
 800cae4:	3314      	adds	r3, #20
 800cae6:	3114      	adds	r1, #20
 800cae8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800caec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800caf0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800caf4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800caf8:	4295      	cmp	r5, r2
 800cafa:	d003      	beq.n	800cb04 <__mcmp+0x2c>
 800cafc:	d205      	bcs.n	800cb0a <__mcmp+0x32>
 800cafe:	f04f 30ff 	mov.w	r0, #4294967295
 800cb02:	bd30      	pop	{r4, r5, pc}
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	d3f3      	bcc.n	800caf0 <__mcmp+0x18>
 800cb08:	e7fb      	b.n	800cb02 <__mcmp+0x2a>
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	e7f9      	b.n	800cb02 <__mcmp+0x2a>
	...

0800cb10 <__mdiff>:
 800cb10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	4689      	mov	r9, r1
 800cb16:	4606      	mov	r6, r0
 800cb18:	4611      	mov	r1, r2
 800cb1a:	4648      	mov	r0, r9
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	f7ff ffdb 	bl	800cad8 <__mcmp>
 800cb22:	1e05      	subs	r5, r0, #0
 800cb24:	d112      	bne.n	800cb4c <__mdiff+0x3c>
 800cb26:	4629      	mov	r1, r5
 800cb28:	4630      	mov	r0, r6
 800cb2a:	f7ff fd11 	bl	800c550 <_Balloc>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	b928      	cbnz	r0, 800cb3e <__mdiff+0x2e>
 800cb32:	4b3f      	ldr	r3, [pc, #252]	@ (800cc30 <__mdiff+0x120>)
 800cb34:	f240 2137 	movw	r1, #567	@ 0x237
 800cb38:	483e      	ldr	r0, [pc, #248]	@ (800cc34 <__mdiff+0x124>)
 800cb3a:	f001 ffa1 	bl	800ea80 <__assert_func>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb44:	4610      	mov	r0, r2
 800cb46:	b003      	add	sp, #12
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	bfbc      	itt	lt
 800cb4e:	464b      	movlt	r3, r9
 800cb50:	46a1      	movlt	r9, r4
 800cb52:	4630      	mov	r0, r6
 800cb54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb58:	bfba      	itte	lt
 800cb5a:	461c      	movlt	r4, r3
 800cb5c:	2501      	movlt	r5, #1
 800cb5e:	2500      	movge	r5, #0
 800cb60:	f7ff fcf6 	bl	800c550 <_Balloc>
 800cb64:	4602      	mov	r2, r0
 800cb66:	b918      	cbnz	r0, 800cb70 <__mdiff+0x60>
 800cb68:	4b31      	ldr	r3, [pc, #196]	@ (800cc30 <__mdiff+0x120>)
 800cb6a:	f240 2145 	movw	r1, #581	@ 0x245
 800cb6e:	e7e3      	b.n	800cb38 <__mdiff+0x28>
 800cb70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cb74:	6926      	ldr	r6, [r4, #16]
 800cb76:	60c5      	str	r5, [r0, #12]
 800cb78:	f109 0310 	add.w	r3, r9, #16
 800cb7c:	f109 0514 	add.w	r5, r9, #20
 800cb80:	f104 0e14 	add.w	lr, r4, #20
 800cb84:	f100 0b14 	add.w	fp, r0, #20
 800cb88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cb8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	46d9      	mov	r9, fp
 800cb94:	f04f 0c00 	mov.w	ip, #0
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cb9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	fa1f f38a 	uxth.w	r3, sl
 800cba8:	4619      	mov	r1, r3
 800cbaa:	b283      	uxth	r3, r0
 800cbac:	1acb      	subs	r3, r1, r3
 800cbae:	0c00      	lsrs	r0, r0, #16
 800cbb0:	4463      	add	r3, ip
 800cbb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbc0:	4576      	cmp	r6, lr
 800cbc2:	f849 3b04 	str.w	r3, [r9], #4
 800cbc6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cbca:	d8e5      	bhi.n	800cb98 <__mdiff+0x88>
 800cbcc:	1b33      	subs	r3, r6, r4
 800cbce:	3b15      	subs	r3, #21
 800cbd0:	f023 0303 	bic.w	r3, r3, #3
 800cbd4:	3415      	adds	r4, #21
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	42a6      	cmp	r6, r4
 800cbda:	bf38      	it	cc
 800cbdc:	2304      	movcc	r3, #4
 800cbde:	441d      	add	r5, r3
 800cbe0:	445b      	add	r3, fp
 800cbe2:	461e      	mov	r6, r3
 800cbe4:	462c      	mov	r4, r5
 800cbe6:	4544      	cmp	r4, r8
 800cbe8:	d30e      	bcc.n	800cc08 <__mdiff+0xf8>
 800cbea:	f108 0103 	add.w	r1, r8, #3
 800cbee:	1b49      	subs	r1, r1, r5
 800cbf0:	f021 0103 	bic.w	r1, r1, #3
 800cbf4:	3d03      	subs	r5, #3
 800cbf6:	45a8      	cmp	r8, r5
 800cbf8:	bf38      	it	cc
 800cbfa:	2100      	movcc	r1, #0
 800cbfc:	440b      	add	r3, r1
 800cbfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc02:	b191      	cbz	r1, 800cc2a <__mdiff+0x11a>
 800cc04:	6117      	str	r7, [r2, #16]
 800cc06:	e79d      	b.n	800cb44 <__mdiff+0x34>
 800cc08:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc0c:	46e6      	mov	lr, ip
 800cc0e:	0c08      	lsrs	r0, r1, #16
 800cc10:	fa1c fc81 	uxtah	ip, ip, r1
 800cc14:	4471      	add	r1, lr
 800cc16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc1a:	b289      	uxth	r1, r1
 800cc1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc20:	f846 1b04 	str.w	r1, [r6], #4
 800cc24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc28:	e7dd      	b.n	800cbe6 <__mdiff+0xd6>
 800cc2a:	3f01      	subs	r7, #1
 800cc2c:	e7e7      	b.n	800cbfe <__mdiff+0xee>
 800cc2e:	bf00      	nop
 800cc30:	08010e50 	.word	0x08010e50
 800cc34:	08010e61 	.word	0x08010e61

0800cc38 <__ulp>:
 800cc38:	b082      	sub	sp, #8
 800cc3a:	ed8d 0b00 	vstr	d0, [sp]
 800cc3e:	9a01      	ldr	r2, [sp, #4]
 800cc40:	4b0f      	ldr	r3, [pc, #60]	@ (800cc80 <__ulp+0x48>)
 800cc42:	4013      	ands	r3, r2
 800cc44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	dc08      	bgt.n	800cc5e <__ulp+0x26>
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc56:	da04      	bge.n	800cc62 <__ulp+0x2a>
 800cc58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc5c:	4113      	asrs	r3, r2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	e008      	b.n	800cc74 <__ulp+0x3c>
 800cc62:	f1a2 0314 	sub.w	r3, r2, #20
 800cc66:	2b1e      	cmp	r3, #30
 800cc68:	bfda      	itte	le
 800cc6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cc6e:	40da      	lsrle	r2, r3
 800cc70:	2201      	movgt	r2, #1
 800cc72:	2300      	movs	r3, #0
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	ec41 0b10 	vmov	d0, r0, r1
 800cc7c:	b002      	add	sp, #8
 800cc7e:	4770      	bx	lr
 800cc80:	7ff00000 	.word	0x7ff00000

0800cc84 <__b2d>:
 800cc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	6906      	ldr	r6, [r0, #16]
 800cc8a:	f100 0814 	add.w	r8, r0, #20
 800cc8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cc92:	1f37      	subs	r7, r6, #4
 800cc94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f7ff fd4b 	bl	800c734 <__hi0bits>
 800cc9e:	f1c0 0320 	rsb	r3, r0, #32
 800cca2:	280a      	cmp	r0, #10
 800cca4:	600b      	str	r3, [r1, #0]
 800cca6:	491b      	ldr	r1, [pc, #108]	@ (800cd14 <__b2d+0x90>)
 800cca8:	dc15      	bgt.n	800ccd6 <__b2d+0x52>
 800ccaa:	f1c0 0c0b 	rsb	ip, r0, #11
 800ccae:	fa22 f30c 	lsr.w	r3, r2, ip
 800ccb2:	45b8      	cmp	r8, r7
 800ccb4:	ea43 0501 	orr.w	r5, r3, r1
 800ccb8:	bf34      	ite	cc
 800ccba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccbe:	2300      	movcs	r3, #0
 800ccc0:	3015      	adds	r0, #21
 800ccc2:	fa02 f000 	lsl.w	r0, r2, r0
 800ccc6:	fa23 f30c 	lsr.w	r3, r3, ip
 800ccca:	4303      	orrs	r3, r0
 800cccc:	461c      	mov	r4, r3
 800ccce:	ec45 4b10 	vmov	d0, r4, r5
 800ccd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd6:	45b8      	cmp	r8, r7
 800ccd8:	bf3a      	itte	cc
 800ccda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccde:	f1a6 0708 	subcc.w	r7, r6, #8
 800cce2:	2300      	movcs	r3, #0
 800cce4:	380b      	subs	r0, #11
 800cce6:	d012      	beq.n	800cd0e <__b2d+0x8a>
 800cce8:	f1c0 0120 	rsb	r1, r0, #32
 800ccec:	fa23 f401 	lsr.w	r4, r3, r1
 800ccf0:	4082      	lsls	r2, r0
 800ccf2:	4322      	orrs	r2, r4
 800ccf4:	4547      	cmp	r7, r8
 800ccf6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ccfa:	bf8c      	ite	hi
 800ccfc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd00:	2200      	movls	r2, #0
 800cd02:	4083      	lsls	r3, r0
 800cd04:	40ca      	lsrs	r2, r1
 800cd06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	e7de      	b.n	800cccc <__b2d+0x48>
 800cd0e:	ea42 0501 	orr.w	r5, r2, r1
 800cd12:	e7db      	b.n	800cccc <__b2d+0x48>
 800cd14:	3ff00000 	.word	0x3ff00000

0800cd18 <__d2b>:
 800cd18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd1c:	460f      	mov	r7, r1
 800cd1e:	2101      	movs	r1, #1
 800cd20:	ec59 8b10 	vmov	r8, r9, d0
 800cd24:	4616      	mov	r6, r2
 800cd26:	f7ff fc13 	bl	800c550 <_Balloc>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	b930      	cbnz	r0, 800cd3c <__d2b+0x24>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	4b23      	ldr	r3, [pc, #140]	@ (800cdc0 <__d2b+0xa8>)
 800cd32:	4824      	ldr	r0, [pc, #144]	@ (800cdc4 <__d2b+0xac>)
 800cd34:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd38:	f001 fea2 	bl	800ea80 <__assert_func>
 800cd3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd44:	b10d      	cbz	r5, 800cd4a <__d2b+0x32>
 800cd46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	f1b8 0300 	subs.w	r3, r8, #0
 800cd50:	d023      	beq.n	800cd9a <__d2b+0x82>
 800cd52:	4668      	mov	r0, sp
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	f7ff fd0c 	bl	800c772 <__lo0bits>
 800cd5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd5e:	b1d0      	cbz	r0, 800cd96 <__d2b+0x7e>
 800cd60:	f1c0 0320 	rsb	r3, r0, #32
 800cd64:	fa02 f303 	lsl.w	r3, r2, r3
 800cd68:	430b      	orrs	r3, r1
 800cd6a:	40c2      	lsrs	r2, r0
 800cd6c:	6163      	str	r3, [r4, #20]
 800cd6e:	9201      	str	r2, [sp, #4]
 800cd70:	9b01      	ldr	r3, [sp, #4]
 800cd72:	61a3      	str	r3, [r4, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	bf0c      	ite	eq
 800cd78:	2201      	moveq	r2, #1
 800cd7a:	2202      	movne	r2, #2
 800cd7c:	6122      	str	r2, [r4, #16]
 800cd7e:	b1a5      	cbz	r5, 800cdaa <__d2b+0x92>
 800cd80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd84:	4405      	add	r5, r0
 800cd86:	603d      	str	r5, [r7, #0]
 800cd88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd8c:	6030      	str	r0, [r6, #0]
 800cd8e:	4620      	mov	r0, r4
 800cd90:	b003      	add	sp, #12
 800cd92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd96:	6161      	str	r1, [r4, #20]
 800cd98:	e7ea      	b.n	800cd70 <__d2b+0x58>
 800cd9a:	a801      	add	r0, sp, #4
 800cd9c:	f7ff fce9 	bl	800c772 <__lo0bits>
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	6163      	str	r3, [r4, #20]
 800cda4:	3020      	adds	r0, #32
 800cda6:	2201      	movs	r2, #1
 800cda8:	e7e8      	b.n	800cd7c <__d2b+0x64>
 800cdaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdb2:	6038      	str	r0, [r7, #0]
 800cdb4:	6918      	ldr	r0, [r3, #16]
 800cdb6:	f7ff fcbd 	bl	800c734 <__hi0bits>
 800cdba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdbe:	e7e5      	b.n	800cd8c <__d2b+0x74>
 800cdc0:	08010e50 	.word	0x08010e50
 800cdc4:	08010e61 	.word	0x08010e61

0800cdc8 <__ratio>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	b085      	sub	sp, #20
 800cdce:	e9cd 1000 	strd	r1, r0, [sp]
 800cdd2:	a902      	add	r1, sp, #8
 800cdd4:	f7ff ff56 	bl	800cc84 <__b2d>
 800cdd8:	9800      	ldr	r0, [sp, #0]
 800cdda:	a903      	add	r1, sp, #12
 800cddc:	ec55 4b10 	vmov	r4, r5, d0
 800cde0:	f7ff ff50 	bl	800cc84 <__b2d>
 800cde4:	9b01      	ldr	r3, [sp, #4]
 800cde6:	6919      	ldr	r1, [r3, #16]
 800cde8:	9b00      	ldr	r3, [sp, #0]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	1ac9      	subs	r1, r1, r3
 800cdee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cdf2:	1a9b      	subs	r3, r3, r2
 800cdf4:	ec5b ab10 	vmov	sl, fp, d0
 800cdf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	bfce      	itee	gt
 800ce00:	462a      	movgt	r2, r5
 800ce02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce06:	465a      	movle	r2, fp
 800ce08:	462f      	mov	r7, r5
 800ce0a:	46d9      	mov	r9, fp
 800ce0c:	bfcc      	ite	gt
 800ce0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce16:	464b      	mov	r3, r9
 800ce18:	4652      	mov	r2, sl
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	f7f3 fd2d 	bl	800087c <__aeabi_ddiv>
 800ce22:	ec41 0b10 	vmov	d0, r0, r1
 800ce26:	b005      	add	sp, #20
 800ce28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce2c <__copybits>:
 800ce2c:	3901      	subs	r1, #1
 800ce2e:	b570      	push	{r4, r5, r6, lr}
 800ce30:	1149      	asrs	r1, r1, #5
 800ce32:	6914      	ldr	r4, [r2, #16]
 800ce34:	3101      	adds	r1, #1
 800ce36:	f102 0314 	add.w	r3, r2, #20
 800ce3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce42:	1f05      	subs	r5, r0, #4
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	d30c      	bcc.n	800ce62 <__copybits+0x36>
 800ce48:	1aa3      	subs	r3, r4, r2
 800ce4a:	3b11      	subs	r3, #17
 800ce4c:	f023 0303 	bic.w	r3, r3, #3
 800ce50:	3211      	adds	r2, #17
 800ce52:	42a2      	cmp	r2, r4
 800ce54:	bf88      	it	hi
 800ce56:	2300      	movhi	r3, #0
 800ce58:	4418      	add	r0, r3
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	4288      	cmp	r0, r1
 800ce5e:	d305      	bcc.n	800ce6c <__copybits+0x40>
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
 800ce62:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce66:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce6a:	e7eb      	b.n	800ce44 <__copybits+0x18>
 800ce6c:	f840 3b04 	str.w	r3, [r0], #4
 800ce70:	e7f4      	b.n	800ce5c <__copybits+0x30>

0800ce72 <__any_on>:
 800ce72:	f100 0214 	add.w	r2, r0, #20
 800ce76:	6900      	ldr	r0, [r0, #16]
 800ce78:	114b      	asrs	r3, r1, #5
 800ce7a:	4298      	cmp	r0, r3
 800ce7c:	b510      	push	{r4, lr}
 800ce7e:	db11      	blt.n	800cea4 <__any_on+0x32>
 800ce80:	dd0a      	ble.n	800ce98 <__any_on+0x26>
 800ce82:	f011 011f 	ands.w	r1, r1, #31
 800ce86:	d007      	beq.n	800ce98 <__any_on+0x26>
 800ce88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce8c:	fa24 f001 	lsr.w	r0, r4, r1
 800ce90:	fa00 f101 	lsl.w	r1, r0, r1
 800ce94:	428c      	cmp	r4, r1
 800ce96:	d10b      	bne.n	800ceb0 <__any_on+0x3e>
 800ce98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d803      	bhi.n	800cea8 <__any_on+0x36>
 800cea0:	2000      	movs	r0, #0
 800cea2:	bd10      	pop	{r4, pc}
 800cea4:	4603      	mov	r3, r0
 800cea6:	e7f7      	b.n	800ce98 <__any_on+0x26>
 800cea8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ceac:	2900      	cmp	r1, #0
 800ceae:	d0f5      	beq.n	800ce9c <__any_on+0x2a>
 800ceb0:	2001      	movs	r0, #1
 800ceb2:	e7f6      	b.n	800cea2 <__any_on+0x30>

0800ceb4 <sulp>:
 800ceb4:	b570      	push	{r4, r5, r6, lr}
 800ceb6:	4604      	mov	r4, r0
 800ceb8:	460d      	mov	r5, r1
 800ceba:	ec45 4b10 	vmov	d0, r4, r5
 800cebe:	4616      	mov	r6, r2
 800cec0:	f7ff feba 	bl	800cc38 <__ulp>
 800cec4:	ec51 0b10 	vmov	r0, r1, d0
 800cec8:	b17e      	cbz	r6, 800ceea <sulp+0x36>
 800ceca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cece:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	dd09      	ble.n	800ceea <sulp+0x36>
 800ced6:	051b      	lsls	r3, r3, #20
 800ced8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cedc:	2400      	movs	r4, #0
 800cede:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cee2:	4622      	mov	r2, r4
 800cee4:	462b      	mov	r3, r5
 800cee6:	f7f3 fb9f 	bl	8000628 <__aeabi_dmul>
 800ceea:	ec41 0b10 	vmov	d0, r0, r1
 800ceee:	bd70      	pop	{r4, r5, r6, pc}

0800cef0 <_strtod_l>:
 800cef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef4:	b09f      	sub	sp, #124	@ 0x7c
 800cef6:	460c      	mov	r4, r1
 800cef8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cefa:	2200      	movs	r2, #0
 800cefc:	921a      	str	r2, [sp, #104]	@ 0x68
 800cefe:	9005      	str	r0, [sp, #20]
 800cf00:	f04f 0a00 	mov.w	sl, #0
 800cf04:	f04f 0b00 	mov.w	fp, #0
 800cf08:	460a      	mov	r2, r1
 800cf0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf0c:	7811      	ldrb	r1, [r2, #0]
 800cf0e:	292b      	cmp	r1, #43	@ 0x2b
 800cf10:	d04a      	beq.n	800cfa8 <_strtod_l+0xb8>
 800cf12:	d838      	bhi.n	800cf86 <_strtod_l+0x96>
 800cf14:	290d      	cmp	r1, #13
 800cf16:	d832      	bhi.n	800cf7e <_strtod_l+0x8e>
 800cf18:	2908      	cmp	r1, #8
 800cf1a:	d832      	bhi.n	800cf82 <_strtod_l+0x92>
 800cf1c:	2900      	cmp	r1, #0
 800cf1e:	d03b      	beq.n	800cf98 <_strtod_l+0xa8>
 800cf20:	2200      	movs	r2, #0
 800cf22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cf24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cf26:	782a      	ldrb	r2, [r5, #0]
 800cf28:	2a30      	cmp	r2, #48	@ 0x30
 800cf2a:	f040 80b3 	bne.w	800d094 <_strtod_l+0x1a4>
 800cf2e:	786a      	ldrb	r2, [r5, #1]
 800cf30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf34:	2a58      	cmp	r2, #88	@ 0x58
 800cf36:	d16e      	bne.n	800d016 <_strtod_l+0x126>
 800cf38:	9302      	str	r3, [sp, #8]
 800cf3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	4a8e      	ldr	r2, [pc, #568]	@ (800d17c <_strtod_l+0x28c>)
 800cf44:	9805      	ldr	r0, [sp, #20]
 800cf46:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf48:	a919      	add	r1, sp, #100	@ 0x64
 800cf4a:	f001 fe33 	bl	800ebb4 <__gethex>
 800cf4e:	f010 060f 	ands.w	r6, r0, #15
 800cf52:	4604      	mov	r4, r0
 800cf54:	d005      	beq.n	800cf62 <_strtod_l+0x72>
 800cf56:	2e06      	cmp	r6, #6
 800cf58:	d128      	bne.n	800cfac <_strtod_l+0xbc>
 800cf5a:	3501      	adds	r5, #1
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cf60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f040 858e 	bne.w	800da86 <_strtod_l+0xb96>
 800cf6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf6c:	b1cb      	cbz	r3, 800cfa2 <_strtod_l+0xb2>
 800cf6e:	4652      	mov	r2, sl
 800cf70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cf74:	ec43 2b10 	vmov	d0, r2, r3
 800cf78:	b01f      	add	sp, #124	@ 0x7c
 800cf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7e:	2920      	cmp	r1, #32
 800cf80:	d1ce      	bne.n	800cf20 <_strtod_l+0x30>
 800cf82:	3201      	adds	r2, #1
 800cf84:	e7c1      	b.n	800cf0a <_strtod_l+0x1a>
 800cf86:	292d      	cmp	r1, #45	@ 0x2d
 800cf88:	d1ca      	bne.n	800cf20 <_strtod_l+0x30>
 800cf8a:	2101      	movs	r1, #1
 800cf8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cf8e:	1c51      	adds	r1, r2, #1
 800cf90:	9119      	str	r1, [sp, #100]	@ 0x64
 800cf92:	7852      	ldrb	r2, [r2, #1]
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	d1c5      	bne.n	800cf24 <_strtod_l+0x34>
 800cf98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f040 8570 	bne.w	800da82 <_strtod_l+0xb92>
 800cfa2:	4652      	mov	r2, sl
 800cfa4:	465b      	mov	r3, fp
 800cfa6:	e7e5      	b.n	800cf74 <_strtod_l+0x84>
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	e7ef      	b.n	800cf8c <_strtod_l+0x9c>
 800cfac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cfae:	b13a      	cbz	r2, 800cfc0 <_strtod_l+0xd0>
 800cfb0:	2135      	movs	r1, #53	@ 0x35
 800cfb2:	a81c      	add	r0, sp, #112	@ 0x70
 800cfb4:	f7ff ff3a 	bl	800ce2c <__copybits>
 800cfb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfba:	9805      	ldr	r0, [sp, #20]
 800cfbc:	f7ff fb08 	bl	800c5d0 <_Bfree>
 800cfc0:	3e01      	subs	r6, #1
 800cfc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cfc4:	2e04      	cmp	r6, #4
 800cfc6:	d806      	bhi.n	800cfd6 <_strtod_l+0xe6>
 800cfc8:	e8df f006 	tbb	[pc, r6]
 800cfcc:	201d0314 	.word	0x201d0314
 800cfd0:	14          	.byte	0x14
 800cfd1:	00          	.byte	0x00
 800cfd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cfd6:	05e1      	lsls	r1, r4, #23
 800cfd8:	bf48      	it	mi
 800cfda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cfde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfe2:	0d1b      	lsrs	r3, r3, #20
 800cfe4:	051b      	lsls	r3, r3, #20
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1bb      	bne.n	800cf62 <_strtod_l+0x72>
 800cfea:	f7fe fb31 	bl	800b650 <__errno>
 800cfee:	2322      	movs	r3, #34	@ 0x22
 800cff0:	6003      	str	r3, [r0, #0]
 800cff2:	e7b6      	b.n	800cf62 <_strtod_l+0x72>
 800cff4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cff8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cffc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d000:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d004:	e7e7      	b.n	800cfd6 <_strtod_l+0xe6>
 800d006:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d184 <_strtod_l+0x294>
 800d00a:	e7e4      	b.n	800cfd6 <_strtod_l+0xe6>
 800d00c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d010:	f04f 3aff 	mov.w	sl, #4294967295
 800d014:	e7df      	b.n	800cfd6 <_strtod_l+0xe6>
 800d016:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d01c:	785b      	ldrb	r3, [r3, #1]
 800d01e:	2b30      	cmp	r3, #48	@ 0x30
 800d020:	d0f9      	beq.n	800d016 <_strtod_l+0x126>
 800d022:	2b00      	cmp	r3, #0
 800d024:	d09d      	beq.n	800cf62 <_strtod_l+0x72>
 800d026:	2301      	movs	r3, #1
 800d028:	9309      	str	r3, [sp, #36]	@ 0x24
 800d02a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d02c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d02e:	2300      	movs	r3, #0
 800d030:	9308      	str	r3, [sp, #32]
 800d032:	930a      	str	r3, [sp, #40]	@ 0x28
 800d034:	461f      	mov	r7, r3
 800d036:	220a      	movs	r2, #10
 800d038:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d03a:	7805      	ldrb	r5, [r0, #0]
 800d03c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d040:	b2d9      	uxtb	r1, r3
 800d042:	2909      	cmp	r1, #9
 800d044:	d928      	bls.n	800d098 <_strtod_l+0x1a8>
 800d046:	494e      	ldr	r1, [pc, #312]	@ (800d180 <_strtod_l+0x290>)
 800d048:	2201      	movs	r2, #1
 800d04a:	f001 fcbe 	bl	800e9ca <strncmp>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d032      	beq.n	800d0b8 <_strtod_l+0x1c8>
 800d052:	2000      	movs	r0, #0
 800d054:	462a      	mov	r2, r5
 800d056:	4681      	mov	r9, r0
 800d058:	463d      	mov	r5, r7
 800d05a:	4603      	mov	r3, r0
 800d05c:	2a65      	cmp	r2, #101	@ 0x65
 800d05e:	d001      	beq.n	800d064 <_strtod_l+0x174>
 800d060:	2a45      	cmp	r2, #69	@ 0x45
 800d062:	d114      	bne.n	800d08e <_strtod_l+0x19e>
 800d064:	b91d      	cbnz	r5, 800d06e <_strtod_l+0x17e>
 800d066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d068:	4302      	orrs	r2, r0
 800d06a:	d095      	beq.n	800cf98 <_strtod_l+0xa8>
 800d06c:	2500      	movs	r5, #0
 800d06e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d070:	1c62      	adds	r2, r4, #1
 800d072:	9219      	str	r2, [sp, #100]	@ 0x64
 800d074:	7862      	ldrb	r2, [r4, #1]
 800d076:	2a2b      	cmp	r2, #43	@ 0x2b
 800d078:	d077      	beq.n	800d16a <_strtod_l+0x27a>
 800d07a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d07c:	d07b      	beq.n	800d176 <_strtod_l+0x286>
 800d07e:	f04f 0c00 	mov.w	ip, #0
 800d082:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d086:	2909      	cmp	r1, #9
 800d088:	f240 8082 	bls.w	800d190 <_strtod_l+0x2a0>
 800d08c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d08e:	f04f 0800 	mov.w	r8, #0
 800d092:	e0a2      	b.n	800d1da <_strtod_l+0x2ea>
 800d094:	2300      	movs	r3, #0
 800d096:	e7c7      	b.n	800d028 <_strtod_l+0x138>
 800d098:	2f08      	cmp	r7, #8
 800d09a:	bfd5      	itete	le
 800d09c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d09e:	9908      	ldrgt	r1, [sp, #32]
 800d0a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800d0a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d0a8:	f100 0001 	add.w	r0, r0, #1
 800d0ac:	bfd4      	ite	le
 800d0ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d0b0:	9308      	strgt	r3, [sp, #32]
 800d0b2:	3701      	adds	r7, #1
 800d0b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800d0b6:	e7bf      	b.n	800d038 <_strtod_l+0x148>
 800d0b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0be:	785a      	ldrb	r2, [r3, #1]
 800d0c0:	b37f      	cbz	r7, 800d122 <_strtod_l+0x232>
 800d0c2:	4681      	mov	r9, r0
 800d0c4:	463d      	mov	r5, r7
 800d0c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d0ca:	2b09      	cmp	r3, #9
 800d0cc:	d912      	bls.n	800d0f4 <_strtod_l+0x204>
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e7c4      	b.n	800d05c <_strtod_l+0x16c>
 800d0d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0d8:	785a      	ldrb	r2, [r3, #1]
 800d0da:	3001      	adds	r0, #1
 800d0dc:	2a30      	cmp	r2, #48	@ 0x30
 800d0de:	d0f8      	beq.n	800d0d2 <_strtod_l+0x1e2>
 800d0e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d0e4:	2b08      	cmp	r3, #8
 800d0e6:	f200 84d3 	bhi.w	800da90 <_strtod_l+0xba0>
 800d0ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800d0ee:	4681      	mov	r9, r0
 800d0f0:	2000      	movs	r0, #0
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	3a30      	subs	r2, #48	@ 0x30
 800d0f6:	f100 0301 	add.w	r3, r0, #1
 800d0fa:	d02a      	beq.n	800d152 <_strtod_l+0x262>
 800d0fc:	4499      	add	r9, r3
 800d0fe:	eb00 0c05 	add.w	ip, r0, r5
 800d102:	462b      	mov	r3, r5
 800d104:	210a      	movs	r1, #10
 800d106:	4563      	cmp	r3, ip
 800d108:	d10d      	bne.n	800d126 <_strtod_l+0x236>
 800d10a:	1c69      	adds	r1, r5, #1
 800d10c:	4401      	add	r1, r0
 800d10e:	4428      	add	r0, r5
 800d110:	2808      	cmp	r0, #8
 800d112:	dc16      	bgt.n	800d142 <_strtod_l+0x252>
 800d114:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d116:	230a      	movs	r3, #10
 800d118:	fb03 2300 	mla	r3, r3, r0, r2
 800d11c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d11e:	2300      	movs	r3, #0
 800d120:	e018      	b.n	800d154 <_strtod_l+0x264>
 800d122:	4638      	mov	r0, r7
 800d124:	e7da      	b.n	800d0dc <_strtod_l+0x1ec>
 800d126:	2b08      	cmp	r3, #8
 800d128:	f103 0301 	add.w	r3, r3, #1
 800d12c:	dc03      	bgt.n	800d136 <_strtod_l+0x246>
 800d12e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d130:	434e      	muls	r6, r1
 800d132:	960a      	str	r6, [sp, #40]	@ 0x28
 800d134:	e7e7      	b.n	800d106 <_strtod_l+0x216>
 800d136:	2b10      	cmp	r3, #16
 800d138:	bfde      	ittt	le
 800d13a:	9e08      	ldrle	r6, [sp, #32]
 800d13c:	434e      	mulle	r6, r1
 800d13e:	9608      	strle	r6, [sp, #32]
 800d140:	e7e1      	b.n	800d106 <_strtod_l+0x216>
 800d142:	280f      	cmp	r0, #15
 800d144:	dceb      	bgt.n	800d11e <_strtod_l+0x22e>
 800d146:	9808      	ldr	r0, [sp, #32]
 800d148:	230a      	movs	r3, #10
 800d14a:	fb03 2300 	mla	r3, r3, r0, r2
 800d14e:	9308      	str	r3, [sp, #32]
 800d150:	e7e5      	b.n	800d11e <_strtod_l+0x22e>
 800d152:	4629      	mov	r1, r5
 800d154:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d156:	1c50      	adds	r0, r2, #1
 800d158:	9019      	str	r0, [sp, #100]	@ 0x64
 800d15a:	7852      	ldrb	r2, [r2, #1]
 800d15c:	4618      	mov	r0, r3
 800d15e:	460d      	mov	r5, r1
 800d160:	e7b1      	b.n	800d0c6 <_strtod_l+0x1d6>
 800d162:	f04f 0900 	mov.w	r9, #0
 800d166:	2301      	movs	r3, #1
 800d168:	e77d      	b.n	800d066 <_strtod_l+0x176>
 800d16a:	f04f 0c00 	mov.w	ip, #0
 800d16e:	1ca2      	adds	r2, r4, #2
 800d170:	9219      	str	r2, [sp, #100]	@ 0x64
 800d172:	78a2      	ldrb	r2, [r4, #2]
 800d174:	e785      	b.n	800d082 <_strtod_l+0x192>
 800d176:	f04f 0c01 	mov.w	ip, #1
 800d17a:	e7f8      	b.n	800d16e <_strtod_l+0x27e>
 800d17c:	08010fd0 	.word	0x08010fd0
 800d180:	08010fb8 	.word	0x08010fb8
 800d184:	7ff00000 	.word	0x7ff00000
 800d188:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d18a:	1c51      	adds	r1, r2, #1
 800d18c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d18e:	7852      	ldrb	r2, [r2, #1]
 800d190:	2a30      	cmp	r2, #48	@ 0x30
 800d192:	d0f9      	beq.n	800d188 <_strtod_l+0x298>
 800d194:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d198:	2908      	cmp	r1, #8
 800d19a:	f63f af78 	bhi.w	800d08e <_strtod_l+0x19e>
 800d19e:	3a30      	subs	r2, #48	@ 0x30
 800d1a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1a6:	f04f 080a 	mov.w	r8, #10
 800d1aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1ac:	1c56      	adds	r6, r2, #1
 800d1ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800d1b0:	7852      	ldrb	r2, [r2, #1]
 800d1b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d1b6:	f1be 0f09 	cmp.w	lr, #9
 800d1ba:	d939      	bls.n	800d230 <_strtod_l+0x340>
 800d1bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d1be:	1a76      	subs	r6, r6, r1
 800d1c0:	2e08      	cmp	r6, #8
 800d1c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d1c6:	dc03      	bgt.n	800d1d0 <_strtod_l+0x2e0>
 800d1c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1ca:	4588      	cmp	r8, r1
 800d1cc:	bfa8      	it	ge
 800d1ce:	4688      	movge	r8, r1
 800d1d0:	f1bc 0f00 	cmp.w	ip, #0
 800d1d4:	d001      	beq.n	800d1da <_strtod_l+0x2ea>
 800d1d6:	f1c8 0800 	rsb	r8, r8, #0
 800d1da:	2d00      	cmp	r5, #0
 800d1dc:	d14e      	bne.n	800d27c <_strtod_l+0x38c>
 800d1de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d1e0:	4308      	orrs	r0, r1
 800d1e2:	f47f aebe 	bne.w	800cf62 <_strtod_l+0x72>
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f47f aed6 	bne.w	800cf98 <_strtod_l+0xa8>
 800d1ec:	2a69      	cmp	r2, #105	@ 0x69
 800d1ee:	d028      	beq.n	800d242 <_strtod_l+0x352>
 800d1f0:	dc25      	bgt.n	800d23e <_strtod_l+0x34e>
 800d1f2:	2a49      	cmp	r2, #73	@ 0x49
 800d1f4:	d025      	beq.n	800d242 <_strtod_l+0x352>
 800d1f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800d1f8:	f47f aece 	bne.w	800cf98 <_strtod_l+0xa8>
 800d1fc:	499b      	ldr	r1, [pc, #620]	@ (800d46c <_strtod_l+0x57c>)
 800d1fe:	a819      	add	r0, sp, #100	@ 0x64
 800d200:	f001 fefa 	bl	800eff8 <__match>
 800d204:	2800      	cmp	r0, #0
 800d206:	f43f aec7 	beq.w	800cf98 <_strtod_l+0xa8>
 800d20a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b28      	cmp	r3, #40	@ 0x28
 800d210:	d12e      	bne.n	800d270 <_strtod_l+0x380>
 800d212:	4997      	ldr	r1, [pc, #604]	@ (800d470 <_strtod_l+0x580>)
 800d214:	aa1c      	add	r2, sp, #112	@ 0x70
 800d216:	a819      	add	r0, sp, #100	@ 0x64
 800d218:	f001 ff02 	bl	800f020 <__hexnan>
 800d21c:	2805      	cmp	r0, #5
 800d21e:	d127      	bne.n	800d270 <_strtod_l+0x380>
 800d220:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d222:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d226:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d22a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d22e:	e698      	b.n	800cf62 <_strtod_l+0x72>
 800d230:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d232:	fb08 2101 	mla	r1, r8, r1, r2
 800d236:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d23a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d23c:	e7b5      	b.n	800d1aa <_strtod_l+0x2ba>
 800d23e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d240:	e7da      	b.n	800d1f8 <_strtod_l+0x308>
 800d242:	498c      	ldr	r1, [pc, #560]	@ (800d474 <_strtod_l+0x584>)
 800d244:	a819      	add	r0, sp, #100	@ 0x64
 800d246:	f001 fed7 	bl	800eff8 <__match>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	f43f aea4 	beq.w	800cf98 <_strtod_l+0xa8>
 800d250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d252:	4989      	ldr	r1, [pc, #548]	@ (800d478 <_strtod_l+0x588>)
 800d254:	3b01      	subs	r3, #1
 800d256:	a819      	add	r0, sp, #100	@ 0x64
 800d258:	9319      	str	r3, [sp, #100]	@ 0x64
 800d25a:	f001 fecd 	bl	800eff8 <__match>
 800d25e:	b910      	cbnz	r0, 800d266 <_strtod_l+0x376>
 800d260:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d262:	3301      	adds	r3, #1
 800d264:	9319      	str	r3, [sp, #100]	@ 0x64
 800d266:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d488 <_strtod_l+0x598>
 800d26a:	f04f 0a00 	mov.w	sl, #0
 800d26e:	e678      	b.n	800cf62 <_strtod_l+0x72>
 800d270:	4882      	ldr	r0, [pc, #520]	@ (800d47c <_strtod_l+0x58c>)
 800d272:	f001 fbfd 	bl	800ea70 <nan>
 800d276:	ec5b ab10 	vmov	sl, fp, d0
 800d27a:	e672      	b.n	800cf62 <_strtod_l+0x72>
 800d27c:	eba8 0309 	sub.w	r3, r8, r9
 800d280:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d282:	9309      	str	r3, [sp, #36]	@ 0x24
 800d284:	2f00      	cmp	r7, #0
 800d286:	bf08      	it	eq
 800d288:	462f      	moveq	r7, r5
 800d28a:	2d10      	cmp	r5, #16
 800d28c:	462c      	mov	r4, r5
 800d28e:	bfa8      	it	ge
 800d290:	2410      	movge	r4, #16
 800d292:	f7f3 f94f 	bl	8000534 <__aeabi_ui2d>
 800d296:	2d09      	cmp	r5, #9
 800d298:	4682      	mov	sl, r0
 800d29a:	468b      	mov	fp, r1
 800d29c:	dc13      	bgt.n	800d2c6 <_strtod_l+0x3d6>
 800d29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f43f ae5e 	beq.w	800cf62 <_strtod_l+0x72>
 800d2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a8:	dd78      	ble.n	800d39c <_strtod_l+0x4ac>
 800d2aa:	2b16      	cmp	r3, #22
 800d2ac:	dc5f      	bgt.n	800d36e <_strtod_l+0x47e>
 800d2ae:	4974      	ldr	r1, [pc, #464]	@ (800d480 <_strtod_l+0x590>)
 800d2b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2b8:	4652      	mov	r2, sl
 800d2ba:	465b      	mov	r3, fp
 800d2bc:	f7f3 f9b4 	bl	8000628 <__aeabi_dmul>
 800d2c0:	4682      	mov	sl, r0
 800d2c2:	468b      	mov	fp, r1
 800d2c4:	e64d      	b.n	800cf62 <_strtod_l+0x72>
 800d2c6:	4b6e      	ldr	r3, [pc, #440]	@ (800d480 <_strtod_l+0x590>)
 800d2c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d2d0:	f7f3 f9aa 	bl	8000628 <__aeabi_dmul>
 800d2d4:	4682      	mov	sl, r0
 800d2d6:	9808      	ldr	r0, [sp, #32]
 800d2d8:	468b      	mov	fp, r1
 800d2da:	f7f3 f92b 	bl	8000534 <__aeabi_ui2d>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	4659      	mov	r1, fp
 800d2e6:	f7f2 ffe9 	bl	80002bc <__adddf3>
 800d2ea:	2d0f      	cmp	r5, #15
 800d2ec:	4682      	mov	sl, r0
 800d2ee:	468b      	mov	fp, r1
 800d2f0:	ddd5      	ble.n	800d29e <_strtod_l+0x3ae>
 800d2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f4:	1b2c      	subs	r4, r5, r4
 800d2f6:	441c      	add	r4, r3
 800d2f8:	2c00      	cmp	r4, #0
 800d2fa:	f340 8096 	ble.w	800d42a <_strtod_l+0x53a>
 800d2fe:	f014 030f 	ands.w	r3, r4, #15
 800d302:	d00a      	beq.n	800d31a <_strtod_l+0x42a>
 800d304:	495e      	ldr	r1, [pc, #376]	@ (800d480 <_strtod_l+0x590>)
 800d306:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d30a:	4652      	mov	r2, sl
 800d30c:	465b      	mov	r3, fp
 800d30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d312:	f7f3 f989 	bl	8000628 <__aeabi_dmul>
 800d316:	4682      	mov	sl, r0
 800d318:	468b      	mov	fp, r1
 800d31a:	f034 040f 	bics.w	r4, r4, #15
 800d31e:	d073      	beq.n	800d408 <_strtod_l+0x518>
 800d320:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d324:	dd48      	ble.n	800d3b8 <_strtod_l+0x4c8>
 800d326:	2400      	movs	r4, #0
 800d328:	46a0      	mov	r8, r4
 800d32a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d32c:	46a1      	mov	r9, r4
 800d32e:	9a05      	ldr	r2, [sp, #20]
 800d330:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d488 <_strtod_l+0x598>
 800d334:	2322      	movs	r3, #34	@ 0x22
 800d336:	6013      	str	r3, [r2, #0]
 800d338:	f04f 0a00 	mov.w	sl, #0
 800d33c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f43f ae0f 	beq.w	800cf62 <_strtod_l+0x72>
 800d344:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d346:	9805      	ldr	r0, [sp, #20]
 800d348:	f7ff f942 	bl	800c5d0 <_Bfree>
 800d34c:	9805      	ldr	r0, [sp, #20]
 800d34e:	4649      	mov	r1, r9
 800d350:	f7ff f93e 	bl	800c5d0 <_Bfree>
 800d354:	9805      	ldr	r0, [sp, #20]
 800d356:	4641      	mov	r1, r8
 800d358:	f7ff f93a 	bl	800c5d0 <_Bfree>
 800d35c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d35e:	9805      	ldr	r0, [sp, #20]
 800d360:	f7ff f936 	bl	800c5d0 <_Bfree>
 800d364:	9805      	ldr	r0, [sp, #20]
 800d366:	4621      	mov	r1, r4
 800d368:	f7ff f932 	bl	800c5d0 <_Bfree>
 800d36c:	e5f9      	b.n	800cf62 <_strtod_l+0x72>
 800d36e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d370:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d374:	4293      	cmp	r3, r2
 800d376:	dbbc      	blt.n	800d2f2 <_strtod_l+0x402>
 800d378:	4c41      	ldr	r4, [pc, #260]	@ (800d480 <_strtod_l+0x590>)
 800d37a:	f1c5 050f 	rsb	r5, r5, #15
 800d37e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d382:	4652      	mov	r2, sl
 800d384:	465b      	mov	r3, fp
 800d386:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d38a:	f7f3 f94d 	bl	8000628 <__aeabi_dmul>
 800d38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d390:	1b5d      	subs	r5, r3, r5
 800d392:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d396:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d39a:	e78f      	b.n	800d2bc <_strtod_l+0x3cc>
 800d39c:	3316      	adds	r3, #22
 800d39e:	dba8      	blt.n	800d2f2 <_strtod_l+0x402>
 800d3a0:	4b37      	ldr	r3, [pc, #220]	@ (800d480 <_strtod_l+0x590>)
 800d3a2:	eba9 0808 	sub.w	r8, r9, r8
 800d3a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d3aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	4659      	mov	r1, fp
 800d3b2:	f7f3 fa63 	bl	800087c <__aeabi_ddiv>
 800d3b6:	e783      	b.n	800d2c0 <_strtod_l+0x3d0>
 800d3b8:	4b32      	ldr	r3, [pc, #200]	@ (800d484 <_strtod_l+0x594>)
 800d3ba:	9308      	str	r3, [sp, #32]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	1124      	asrs	r4, r4, #4
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	4659      	mov	r1, fp
 800d3c4:	461e      	mov	r6, r3
 800d3c6:	2c01      	cmp	r4, #1
 800d3c8:	dc21      	bgt.n	800d40e <_strtod_l+0x51e>
 800d3ca:	b10b      	cbz	r3, 800d3d0 <_strtod_l+0x4e0>
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	468b      	mov	fp, r1
 800d3d0:	492c      	ldr	r1, [pc, #176]	@ (800d484 <_strtod_l+0x594>)
 800d3d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d3d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d3da:	4652      	mov	r2, sl
 800d3dc:	465b      	mov	r3, fp
 800d3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3e2:	f7f3 f921 	bl	8000628 <__aeabi_dmul>
 800d3e6:	4b28      	ldr	r3, [pc, #160]	@ (800d488 <_strtod_l+0x598>)
 800d3e8:	460a      	mov	r2, r1
 800d3ea:	400b      	ands	r3, r1
 800d3ec:	4927      	ldr	r1, [pc, #156]	@ (800d48c <_strtod_l+0x59c>)
 800d3ee:	428b      	cmp	r3, r1
 800d3f0:	4682      	mov	sl, r0
 800d3f2:	d898      	bhi.n	800d326 <_strtod_l+0x436>
 800d3f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d3f8:	428b      	cmp	r3, r1
 800d3fa:	bf86      	itte	hi
 800d3fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d490 <_strtod_l+0x5a0>
 800d400:	f04f 3aff 	movhi.w	sl, #4294967295
 800d404:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d408:	2300      	movs	r3, #0
 800d40a:	9308      	str	r3, [sp, #32]
 800d40c:	e07a      	b.n	800d504 <_strtod_l+0x614>
 800d40e:	07e2      	lsls	r2, r4, #31
 800d410:	d505      	bpl.n	800d41e <_strtod_l+0x52e>
 800d412:	9b08      	ldr	r3, [sp, #32]
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	f7f3 f906 	bl	8000628 <__aeabi_dmul>
 800d41c:	2301      	movs	r3, #1
 800d41e:	9a08      	ldr	r2, [sp, #32]
 800d420:	3208      	adds	r2, #8
 800d422:	3601      	adds	r6, #1
 800d424:	1064      	asrs	r4, r4, #1
 800d426:	9208      	str	r2, [sp, #32]
 800d428:	e7cd      	b.n	800d3c6 <_strtod_l+0x4d6>
 800d42a:	d0ed      	beq.n	800d408 <_strtod_l+0x518>
 800d42c:	4264      	negs	r4, r4
 800d42e:	f014 020f 	ands.w	r2, r4, #15
 800d432:	d00a      	beq.n	800d44a <_strtod_l+0x55a>
 800d434:	4b12      	ldr	r3, [pc, #72]	@ (800d480 <_strtod_l+0x590>)
 800d436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d43a:	4650      	mov	r0, sl
 800d43c:	4659      	mov	r1, fp
 800d43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d442:	f7f3 fa1b 	bl	800087c <__aeabi_ddiv>
 800d446:	4682      	mov	sl, r0
 800d448:	468b      	mov	fp, r1
 800d44a:	1124      	asrs	r4, r4, #4
 800d44c:	d0dc      	beq.n	800d408 <_strtod_l+0x518>
 800d44e:	2c1f      	cmp	r4, #31
 800d450:	dd20      	ble.n	800d494 <_strtod_l+0x5a4>
 800d452:	2400      	movs	r4, #0
 800d454:	46a0      	mov	r8, r4
 800d456:	940a      	str	r4, [sp, #40]	@ 0x28
 800d458:	46a1      	mov	r9, r4
 800d45a:	9a05      	ldr	r2, [sp, #20]
 800d45c:	2322      	movs	r3, #34	@ 0x22
 800d45e:	f04f 0a00 	mov.w	sl, #0
 800d462:	f04f 0b00 	mov.w	fp, #0
 800d466:	6013      	str	r3, [r2, #0]
 800d468:	e768      	b.n	800d33c <_strtod_l+0x44c>
 800d46a:	bf00      	nop
 800d46c:	08010daa 	.word	0x08010daa
 800d470:	08010fbc 	.word	0x08010fbc
 800d474:	08010da2 	.word	0x08010da2
 800d478:	08010dd7 	.word	0x08010dd7
 800d47c:	0801107f 	.word	0x0801107f
 800d480:	08010ef0 	.word	0x08010ef0
 800d484:	08010ec8 	.word	0x08010ec8
 800d488:	7ff00000 	.word	0x7ff00000
 800d48c:	7ca00000 	.word	0x7ca00000
 800d490:	7fefffff 	.word	0x7fefffff
 800d494:	f014 0310 	ands.w	r3, r4, #16
 800d498:	bf18      	it	ne
 800d49a:	236a      	movne	r3, #106	@ 0x6a
 800d49c:	4ea9      	ldr	r6, [pc, #676]	@ (800d744 <_strtod_l+0x854>)
 800d49e:	9308      	str	r3, [sp, #32]
 800d4a0:	4650      	mov	r0, sl
 800d4a2:	4659      	mov	r1, fp
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	07e2      	lsls	r2, r4, #31
 800d4a8:	d504      	bpl.n	800d4b4 <_strtod_l+0x5c4>
 800d4aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4ae:	f7f3 f8bb 	bl	8000628 <__aeabi_dmul>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	1064      	asrs	r4, r4, #1
 800d4b6:	f106 0608 	add.w	r6, r6, #8
 800d4ba:	d1f4      	bne.n	800d4a6 <_strtod_l+0x5b6>
 800d4bc:	b10b      	cbz	r3, 800d4c2 <_strtod_l+0x5d2>
 800d4be:	4682      	mov	sl, r0
 800d4c0:	468b      	mov	fp, r1
 800d4c2:	9b08      	ldr	r3, [sp, #32]
 800d4c4:	b1b3      	cbz	r3, 800d4f4 <_strtod_l+0x604>
 800d4c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d4ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	4659      	mov	r1, fp
 800d4d2:	dd0f      	ble.n	800d4f4 <_strtod_l+0x604>
 800d4d4:	2b1f      	cmp	r3, #31
 800d4d6:	dd55      	ble.n	800d584 <_strtod_l+0x694>
 800d4d8:	2b34      	cmp	r3, #52	@ 0x34
 800d4da:	bfde      	ittt	le
 800d4dc:	f04f 33ff 	movle.w	r3, #4294967295
 800d4e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d4e4:	4093      	lslle	r3, r2
 800d4e6:	f04f 0a00 	mov.w	sl, #0
 800d4ea:	bfcc      	ite	gt
 800d4ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d4f0:	ea03 0b01 	andle.w	fp, r3, r1
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	4650      	mov	r0, sl
 800d4fa:	4659      	mov	r1, fp
 800d4fc:	f7f3 fafc 	bl	8000af8 <__aeabi_dcmpeq>
 800d500:	2800      	cmp	r0, #0
 800d502:	d1a6      	bne.n	800d452 <_strtod_l+0x562>
 800d504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d50a:	9805      	ldr	r0, [sp, #20]
 800d50c:	462b      	mov	r3, r5
 800d50e:	463a      	mov	r2, r7
 800d510:	f7ff f8c6 	bl	800c6a0 <__s2b>
 800d514:	900a      	str	r0, [sp, #40]	@ 0x28
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f af05 	beq.w	800d326 <_strtod_l+0x436>
 800d51c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d51e:	2a00      	cmp	r2, #0
 800d520:	eba9 0308 	sub.w	r3, r9, r8
 800d524:	bfa8      	it	ge
 800d526:	2300      	movge	r3, #0
 800d528:	9312      	str	r3, [sp, #72]	@ 0x48
 800d52a:	2400      	movs	r4, #0
 800d52c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d530:	9316      	str	r3, [sp, #88]	@ 0x58
 800d532:	46a0      	mov	r8, r4
 800d534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d536:	9805      	ldr	r0, [sp, #20]
 800d538:	6859      	ldr	r1, [r3, #4]
 800d53a:	f7ff f809 	bl	800c550 <_Balloc>
 800d53e:	4681      	mov	r9, r0
 800d540:	2800      	cmp	r0, #0
 800d542:	f43f aef4 	beq.w	800d32e <_strtod_l+0x43e>
 800d546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d548:	691a      	ldr	r2, [r3, #16]
 800d54a:	3202      	adds	r2, #2
 800d54c:	f103 010c 	add.w	r1, r3, #12
 800d550:	0092      	lsls	r2, r2, #2
 800d552:	300c      	adds	r0, #12
 800d554:	f001 fa7e 	bl	800ea54 <memcpy>
 800d558:	ec4b ab10 	vmov	d0, sl, fp
 800d55c:	9805      	ldr	r0, [sp, #20]
 800d55e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d560:	a91b      	add	r1, sp, #108	@ 0x6c
 800d562:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d566:	f7ff fbd7 	bl	800cd18 <__d2b>
 800d56a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d56c:	2800      	cmp	r0, #0
 800d56e:	f43f aede 	beq.w	800d32e <_strtod_l+0x43e>
 800d572:	9805      	ldr	r0, [sp, #20]
 800d574:	2101      	movs	r1, #1
 800d576:	f7ff f929 	bl	800c7cc <__i2b>
 800d57a:	4680      	mov	r8, r0
 800d57c:	b948      	cbnz	r0, 800d592 <_strtod_l+0x6a2>
 800d57e:	f04f 0800 	mov.w	r8, #0
 800d582:	e6d4      	b.n	800d32e <_strtod_l+0x43e>
 800d584:	f04f 32ff 	mov.w	r2, #4294967295
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	ea03 0a0a 	and.w	sl, r3, sl
 800d590:	e7b0      	b.n	800d4f4 <_strtod_l+0x604>
 800d592:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d594:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d596:	2d00      	cmp	r5, #0
 800d598:	bfab      	itete	ge
 800d59a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d59c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d59e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d5a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d5a2:	bfac      	ite	ge
 800d5a4:	18ef      	addge	r7, r5, r3
 800d5a6:	1b5e      	sublt	r6, r3, r5
 800d5a8:	9b08      	ldr	r3, [sp, #32]
 800d5aa:	1aed      	subs	r5, r5, r3
 800d5ac:	4415      	add	r5, r2
 800d5ae:	4b66      	ldr	r3, [pc, #408]	@ (800d748 <_strtod_l+0x858>)
 800d5b0:	3d01      	subs	r5, #1
 800d5b2:	429d      	cmp	r5, r3
 800d5b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d5b8:	da50      	bge.n	800d65c <_strtod_l+0x76c>
 800d5ba:	1b5b      	subs	r3, r3, r5
 800d5bc:	2b1f      	cmp	r3, #31
 800d5be:	eba2 0203 	sub.w	r2, r2, r3
 800d5c2:	f04f 0101 	mov.w	r1, #1
 800d5c6:	dc3d      	bgt.n	800d644 <_strtod_l+0x754>
 800d5c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d5cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d5d2:	18bd      	adds	r5, r7, r2
 800d5d4:	9b08      	ldr	r3, [sp, #32]
 800d5d6:	42af      	cmp	r7, r5
 800d5d8:	4416      	add	r6, r2
 800d5da:	441e      	add	r6, r3
 800d5dc:	463b      	mov	r3, r7
 800d5de:	bfa8      	it	ge
 800d5e0:	462b      	movge	r3, r5
 800d5e2:	42b3      	cmp	r3, r6
 800d5e4:	bfa8      	it	ge
 800d5e6:	4633      	movge	r3, r6
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	bfc2      	ittt	gt
 800d5ec:	1aed      	subgt	r5, r5, r3
 800d5ee:	1af6      	subgt	r6, r6, r3
 800d5f0:	1aff      	subgt	r7, r7, r3
 800d5f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dd16      	ble.n	800d626 <_strtod_l+0x736>
 800d5f8:	4641      	mov	r1, r8
 800d5fa:	9805      	ldr	r0, [sp, #20]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f7ff f9a5 	bl	800c94c <__pow5mult>
 800d602:	4680      	mov	r8, r0
 800d604:	2800      	cmp	r0, #0
 800d606:	d0ba      	beq.n	800d57e <_strtod_l+0x68e>
 800d608:	4601      	mov	r1, r0
 800d60a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d60c:	9805      	ldr	r0, [sp, #20]
 800d60e:	f7ff f8f3 	bl	800c7f8 <__multiply>
 800d612:	900e      	str	r0, [sp, #56]	@ 0x38
 800d614:	2800      	cmp	r0, #0
 800d616:	f43f ae8a 	beq.w	800d32e <_strtod_l+0x43e>
 800d61a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d61c:	9805      	ldr	r0, [sp, #20]
 800d61e:	f7fe ffd7 	bl	800c5d0 <_Bfree>
 800d622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d624:	931a      	str	r3, [sp, #104]	@ 0x68
 800d626:	2d00      	cmp	r5, #0
 800d628:	dc1d      	bgt.n	800d666 <_strtod_l+0x776>
 800d62a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	dd23      	ble.n	800d678 <_strtod_l+0x788>
 800d630:	4649      	mov	r1, r9
 800d632:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d634:	9805      	ldr	r0, [sp, #20]
 800d636:	f7ff f989 	bl	800c94c <__pow5mult>
 800d63a:	4681      	mov	r9, r0
 800d63c:	b9e0      	cbnz	r0, 800d678 <_strtod_l+0x788>
 800d63e:	f04f 0900 	mov.w	r9, #0
 800d642:	e674      	b.n	800d32e <_strtod_l+0x43e>
 800d644:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d648:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d64c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d650:	35e2      	adds	r5, #226	@ 0xe2
 800d652:	fa01 f305 	lsl.w	r3, r1, r5
 800d656:	9310      	str	r3, [sp, #64]	@ 0x40
 800d658:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d65a:	e7ba      	b.n	800d5d2 <_strtod_l+0x6e2>
 800d65c:	2300      	movs	r3, #0
 800d65e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d660:	2301      	movs	r3, #1
 800d662:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d664:	e7b5      	b.n	800d5d2 <_strtod_l+0x6e2>
 800d666:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d668:	9805      	ldr	r0, [sp, #20]
 800d66a:	462a      	mov	r2, r5
 800d66c:	f7ff f9c8 	bl	800ca00 <__lshift>
 800d670:	901a      	str	r0, [sp, #104]	@ 0x68
 800d672:	2800      	cmp	r0, #0
 800d674:	d1d9      	bne.n	800d62a <_strtod_l+0x73a>
 800d676:	e65a      	b.n	800d32e <_strtod_l+0x43e>
 800d678:	2e00      	cmp	r6, #0
 800d67a:	dd07      	ble.n	800d68c <_strtod_l+0x79c>
 800d67c:	4649      	mov	r1, r9
 800d67e:	9805      	ldr	r0, [sp, #20]
 800d680:	4632      	mov	r2, r6
 800d682:	f7ff f9bd 	bl	800ca00 <__lshift>
 800d686:	4681      	mov	r9, r0
 800d688:	2800      	cmp	r0, #0
 800d68a:	d0d8      	beq.n	800d63e <_strtod_l+0x74e>
 800d68c:	2f00      	cmp	r7, #0
 800d68e:	dd08      	ble.n	800d6a2 <_strtod_l+0x7b2>
 800d690:	4641      	mov	r1, r8
 800d692:	9805      	ldr	r0, [sp, #20]
 800d694:	463a      	mov	r2, r7
 800d696:	f7ff f9b3 	bl	800ca00 <__lshift>
 800d69a:	4680      	mov	r8, r0
 800d69c:	2800      	cmp	r0, #0
 800d69e:	f43f ae46 	beq.w	800d32e <_strtod_l+0x43e>
 800d6a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6a4:	9805      	ldr	r0, [sp, #20]
 800d6a6:	464a      	mov	r2, r9
 800d6a8:	f7ff fa32 	bl	800cb10 <__mdiff>
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	f43f ae3d 	beq.w	800d32e <_strtod_l+0x43e>
 800d6b4:	68c3      	ldr	r3, [r0, #12]
 800d6b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60c3      	str	r3, [r0, #12]
 800d6bc:	4641      	mov	r1, r8
 800d6be:	f7ff fa0b 	bl	800cad8 <__mcmp>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	da46      	bge.n	800d754 <_strtod_l+0x864>
 800d6c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6c8:	ea53 030a 	orrs.w	r3, r3, sl
 800d6cc:	d16c      	bne.n	800d7a8 <_strtod_l+0x8b8>
 800d6ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d168      	bne.n	800d7a8 <_strtod_l+0x8b8>
 800d6d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d6da:	0d1b      	lsrs	r3, r3, #20
 800d6dc:	051b      	lsls	r3, r3, #20
 800d6de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d6e2:	d961      	bls.n	800d7a8 <_strtod_l+0x8b8>
 800d6e4:	6963      	ldr	r3, [r4, #20]
 800d6e6:	b913      	cbnz	r3, 800d6ee <_strtod_l+0x7fe>
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	dd5c      	ble.n	800d7a8 <_strtod_l+0x8b8>
 800d6ee:	4621      	mov	r1, r4
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	9805      	ldr	r0, [sp, #20]
 800d6f4:	f7ff f984 	bl	800ca00 <__lshift>
 800d6f8:	4641      	mov	r1, r8
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	f7ff f9ec 	bl	800cad8 <__mcmp>
 800d700:	2800      	cmp	r0, #0
 800d702:	dd51      	ble.n	800d7a8 <_strtod_l+0x8b8>
 800d704:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d708:	9a08      	ldr	r2, [sp, #32]
 800d70a:	0d1b      	lsrs	r3, r3, #20
 800d70c:	051b      	lsls	r3, r3, #20
 800d70e:	2a00      	cmp	r2, #0
 800d710:	d06b      	beq.n	800d7ea <_strtod_l+0x8fa>
 800d712:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d716:	d868      	bhi.n	800d7ea <_strtod_l+0x8fa>
 800d718:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d71c:	f67f ae9d 	bls.w	800d45a <_strtod_l+0x56a>
 800d720:	4b0a      	ldr	r3, [pc, #40]	@ (800d74c <_strtod_l+0x85c>)
 800d722:	4650      	mov	r0, sl
 800d724:	4659      	mov	r1, fp
 800d726:	2200      	movs	r2, #0
 800d728:	f7f2 ff7e 	bl	8000628 <__aeabi_dmul>
 800d72c:	4b08      	ldr	r3, [pc, #32]	@ (800d750 <_strtod_l+0x860>)
 800d72e:	400b      	ands	r3, r1
 800d730:	4682      	mov	sl, r0
 800d732:	468b      	mov	fp, r1
 800d734:	2b00      	cmp	r3, #0
 800d736:	f47f ae05 	bne.w	800d344 <_strtod_l+0x454>
 800d73a:	9a05      	ldr	r2, [sp, #20]
 800d73c:	2322      	movs	r3, #34	@ 0x22
 800d73e:	6013      	str	r3, [r2, #0]
 800d740:	e600      	b.n	800d344 <_strtod_l+0x454>
 800d742:	bf00      	nop
 800d744:	08010fe8 	.word	0x08010fe8
 800d748:	fffffc02 	.word	0xfffffc02
 800d74c:	39500000 	.word	0x39500000
 800d750:	7ff00000 	.word	0x7ff00000
 800d754:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d758:	d165      	bne.n	800d826 <_strtod_l+0x936>
 800d75a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d75c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d760:	b35a      	cbz	r2, 800d7ba <_strtod_l+0x8ca>
 800d762:	4a9f      	ldr	r2, [pc, #636]	@ (800d9e0 <_strtod_l+0xaf0>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d12b      	bne.n	800d7c0 <_strtod_l+0x8d0>
 800d768:	9b08      	ldr	r3, [sp, #32]
 800d76a:	4651      	mov	r1, sl
 800d76c:	b303      	cbz	r3, 800d7b0 <_strtod_l+0x8c0>
 800d76e:	4b9d      	ldr	r3, [pc, #628]	@ (800d9e4 <_strtod_l+0xaf4>)
 800d770:	465a      	mov	r2, fp
 800d772:	4013      	ands	r3, r2
 800d774:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d778:	f04f 32ff 	mov.w	r2, #4294967295
 800d77c:	d81b      	bhi.n	800d7b6 <_strtod_l+0x8c6>
 800d77e:	0d1b      	lsrs	r3, r3, #20
 800d780:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d784:	fa02 f303 	lsl.w	r3, r2, r3
 800d788:	4299      	cmp	r1, r3
 800d78a:	d119      	bne.n	800d7c0 <_strtod_l+0x8d0>
 800d78c:	4b96      	ldr	r3, [pc, #600]	@ (800d9e8 <_strtod_l+0xaf8>)
 800d78e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d790:	429a      	cmp	r2, r3
 800d792:	d102      	bne.n	800d79a <_strtod_l+0x8aa>
 800d794:	3101      	adds	r1, #1
 800d796:	f43f adca 	beq.w	800d32e <_strtod_l+0x43e>
 800d79a:	4b92      	ldr	r3, [pc, #584]	@ (800d9e4 <_strtod_l+0xaf4>)
 800d79c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d79e:	401a      	ands	r2, r3
 800d7a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d7a4:	f04f 0a00 	mov.w	sl, #0
 800d7a8:	9b08      	ldr	r3, [sp, #32]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d1b8      	bne.n	800d720 <_strtod_l+0x830>
 800d7ae:	e5c9      	b.n	800d344 <_strtod_l+0x454>
 800d7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b4:	e7e8      	b.n	800d788 <_strtod_l+0x898>
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	e7e6      	b.n	800d788 <_strtod_l+0x898>
 800d7ba:	ea53 030a 	orrs.w	r3, r3, sl
 800d7be:	d0a1      	beq.n	800d704 <_strtod_l+0x814>
 800d7c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d7c2:	b1db      	cbz	r3, 800d7fc <_strtod_l+0x90c>
 800d7c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d7c6:	4213      	tst	r3, r2
 800d7c8:	d0ee      	beq.n	800d7a8 <_strtod_l+0x8b8>
 800d7ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7cc:	9a08      	ldr	r2, [sp, #32]
 800d7ce:	4650      	mov	r0, sl
 800d7d0:	4659      	mov	r1, fp
 800d7d2:	b1bb      	cbz	r3, 800d804 <_strtod_l+0x914>
 800d7d4:	f7ff fb6e 	bl	800ceb4 <sulp>
 800d7d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7dc:	ec53 2b10 	vmov	r2, r3, d0
 800d7e0:	f7f2 fd6c 	bl	80002bc <__adddf3>
 800d7e4:	4682      	mov	sl, r0
 800d7e6:	468b      	mov	fp, r1
 800d7e8:	e7de      	b.n	800d7a8 <_strtod_l+0x8b8>
 800d7ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d7ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d7f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d7f6:	f04f 3aff 	mov.w	sl, #4294967295
 800d7fa:	e7d5      	b.n	800d7a8 <_strtod_l+0x8b8>
 800d7fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d7fe:	ea13 0f0a 	tst.w	r3, sl
 800d802:	e7e1      	b.n	800d7c8 <_strtod_l+0x8d8>
 800d804:	f7ff fb56 	bl	800ceb4 <sulp>
 800d808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d80c:	ec53 2b10 	vmov	r2, r3, d0
 800d810:	f7f2 fd52 	bl	80002b8 <__aeabi_dsub>
 800d814:	2200      	movs	r2, #0
 800d816:	2300      	movs	r3, #0
 800d818:	4682      	mov	sl, r0
 800d81a:	468b      	mov	fp, r1
 800d81c:	f7f3 f96c 	bl	8000af8 <__aeabi_dcmpeq>
 800d820:	2800      	cmp	r0, #0
 800d822:	d0c1      	beq.n	800d7a8 <_strtod_l+0x8b8>
 800d824:	e619      	b.n	800d45a <_strtod_l+0x56a>
 800d826:	4641      	mov	r1, r8
 800d828:	4620      	mov	r0, r4
 800d82a:	f7ff facd 	bl	800cdc8 <__ratio>
 800d82e:	ec57 6b10 	vmov	r6, r7, d0
 800d832:	2200      	movs	r2, #0
 800d834:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d838:	4630      	mov	r0, r6
 800d83a:	4639      	mov	r1, r7
 800d83c:	f7f3 f970 	bl	8000b20 <__aeabi_dcmple>
 800d840:	2800      	cmp	r0, #0
 800d842:	d06f      	beq.n	800d924 <_strtod_l+0xa34>
 800d844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d846:	2b00      	cmp	r3, #0
 800d848:	d17a      	bne.n	800d940 <_strtod_l+0xa50>
 800d84a:	f1ba 0f00 	cmp.w	sl, #0
 800d84e:	d158      	bne.n	800d902 <_strtod_l+0xa12>
 800d850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d856:	2b00      	cmp	r3, #0
 800d858:	d15a      	bne.n	800d910 <_strtod_l+0xa20>
 800d85a:	4b64      	ldr	r3, [pc, #400]	@ (800d9ec <_strtod_l+0xafc>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	4630      	mov	r0, r6
 800d860:	4639      	mov	r1, r7
 800d862:	f7f3 f953 	bl	8000b0c <__aeabi_dcmplt>
 800d866:	2800      	cmp	r0, #0
 800d868:	d159      	bne.n	800d91e <_strtod_l+0xa2e>
 800d86a:	4630      	mov	r0, r6
 800d86c:	4639      	mov	r1, r7
 800d86e:	4b60      	ldr	r3, [pc, #384]	@ (800d9f0 <_strtod_l+0xb00>)
 800d870:	2200      	movs	r2, #0
 800d872:	f7f2 fed9 	bl	8000628 <__aeabi_dmul>
 800d876:	4606      	mov	r6, r0
 800d878:	460f      	mov	r7, r1
 800d87a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d87e:	9606      	str	r6, [sp, #24]
 800d880:	9307      	str	r3, [sp, #28]
 800d882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d886:	4d57      	ldr	r5, [pc, #348]	@ (800d9e4 <_strtod_l+0xaf4>)
 800d888:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d88e:	401d      	ands	r5, r3
 800d890:	4b58      	ldr	r3, [pc, #352]	@ (800d9f4 <_strtod_l+0xb04>)
 800d892:	429d      	cmp	r5, r3
 800d894:	f040 80b2 	bne.w	800d9fc <_strtod_l+0xb0c>
 800d898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d89a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d89e:	ec4b ab10 	vmov	d0, sl, fp
 800d8a2:	f7ff f9c9 	bl	800cc38 <__ulp>
 800d8a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8aa:	ec51 0b10 	vmov	r0, r1, d0
 800d8ae:	f7f2 febb 	bl	8000628 <__aeabi_dmul>
 800d8b2:	4652      	mov	r2, sl
 800d8b4:	465b      	mov	r3, fp
 800d8b6:	f7f2 fd01 	bl	80002bc <__adddf3>
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4949      	ldr	r1, [pc, #292]	@ (800d9e4 <_strtod_l+0xaf4>)
 800d8be:	4a4e      	ldr	r2, [pc, #312]	@ (800d9f8 <_strtod_l+0xb08>)
 800d8c0:	4019      	ands	r1, r3
 800d8c2:	4291      	cmp	r1, r2
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	d942      	bls.n	800d94e <_strtod_l+0xa5e>
 800d8c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8ca:	4b47      	ldr	r3, [pc, #284]	@ (800d9e8 <_strtod_l+0xaf8>)
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d103      	bne.n	800d8d8 <_strtod_l+0x9e8>
 800d8d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	f43f ad2b 	beq.w	800d32e <_strtod_l+0x43e>
 800d8d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d9e8 <_strtod_l+0xaf8>
 800d8dc:	f04f 3aff 	mov.w	sl, #4294967295
 800d8e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d8e2:	9805      	ldr	r0, [sp, #20]
 800d8e4:	f7fe fe74 	bl	800c5d0 <_Bfree>
 800d8e8:	9805      	ldr	r0, [sp, #20]
 800d8ea:	4649      	mov	r1, r9
 800d8ec:	f7fe fe70 	bl	800c5d0 <_Bfree>
 800d8f0:	9805      	ldr	r0, [sp, #20]
 800d8f2:	4641      	mov	r1, r8
 800d8f4:	f7fe fe6c 	bl	800c5d0 <_Bfree>
 800d8f8:	9805      	ldr	r0, [sp, #20]
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	f7fe fe68 	bl	800c5d0 <_Bfree>
 800d900:	e618      	b.n	800d534 <_strtod_l+0x644>
 800d902:	f1ba 0f01 	cmp.w	sl, #1
 800d906:	d103      	bne.n	800d910 <_strtod_l+0xa20>
 800d908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f43f ada5 	beq.w	800d45a <_strtod_l+0x56a>
 800d910:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d9c0 <_strtod_l+0xad0>
 800d914:	4f35      	ldr	r7, [pc, #212]	@ (800d9ec <_strtod_l+0xafc>)
 800d916:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d91a:	2600      	movs	r6, #0
 800d91c:	e7b1      	b.n	800d882 <_strtod_l+0x992>
 800d91e:	4f34      	ldr	r7, [pc, #208]	@ (800d9f0 <_strtod_l+0xb00>)
 800d920:	2600      	movs	r6, #0
 800d922:	e7aa      	b.n	800d87a <_strtod_l+0x98a>
 800d924:	4b32      	ldr	r3, [pc, #200]	@ (800d9f0 <_strtod_l+0xb00>)
 800d926:	4630      	mov	r0, r6
 800d928:	4639      	mov	r1, r7
 800d92a:	2200      	movs	r2, #0
 800d92c:	f7f2 fe7c 	bl	8000628 <__aeabi_dmul>
 800d930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d932:	4606      	mov	r6, r0
 800d934:	460f      	mov	r7, r1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d09f      	beq.n	800d87a <_strtod_l+0x98a>
 800d93a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d93e:	e7a0      	b.n	800d882 <_strtod_l+0x992>
 800d940:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d9c8 <_strtod_l+0xad8>
 800d944:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d948:	ec57 6b17 	vmov	r6, r7, d7
 800d94c:	e799      	b.n	800d882 <_strtod_l+0x992>
 800d94e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d952:	9b08      	ldr	r3, [sp, #32]
 800d954:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1c1      	bne.n	800d8e0 <_strtod_l+0x9f0>
 800d95c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d960:	0d1b      	lsrs	r3, r3, #20
 800d962:	051b      	lsls	r3, r3, #20
 800d964:	429d      	cmp	r5, r3
 800d966:	d1bb      	bne.n	800d8e0 <_strtod_l+0x9f0>
 800d968:	4630      	mov	r0, r6
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f3 f9bc 	bl	8000ce8 <__aeabi_d2lz>
 800d970:	f7f2 fe2c 	bl	80005cc <__aeabi_l2d>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4630      	mov	r0, r6
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f2 fc9c 	bl	80002b8 <__aeabi_dsub>
 800d980:	460b      	mov	r3, r1
 800d982:	4602      	mov	r2, r0
 800d984:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d988:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d98e:	ea46 060a 	orr.w	r6, r6, sl
 800d992:	431e      	orrs	r6, r3
 800d994:	d06f      	beq.n	800da76 <_strtod_l+0xb86>
 800d996:	a30e      	add	r3, pc, #56	@ (adr r3, 800d9d0 <_strtod_l+0xae0>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f7f3 f8b6 	bl	8000b0c <__aeabi_dcmplt>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	f47f accf 	bne.w	800d344 <_strtod_l+0x454>
 800d9a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d9d8 <_strtod_l+0xae8>)
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9b0:	f7f3 f8ca 	bl	8000b48 <__aeabi_dcmpgt>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d093      	beq.n	800d8e0 <_strtod_l+0x9f0>
 800d9b8:	e4c4      	b.n	800d344 <_strtod_l+0x454>
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	00000000 	.word	0x00000000
 800d9c4:	bff00000 	.word	0xbff00000
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	3ff00000 	.word	0x3ff00000
 800d9d0:	94a03595 	.word	0x94a03595
 800d9d4:	3fdfffff 	.word	0x3fdfffff
 800d9d8:	35afe535 	.word	0x35afe535
 800d9dc:	3fe00000 	.word	0x3fe00000
 800d9e0:	000fffff 	.word	0x000fffff
 800d9e4:	7ff00000 	.word	0x7ff00000
 800d9e8:	7fefffff 	.word	0x7fefffff
 800d9ec:	3ff00000 	.word	0x3ff00000
 800d9f0:	3fe00000 	.word	0x3fe00000
 800d9f4:	7fe00000 	.word	0x7fe00000
 800d9f8:	7c9fffff 	.word	0x7c9fffff
 800d9fc:	9b08      	ldr	r3, [sp, #32]
 800d9fe:	b323      	cbz	r3, 800da4a <_strtod_l+0xb5a>
 800da00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800da04:	d821      	bhi.n	800da4a <_strtod_l+0xb5a>
 800da06:	a328      	add	r3, pc, #160	@ (adr r3, 800daa8 <_strtod_l+0xbb8>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	4630      	mov	r0, r6
 800da0e:	4639      	mov	r1, r7
 800da10:	f7f3 f886 	bl	8000b20 <__aeabi_dcmple>
 800da14:	b1a0      	cbz	r0, 800da40 <_strtod_l+0xb50>
 800da16:	4639      	mov	r1, r7
 800da18:	4630      	mov	r0, r6
 800da1a:	f7f3 f8dd 	bl	8000bd8 <__aeabi_d2uiz>
 800da1e:	2801      	cmp	r0, #1
 800da20:	bf38      	it	cc
 800da22:	2001      	movcc	r0, #1
 800da24:	f7f2 fd86 	bl	8000534 <__aeabi_ui2d>
 800da28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da2a:	4606      	mov	r6, r0
 800da2c:	460f      	mov	r7, r1
 800da2e:	b9fb      	cbnz	r3, 800da70 <_strtod_l+0xb80>
 800da30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da34:	9014      	str	r0, [sp, #80]	@ 0x50
 800da36:	9315      	str	r3, [sp, #84]	@ 0x54
 800da38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800da3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800da46:	1b5b      	subs	r3, r3, r5
 800da48:	9311      	str	r3, [sp, #68]	@ 0x44
 800da4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800da52:	f7ff f8f1 	bl	800cc38 <__ulp>
 800da56:	4650      	mov	r0, sl
 800da58:	ec53 2b10 	vmov	r2, r3, d0
 800da5c:	4659      	mov	r1, fp
 800da5e:	f7f2 fde3 	bl	8000628 <__aeabi_dmul>
 800da62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800da66:	f7f2 fc29 	bl	80002bc <__adddf3>
 800da6a:	4682      	mov	sl, r0
 800da6c:	468b      	mov	fp, r1
 800da6e:	e770      	b.n	800d952 <_strtod_l+0xa62>
 800da70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800da74:	e7e0      	b.n	800da38 <_strtod_l+0xb48>
 800da76:	a30e      	add	r3, pc, #56	@ (adr r3, 800dab0 <_strtod_l+0xbc0>)
 800da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7c:	f7f3 f846 	bl	8000b0c <__aeabi_dcmplt>
 800da80:	e798      	b.n	800d9b4 <_strtod_l+0xac4>
 800da82:	2300      	movs	r3, #0
 800da84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800da86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800da88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800da8a:	6013      	str	r3, [r2, #0]
 800da8c:	f7ff ba6d 	b.w	800cf6a <_strtod_l+0x7a>
 800da90:	2a65      	cmp	r2, #101	@ 0x65
 800da92:	f43f ab66 	beq.w	800d162 <_strtod_l+0x272>
 800da96:	2a45      	cmp	r2, #69	@ 0x45
 800da98:	f43f ab63 	beq.w	800d162 <_strtod_l+0x272>
 800da9c:	2301      	movs	r3, #1
 800da9e:	f7ff bb9e 	b.w	800d1de <_strtod_l+0x2ee>
 800daa2:	bf00      	nop
 800daa4:	f3af 8000 	nop.w
 800daa8:	ffc00000 	.word	0xffc00000
 800daac:	41dfffff 	.word	0x41dfffff
 800dab0:	94a03595 	.word	0x94a03595
 800dab4:	3fcfffff 	.word	0x3fcfffff

0800dab8 <_strtod_r>:
 800dab8:	4b01      	ldr	r3, [pc, #4]	@ (800dac0 <_strtod_r+0x8>)
 800daba:	f7ff ba19 	b.w	800cef0 <_strtod_l>
 800dabe:	bf00      	nop
 800dac0:	20000084 	.word	0x20000084

0800dac4 <__ssputs_r>:
 800dac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac8:	688e      	ldr	r6, [r1, #8]
 800daca:	461f      	mov	r7, r3
 800dacc:	42be      	cmp	r6, r7
 800dace:	680b      	ldr	r3, [r1, #0]
 800dad0:	4682      	mov	sl, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	4690      	mov	r8, r2
 800dad6:	d82d      	bhi.n	800db34 <__ssputs_r+0x70>
 800dad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dadc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dae0:	d026      	beq.n	800db30 <__ssputs_r+0x6c>
 800dae2:	6965      	ldr	r5, [r4, #20]
 800dae4:	6909      	ldr	r1, [r1, #16]
 800dae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daea:	eba3 0901 	sub.w	r9, r3, r1
 800daee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daf2:	1c7b      	adds	r3, r7, #1
 800daf4:	444b      	add	r3, r9
 800daf6:	106d      	asrs	r5, r5, #1
 800daf8:	429d      	cmp	r5, r3
 800dafa:	bf38      	it	cc
 800dafc:	461d      	movcc	r5, r3
 800dafe:	0553      	lsls	r3, r2, #21
 800db00:	d527      	bpl.n	800db52 <__ssputs_r+0x8e>
 800db02:	4629      	mov	r1, r5
 800db04:	f7fe fc98 	bl	800c438 <_malloc_r>
 800db08:	4606      	mov	r6, r0
 800db0a:	b360      	cbz	r0, 800db66 <__ssputs_r+0xa2>
 800db0c:	6921      	ldr	r1, [r4, #16]
 800db0e:	464a      	mov	r2, r9
 800db10:	f000 ffa0 	bl	800ea54 <memcpy>
 800db14:	89a3      	ldrh	r3, [r4, #12]
 800db16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800db1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	6126      	str	r6, [r4, #16]
 800db22:	6165      	str	r5, [r4, #20]
 800db24:	444e      	add	r6, r9
 800db26:	eba5 0509 	sub.w	r5, r5, r9
 800db2a:	6026      	str	r6, [r4, #0]
 800db2c:	60a5      	str	r5, [r4, #8]
 800db2e:	463e      	mov	r6, r7
 800db30:	42be      	cmp	r6, r7
 800db32:	d900      	bls.n	800db36 <__ssputs_r+0x72>
 800db34:	463e      	mov	r6, r7
 800db36:	6820      	ldr	r0, [r4, #0]
 800db38:	4632      	mov	r2, r6
 800db3a:	4641      	mov	r1, r8
 800db3c:	f000 ff2b 	bl	800e996 <memmove>
 800db40:	68a3      	ldr	r3, [r4, #8]
 800db42:	1b9b      	subs	r3, r3, r6
 800db44:	60a3      	str	r3, [r4, #8]
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	4433      	add	r3, r6
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	2000      	movs	r0, #0
 800db4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db52:	462a      	mov	r2, r5
 800db54:	f001 fb11 	bl	800f17a <_realloc_r>
 800db58:	4606      	mov	r6, r0
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d1e0      	bne.n	800db20 <__ssputs_r+0x5c>
 800db5e:	6921      	ldr	r1, [r4, #16]
 800db60:	4650      	mov	r0, sl
 800db62:	f7fe fbf5 	bl	800c350 <_free_r>
 800db66:	230c      	movs	r3, #12
 800db68:	f8ca 3000 	str.w	r3, [sl]
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db72:	81a3      	strh	r3, [r4, #12]
 800db74:	f04f 30ff 	mov.w	r0, #4294967295
 800db78:	e7e9      	b.n	800db4e <__ssputs_r+0x8a>
	...

0800db7c <_svfiprintf_r>:
 800db7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db80:	4698      	mov	r8, r3
 800db82:	898b      	ldrh	r3, [r1, #12]
 800db84:	061b      	lsls	r3, r3, #24
 800db86:	b09d      	sub	sp, #116	@ 0x74
 800db88:	4607      	mov	r7, r0
 800db8a:	460d      	mov	r5, r1
 800db8c:	4614      	mov	r4, r2
 800db8e:	d510      	bpl.n	800dbb2 <_svfiprintf_r+0x36>
 800db90:	690b      	ldr	r3, [r1, #16]
 800db92:	b973      	cbnz	r3, 800dbb2 <_svfiprintf_r+0x36>
 800db94:	2140      	movs	r1, #64	@ 0x40
 800db96:	f7fe fc4f 	bl	800c438 <_malloc_r>
 800db9a:	6028      	str	r0, [r5, #0]
 800db9c:	6128      	str	r0, [r5, #16]
 800db9e:	b930      	cbnz	r0, 800dbae <_svfiprintf_r+0x32>
 800dba0:	230c      	movs	r3, #12
 800dba2:	603b      	str	r3, [r7, #0]
 800dba4:	f04f 30ff 	mov.w	r0, #4294967295
 800dba8:	b01d      	add	sp, #116	@ 0x74
 800dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbae:	2340      	movs	r3, #64	@ 0x40
 800dbb0:	616b      	str	r3, [r5, #20]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbb6:	2320      	movs	r3, #32
 800dbb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dbbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbc0:	2330      	movs	r3, #48	@ 0x30
 800dbc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd60 <_svfiprintf_r+0x1e4>
 800dbc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dbca:	f04f 0901 	mov.w	r9, #1
 800dbce:	4623      	mov	r3, r4
 800dbd0:	469a      	mov	sl, r3
 800dbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbd6:	b10a      	cbz	r2, 800dbdc <_svfiprintf_r+0x60>
 800dbd8:	2a25      	cmp	r2, #37	@ 0x25
 800dbda:	d1f9      	bne.n	800dbd0 <_svfiprintf_r+0x54>
 800dbdc:	ebba 0b04 	subs.w	fp, sl, r4
 800dbe0:	d00b      	beq.n	800dbfa <_svfiprintf_r+0x7e>
 800dbe2:	465b      	mov	r3, fp
 800dbe4:	4622      	mov	r2, r4
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4638      	mov	r0, r7
 800dbea:	f7ff ff6b 	bl	800dac4 <__ssputs_r>
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f000 80a7 	beq.w	800dd42 <_svfiprintf_r+0x1c6>
 800dbf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbf6:	445a      	add	r2, fp
 800dbf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f000 809f 	beq.w	800dd42 <_svfiprintf_r+0x1c6>
 800dc04:	2300      	movs	r3, #0
 800dc06:	f04f 32ff 	mov.w	r2, #4294967295
 800dc0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc0e:	f10a 0a01 	add.w	sl, sl, #1
 800dc12:	9304      	str	r3, [sp, #16]
 800dc14:	9307      	str	r3, [sp, #28]
 800dc16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dc1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc1c:	4654      	mov	r4, sl
 800dc1e:	2205      	movs	r2, #5
 800dc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc24:	484e      	ldr	r0, [pc, #312]	@ (800dd60 <_svfiprintf_r+0x1e4>)
 800dc26:	f7f2 faeb 	bl	8000200 <memchr>
 800dc2a:	9a04      	ldr	r2, [sp, #16]
 800dc2c:	b9d8      	cbnz	r0, 800dc66 <_svfiprintf_r+0xea>
 800dc2e:	06d0      	lsls	r0, r2, #27
 800dc30:	bf44      	itt	mi
 800dc32:	2320      	movmi	r3, #32
 800dc34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc38:	0711      	lsls	r1, r2, #28
 800dc3a:	bf44      	itt	mi
 800dc3c:	232b      	movmi	r3, #43	@ 0x2b
 800dc3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc42:	f89a 3000 	ldrb.w	r3, [sl]
 800dc46:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc48:	d015      	beq.n	800dc76 <_svfiprintf_r+0xfa>
 800dc4a:	9a07      	ldr	r2, [sp, #28]
 800dc4c:	4654      	mov	r4, sl
 800dc4e:	2000      	movs	r0, #0
 800dc50:	f04f 0c0a 	mov.w	ip, #10
 800dc54:	4621      	mov	r1, r4
 800dc56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc5a:	3b30      	subs	r3, #48	@ 0x30
 800dc5c:	2b09      	cmp	r3, #9
 800dc5e:	d94b      	bls.n	800dcf8 <_svfiprintf_r+0x17c>
 800dc60:	b1b0      	cbz	r0, 800dc90 <_svfiprintf_r+0x114>
 800dc62:	9207      	str	r2, [sp, #28]
 800dc64:	e014      	b.n	800dc90 <_svfiprintf_r+0x114>
 800dc66:	eba0 0308 	sub.w	r3, r0, r8
 800dc6a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	9304      	str	r3, [sp, #16]
 800dc72:	46a2      	mov	sl, r4
 800dc74:	e7d2      	b.n	800dc1c <_svfiprintf_r+0xa0>
 800dc76:	9b03      	ldr	r3, [sp, #12]
 800dc78:	1d19      	adds	r1, r3, #4
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	9103      	str	r1, [sp, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	bfbb      	ittet	lt
 800dc82:	425b      	neglt	r3, r3
 800dc84:	f042 0202 	orrlt.w	r2, r2, #2
 800dc88:	9307      	strge	r3, [sp, #28]
 800dc8a:	9307      	strlt	r3, [sp, #28]
 800dc8c:	bfb8      	it	lt
 800dc8e:	9204      	strlt	r2, [sp, #16]
 800dc90:	7823      	ldrb	r3, [r4, #0]
 800dc92:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc94:	d10a      	bne.n	800dcac <_svfiprintf_r+0x130>
 800dc96:	7863      	ldrb	r3, [r4, #1]
 800dc98:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc9a:	d132      	bne.n	800dd02 <_svfiprintf_r+0x186>
 800dc9c:	9b03      	ldr	r3, [sp, #12]
 800dc9e:	1d1a      	adds	r2, r3, #4
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	9203      	str	r2, [sp, #12]
 800dca4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dca8:	3402      	adds	r4, #2
 800dcaa:	9305      	str	r3, [sp, #20]
 800dcac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd70 <_svfiprintf_r+0x1f4>
 800dcb0:	7821      	ldrb	r1, [r4, #0]
 800dcb2:	2203      	movs	r2, #3
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	f7f2 faa3 	bl	8000200 <memchr>
 800dcba:	b138      	cbz	r0, 800dccc <_svfiprintf_r+0x150>
 800dcbc:	9b04      	ldr	r3, [sp, #16]
 800dcbe:	eba0 000a 	sub.w	r0, r0, sl
 800dcc2:	2240      	movs	r2, #64	@ 0x40
 800dcc4:	4082      	lsls	r2, r0
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	3401      	adds	r4, #1
 800dcca:	9304      	str	r3, [sp, #16]
 800dccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcd0:	4824      	ldr	r0, [pc, #144]	@ (800dd64 <_svfiprintf_r+0x1e8>)
 800dcd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dcd6:	2206      	movs	r2, #6
 800dcd8:	f7f2 fa92 	bl	8000200 <memchr>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d036      	beq.n	800dd4e <_svfiprintf_r+0x1d2>
 800dce0:	4b21      	ldr	r3, [pc, #132]	@ (800dd68 <_svfiprintf_r+0x1ec>)
 800dce2:	bb1b      	cbnz	r3, 800dd2c <_svfiprintf_r+0x1b0>
 800dce4:	9b03      	ldr	r3, [sp, #12]
 800dce6:	3307      	adds	r3, #7
 800dce8:	f023 0307 	bic.w	r3, r3, #7
 800dcec:	3308      	adds	r3, #8
 800dcee:	9303      	str	r3, [sp, #12]
 800dcf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcf2:	4433      	add	r3, r6
 800dcf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcf6:	e76a      	b.n	800dbce <_svfiprintf_r+0x52>
 800dcf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcfc:	460c      	mov	r4, r1
 800dcfe:	2001      	movs	r0, #1
 800dd00:	e7a8      	b.n	800dc54 <_svfiprintf_r+0xd8>
 800dd02:	2300      	movs	r3, #0
 800dd04:	3401      	adds	r4, #1
 800dd06:	9305      	str	r3, [sp, #20]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	f04f 0c0a 	mov.w	ip, #10
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd14:	3a30      	subs	r2, #48	@ 0x30
 800dd16:	2a09      	cmp	r2, #9
 800dd18:	d903      	bls.n	800dd22 <_svfiprintf_r+0x1a6>
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0c6      	beq.n	800dcac <_svfiprintf_r+0x130>
 800dd1e:	9105      	str	r1, [sp, #20]
 800dd20:	e7c4      	b.n	800dcac <_svfiprintf_r+0x130>
 800dd22:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd26:	4604      	mov	r4, r0
 800dd28:	2301      	movs	r3, #1
 800dd2a:	e7f0      	b.n	800dd0e <_svfiprintf_r+0x192>
 800dd2c:	ab03      	add	r3, sp, #12
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	462a      	mov	r2, r5
 800dd32:	4b0e      	ldr	r3, [pc, #56]	@ (800dd6c <_svfiprintf_r+0x1f0>)
 800dd34:	a904      	add	r1, sp, #16
 800dd36:	4638      	mov	r0, r7
 800dd38:	f7fc fc0e 	bl	800a558 <_printf_float>
 800dd3c:	1c42      	adds	r2, r0, #1
 800dd3e:	4606      	mov	r6, r0
 800dd40:	d1d6      	bne.n	800dcf0 <_svfiprintf_r+0x174>
 800dd42:	89ab      	ldrh	r3, [r5, #12]
 800dd44:	065b      	lsls	r3, r3, #25
 800dd46:	f53f af2d 	bmi.w	800dba4 <_svfiprintf_r+0x28>
 800dd4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd4c:	e72c      	b.n	800dba8 <_svfiprintf_r+0x2c>
 800dd4e:	ab03      	add	r3, sp, #12
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	462a      	mov	r2, r5
 800dd54:	4b05      	ldr	r3, [pc, #20]	@ (800dd6c <_svfiprintf_r+0x1f0>)
 800dd56:	a904      	add	r1, sp, #16
 800dd58:	4638      	mov	r0, r7
 800dd5a:	f7fc fe95 	bl	800aa88 <_printf_i>
 800dd5e:	e7ed      	b.n	800dd3c <_svfiprintf_r+0x1c0>
 800dd60:	08011010 	.word	0x08011010
 800dd64:	0801101a 	.word	0x0801101a
 800dd68:	0800a559 	.word	0x0800a559
 800dd6c:	0800dac5 	.word	0x0800dac5
 800dd70:	08011016 	.word	0x08011016

0800dd74 <_sungetc_r>:
 800dd74:	b538      	push	{r3, r4, r5, lr}
 800dd76:	1c4b      	adds	r3, r1, #1
 800dd78:	4614      	mov	r4, r2
 800dd7a:	d103      	bne.n	800dd84 <_sungetc_r+0x10>
 800dd7c:	f04f 35ff 	mov.w	r5, #4294967295
 800dd80:	4628      	mov	r0, r5
 800dd82:	bd38      	pop	{r3, r4, r5, pc}
 800dd84:	8993      	ldrh	r3, [r2, #12]
 800dd86:	f023 0320 	bic.w	r3, r3, #32
 800dd8a:	8193      	strh	r3, [r2, #12]
 800dd8c:	6853      	ldr	r3, [r2, #4]
 800dd8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800dd90:	b2cd      	uxtb	r5, r1
 800dd92:	b18a      	cbz	r2, 800ddb8 <_sungetc_r+0x44>
 800dd94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800dd96:	429a      	cmp	r2, r3
 800dd98:	dd08      	ble.n	800ddac <_sungetc_r+0x38>
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	1e5a      	subs	r2, r3, #1
 800dd9e:	6022      	str	r2, [r4, #0]
 800dda0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800dda4:	6863      	ldr	r3, [r4, #4]
 800dda6:	3301      	adds	r3, #1
 800dda8:	6063      	str	r3, [r4, #4]
 800ddaa:	e7e9      	b.n	800dd80 <_sungetc_r+0xc>
 800ddac:	4621      	mov	r1, r4
 800ddae:	f000 fdb8 	bl	800e922 <__submore>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d0f1      	beq.n	800dd9a <_sungetc_r+0x26>
 800ddb6:	e7e1      	b.n	800dd7c <_sungetc_r+0x8>
 800ddb8:	6921      	ldr	r1, [r4, #16]
 800ddba:	6822      	ldr	r2, [r4, #0]
 800ddbc:	b141      	cbz	r1, 800ddd0 <_sungetc_r+0x5c>
 800ddbe:	4291      	cmp	r1, r2
 800ddc0:	d206      	bcs.n	800ddd0 <_sungetc_r+0x5c>
 800ddc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800ddc6:	42a9      	cmp	r1, r5
 800ddc8:	d102      	bne.n	800ddd0 <_sungetc_r+0x5c>
 800ddca:	3a01      	subs	r2, #1
 800ddcc:	6022      	str	r2, [r4, #0]
 800ddce:	e7ea      	b.n	800dda6 <_sungetc_r+0x32>
 800ddd0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800ddd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddda:	2303      	movs	r3, #3
 800dddc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ddde:	4623      	mov	r3, r4
 800dde0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	2301      	movs	r3, #1
 800dde8:	e7de      	b.n	800dda8 <_sungetc_r+0x34>

0800ddea <__ssrefill_r>:
 800ddea:	b510      	push	{r4, lr}
 800ddec:	460c      	mov	r4, r1
 800ddee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ddf0:	b169      	cbz	r1, 800de0e <__ssrefill_r+0x24>
 800ddf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddf6:	4299      	cmp	r1, r3
 800ddf8:	d001      	beq.n	800ddfe <__ssrefill_r+0x14>
 800ddfa:	f7fe faa9 	bl	800c350 <_free_r>
 800ddfe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de00:	6063      	str	r3, [r4, #4]
 800de02:	2000      	movs	r0, #0
 800de04:	6360      	str	r0, [r4, #52]	@ 0x34
 800de06:	b113      	cbz	r3, 800de0e <__ssrefill_r+0x24>
 800de08:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd10      	pop	{r4, pc}
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	2300      	movs	r3, #0
 800de14:	6063      	str	r3, [r4, #4]
 800de16:	89a3      	ldrh	r3, [r4, #12]
 800de18:	f043 0320 	orr.w	r3, r3, #32
 800de1c:	81a3      	strh	r3, [r4, #12]
 800de1e:	f04f 30ff 	mov.w	r0, #4294967295
 800de22:	e7f3      	b.n	800de0c <__ssrefill_r+0x22>

0800de24 <__ssvfiscanf_r>:
 800de24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de28:	460c      	mov	r4, r1
 800de2a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800de2e:	2100      	movs	r1, #0
 800de30:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800de34:	49a5      	ldr	r1, [pc, #660]	@ (800e0cc <__ssvfiscanf_r+0x2a8>)
 800de36:	91a0      	str	r1, [sp, #640]	@ 0x280
 800de38:	f10d 0804 	add.w	r8, sp, #4
 800de3c:	49a4      	ldr	r1, [pc, #656]	@ (800e0d0 <__ssvfiscanf_r+0x2ac>)
 800de3e:	4fa5      	ldr	r7, [pc, #660]	@ (800e0d4 <__ssvfiscanf_r+0x2b0>)
 800de40:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800de44:	4606      	mov	r6, r0
 800de46:	91a1      	str	r1, [sp, #644]	@ 0x284
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	7813      	ldrb	r3, [r2, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	f000 8158 	beq.w	800e102 <__ssvfiscanf_r+0x2de>
 800de52:	5cf9      	ldrb	r1, [r7, r3]
 800de54:	f011 0108 	ands.w	r1, r1, #8
 800de58:	f102 0501 	add.w	r5, r2, #1
 800de5c:	d019      	beq.n	800de92 <__ssvfiscanf_r+0x6e>
 800de5e:	6863      	ldr	r3, [r4, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	dd0f      	ble.n	800de84 <__ssvfiscanf_r+0x60>
 800de64:	6823      	ldr	r3, [r4, #0]
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	5cba      	ldrb	r2, [r7, r2]
 800de6a:	0712      	lsls	r2, r2, #28
 800de6c:	d401      	bmi.n	800de72 <__ssvfiscanf_r+0x4e>
 800de6e:	462a      	mov	r2, r5
 800de70:	e7eb      	b.n	800de4a <__ssvfiscanf_r+0x26>
 800de72:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800de74:	3201      	adds	r2, #1
 800de76:	9245      	str	r2, [sp, #276]	@ 0x114
 800de78:	6862      	ldr	r2, [r4, #4]
 800de7a:	3301      	adds	r3, #1
 800de7c:	3a01      	subs	r2, #1
 800de7e:	6062      	str	r2, [r4, #4]
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	e7ec      	b.n	800de5e <__ssvfiscanf_r+0x3a>
 800de84:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800de86:	4621      	mov	r1, r4
 800de88:	4630      	mov	r0, r6
 800de8a:	4798      	blx	r3
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d0e9      	beq.n	800de64 <__ssvfiscanf_r+0x40>
 800de90:	e7ed      	b.n	800de6e <__ssvfiscanf_r+0x4a>
 800de92:	2b25      	cmp	r3, #37	@ 0x25
 800de94:	d012      	beq.n	800debc <__ssvfiscanf_r+0x98>
 800de96:	4699      	mov	r9, r3
 800de98:	6863      	ldr	r3, [r4, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f340 8093 	ble.w	800dfc6 <__ssvfiscanf_r+0x1a2>
 800dea0:	6822      	ldr	r2, [r4, #0]
 800dea2:	7813      	ldrb	r3, [r2, #0]
 800dea4:	454b      	cmp	r3, r9
 800dea6:	f040 812c 	bne.w	800e102 <__ssvfiscanf_r+0x2de>
 800deaa:	6863      	ldr	r3, [r4, #4]
 800deac:	3b01      	subs	r3, #1
 800deae:	6063      	str	r3, [r4, #4]
 800deb0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800deb2:	3201      	adds	r2, #1
 800deb4:	3301      	adds	r3, #1
 800deb6:	6022      	str	r2, [r4, #0]
 800deb8:	9345      	str	r3, [sp, #276]	@ 0x114
 800deba:	e7d8      	b.n	800de6e <__ssvfiscanf_r+0x4a>
 800debc:	9141      	str	r1, [sp, #260]	@ 0x104
 800debe:	9143      	str	r1, [sp, #268]	@ 0x10c
 800dec0:	7853      	ldrb	r3, [r2, #1]
 800dec2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dec4:	bf02      	ittt	eq
 800dec6:	2310      	moveq	r3, #16
 800dec8:	1c95      	addeq	r5, r2, #2
 800deca:	9341      	streq	r3, [sp, #260]	@ 0x104
 800decc:	220a      	movs	r2, #10
 800dece:	46a9      	mov	r9, r5
 800ded0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800ded4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ded8:	2b09      	cmp	r3, #9
 800deda:	d91e      	bls.n	800df1a <__ssvfiscanf_r+0xf6>
 800dedc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800e0d8 <__ssvfiscanf_r+0x2b4>
 800dee0:	2203      	movs	r2, #3
 800dee2:	4650      	mov	r0, sl
 800dee4:	f7f2 f98c 	bl	8000200 <memchr>
 800dee8:	b138      	cbz	r0, 800defa <__ssvfiscanf_r+0xd6>
 800deea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800deec:	eba0 000a 	sub.w	r0, r0, sl
 800def0:	2301      	movs	r3, #1
 800def2:	4083      	lsls	r3, r0
 800def4:	4313      	orrs	r3, r2
 800def6:	9341      	str	r3, [sp, #260]	@ 0x104
 800def8:	464d      	mov	r5, r9
 800defa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800defe:	2b78      	cmp	r3, #120	@ 0x78
 800df00:	d806      	bhi.n	800df10 <__ssvfiscanf_r+0xec>
 800df02:	2b57      	cmp	r3, #87	@ 0x57
 800df04:	d810      	bhi.n	800df28 <__ssvfiscanf_r+0x104>
 800df06:	2b25      	cmp	r3, #37	@ 0x25
 800df08:	d0c5      	beq.n	800de96 <__ssvfiscanf_r+0x72>
 800df0a:	d857      	bhi.n	800dfbc <__ssvfiscanf_r+0x198>
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d065      	beq.n	800dfdc <__ssvfiscanf_r+0x1b8>
 800df10:	2303      	movs	r3, #3
 800df12:	9347      	str	r3, [sp, #284]	@ 0x11c
 800df14:	230a      	movs	r3, #10
 800df16:	9342      	str	r3, [sp, #264]	@ 0x108
 800df18:	e078      	b.n	800e00c <__ssvfiscanf_r+0x1e8>
 800df1a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800df1c:	fb02 1103 	mla	r1, r2, r3, r1
 800df20:	3930      	subs	r1, #48	@ 0x30
 800df22:	9143      	str	r1, [sp, #268]	@ 0x10c
 800df24:	464d      	mov	r5, r9
 800df26:	e7d2      	b.n	800dece <__ssvfiscanf_r+0xaa>
 800df28:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800df2c:	2a20      	cmp	r2, #32
 800df2e:	d8ef      	bhi.n	800df10 <__ssvfiscanf_r+0xec>
 800df30:	a101      	add	r1, pc, #4	@ (adr r1, 800df38 <__ssvfiscanf_r+0x114>)
 800df32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800df36:	bf00      	nop
 800df38:	0800dfeb 	.word	0x0800dfeb
 800df3c:	0800df11 	.word	0x0800df11
 800df40:	0800df11 	.word	0x0800df11
 800df44:	0800e045 	.word	0x0800e045
 800df48:	0800df11 	.word	0x0800df11
 800df4c:	0800df11 	.word	0x0800df11
 800df50:	0800df11 	.word	0x0800df11
 800df54:	0800df11 	.word	0x0800df11
 800df58:	0800df11 	.word	0x0800df11
 800df5c:	0800df11 	.word	0x0800df11
 800df60:	0800df11 	.word	0x0800df11
 800df64:	0800e05b 	.word	0x0800e05b
 800df68:	0800e041 	.word	0x0800e041
 800df6c:	0800dfc3 	.word	0x0800dfc3
 800df70:	0800dfc3 	.word	0x0800dfc3
 800df74:	0800dfc3 	.word	0x0800dfc3
 800df78:	0800df11 	.word	0x0800df11
 800df7c:	0800dffd 	.word	0x0800dffd
 800df80:	0800df11 	.word	0x0800df11
 800df84:	0800df11 	.word	0x0800df11
 800df88:	0800df11 	.word	0x0800df11
 800df8c:	0800df11 	.word	0x0800df11
 800df90:	0800e06b 	.word	0x0800e06b
 800df94:	0800e005 	.word	0x0800e005
 800df98:	0800dfe3 	.word	0x0800dfe3
 800df9c:	0800df11 	.word	0x0800df11
 800dfa0:	0800df11 	.word	0x0800df11
 800dfa4:	0800e067 	.word	0x0800e067
 800dfa8:	0800df11 	.word	0x0800df11
 800dfac:	0800e041 	.word	0x0800e041
 800dfb0:	0800df11 	.word	0x0800df11
 800dfb4:	0800df11 	.word	0x0800df11
 800dfb8:	0800dfeb 	.word	0x0800dfeb
 800dfbc:	3b45      	subs	r3, #69	@ 0x45
 800dfbe:	2b02      	cmp	r3, #2
 800dfc0:	d8a6      	bhi.n	800df10 <__ssvfiscanf_r+0xec>
 800dfc2:	2305      	movs	r3, #5
 800dfc4:	e021      	b.n	800e00a <__ssvfiscanf_r+0x1e6>
 800dfc6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4630      	mov	r0, r6
 800dfcc:	4798      	blx	r3
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f43f af66 	beq.w	800dea0 <__ssvfiscanf_r+0x7c>
 800dfd4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f040 808b 	bne.w	800e0f2 <__ssvfiscanf_r+0x2ce>
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	e08b      	b.n	800e0fa <__ssvfiscanf_r+0x2d6>
 800dfe2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dfe4:	f042 0220 	orr.w	r2, r2, #32
 800dfe8:	9241      	str	r2, [sp, #260]	@ 0x104
 800dfea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dfec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dff0:	9241      	str	r2, [sp, #260]	@ 0x104
 800dff2:	2210      	movs	r2, #16
 800dff4:	2b6e      	cmp	r3, #110	@ 0x6e
 800dff6:	9242      	str	r2, [sp, #264]	@ 0x108
 800dff8:	d902      	bls.n	800e000 <__ssvfiscanf_r+0x1dc>
 800dffa:	e005      	b.n	800e008 <__ssvfiscanf_r+0x1e4>
 800dffc:	2300      	movs	r3, #0
 800dffe:	9342      	str	r3, [sp, #264]	@ 0x108
 800e000:	2303      	movs	r3, #3
 800e002:	e002      	b.n	800e00a <__ssvfiscanf_r+0x1e6>
 800e004:	2308      	movs	r3, #8
 800e006:	9342      	str	r3, [sp, #264]	@ 0x108
 800e008:	2304      	movs	r3, #4
 800e00a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e00c:	6863      	ldr	r3, [r4, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	dd39      	ble.n	800e086 <__ssvfiscanf_r+0x262>
 800e012:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e014:	0659      	lsls	r1, r3, #25
 800e016:	d404      	bmi.n	800e022 <__ssvfiscanf_r+0x1fe>
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	781a      	ldrb	r2, [r3, #0]
 800e01c:	5cba      	ldrb	r2, [r7, r2]
 800e01e:	0712      	lsls	r2, r2, #28
 800e020:	d438      	bmi.n	800e094 <__ssvfiscanf_r+0x270>
 800e022:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e024:	2b02      	cmp	r3, #2
 800e026:	dc47      	bgt.n	800e0b8 <__ssvfiscanf_r+0x294>
 800e028:	466b      	mov	r3, sp
 800e02a:	4622      	mov	r2, r4
 800e02c:	a941      	add	r1, sp, #260	@ 0x104
 800e02e:	4630      	mov	r0, r6
 800e030:	f000 f9ae 	bl	800e390 <_scanf_chars>
 800e034:	2801      	cmp	r0, #1
 800e036:	d064      	beq.n	800e102 <__ssvfiscanf_r+0x2de>
 800e038:	2802      	cmp	r0, #2
 800e03a:	f47f af18 	bne.w	800de6e <__ssvfiscanf_r+0x4a>
 800e03e:	e7c9      	b.n	800dfd4 <__ssvfiscanf_r+0x1b0>
 800e040:	220a      	movs	r2, #10
 800e042:	e7d7      	b.n	800dff4 <__ssvfiscanf_r+0x1d0>
 800e044:	4629      	mov	r1, r5
 800e046:	4640      	mov	r0, r8
 800e048:	f000 fc32 	bl	800e8b0 <__sccl>
 800e04c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e052:	9341      	str	r3, [sp, #260]	@ 0x104
 800e054:	4605      	mov	r5, r0
 800e056:	2301      	movs	r3, #1
 800e058:	e7d7      	b.n	800e00a <__ssvfiscanf_r+0x1e6>
 800e05a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e05c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e060:	9341      	str	r3, [sp, #260]	@ 0x104
 800e062:	2300      	movs	r3, #0
 800e064:	e7d1      	b.n	800e00a <__ssvfiscanf_r+0x1e6>
 800e066:	2302      	movs	r3, #2
 800e068:	e7cf      	b.n	800e00a <__ssvfiscanf_r+0x1e6>
 800e06a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e06c:	06c3      	lsls	r3, r0, #27
 800e06e:	f53f aefe 	bmi.w	800de6e <__ssvfiscanf_r+0x4a>
 800e072:	9b00      	ldr	r3, [sp, #0]
 800e074:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e076:	1d19      	adds	r1, r3, #4
 800e078:	9100      	str	r1, [sp, #0]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	07c0      	lsls	r0, r0, #31
 800e07e:	bf4c      	ite	mi
 800e080:	801a      	strhmi	r2, [r3, #0]
 800e082:	601a      	strpl	r2, [r3, #0]
 800e084:	e6f3      	b.n	800de6e <__ssvfiscanf_r+0x4a>
 800e086:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e088:	4621      	mov	r1, r4
 800e08a:	4630      	mov	r0, r6
 800e08c:	4798      	blx	r3
 800e08e:	2800      	cmp	r0, #0
 800e090:	d0bf      	beq.n	800e012 <__ssvfiscanf_r+0x1ee>
 800e092:	e79f      	b.n	800dfd4 <__ssvfiscanf_r+0x1b0>
 800e094:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e096:	3201      	adds	r2, #1
 800e098:	9245      	str	r2, [sp, #276]	@ 0x114
 800e09a:	6862      	ldr	r2, [r4, #4]
 800e09c:	3a01      	subs	r2, #1
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	6062      	str	r2, [r4, #4]
 800e0a2:	dd02      	ble.n	800e0aa <__ssvfiscanf_r+0x286>
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	6023      	str	r3, [r4, #0]
 800e0a8:	e7b6      	b.n	800e018 <__ssvfiscanf_r+0x1f4>
 800e0aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	4798      	blx	r3
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d0b0      	beq.n	800e018 <__ssvfiscanf_r+0x1f4>
 800e0b6:	e78d      	b.n	800dfd4 <__ssvfiscanf_r+0x1b0>
 800e0b8:	2b04      	cmp	r3, #4
 800e0ba:	dc0f      	bgt.n	800e0dc <__ssvfiscanf_r+0x2b8>
 800e0bc:	466b      	mov	r3, sp
 800e0be:	4622      	mov	r2, r4
 800e0c0:	a941      	add	r1, sp, #260	@ 0x104
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f000 f9be 	bl	800e444 <_scanf_i>
 800e0c8:	e7b4      	b.n	800e034 <__ssvfiscanf_r+0x210>
 800e0ca:	bf00      	nop
 800e0cc:	0800dd75 	.word	0x0800dd75
 800e0d0:	0800ddeb 	.word	0x0800ddeb
 800e0d4:	08010c9d 	.word	0x08010c9d
 800e0d8:	08011016 	.word	0x08011016
 800e0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e108 <__ssvfiscanf_r+0x2e4>)
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f43f aec5 	beq.w	800de6e <__ssvfiscanf_r+0x4a>
 800e0e4:	466b      	mov	r3, sp
 800e0e6:	4622      	mov	r2, r4
 800e0e8:	a941      	add	r1, sp, #260	@ 0x104
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f7fc fdec 	bl	800acc8 <_scanf_float>
 800e0f0:	e7a0      	b.n	800e034 <__ssvfiscanf_r+0x210>
 800e0f2:	89a3      	ldrh	r3, [r4, #12]
 800e0f4:	065b      	lsls	r3, r3, #25
 800e0f6:	f53f af71 	bmi.w	800dfdc <__ssvfiscanf_r+0x1b8>
 800e0fa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e102:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e104:	e7f9      	b.n	800e0fa <__ssvfiscanf_r+0x2d6>
 800e106:	bf00      	nop
 800e108:	0800acc9 	.word	0x0800acc9

0800e10c <__sfputc_r>:
 800e10c:	6893      	ldr	r3, [r2, #8]
 800e10e:	3b01      	subs	r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	b410      	push	{r4}
 800e114:	6093      	str	r3, [r2, #8]
 800e116:	da08      	bge.n	800e12a <__sfputc_r+0x1e>
 800e118:	6994      	ldr	r4, [r2, #24]
 800e11a:	42a3      	cmp	r3, r4
 800e11c:	db01      	blt.n	800e122 <__sfputc_r+0x16>
 800e11e:	290a      	cmp	r1, #10
 800e120:	d103      	bne.n	800e12a <__sfputc_r+0x1e>
 800e122:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e126:	f7fd b9ac 	b.w	800b482 <__swbuf_r>
 800e12a:	6813      	ldr	r3, [r2, #0]
 800e12c:	1c58      	adds	r0, r3, #1
 800e12e:	6010      	str	r0, [r2, #0]
 800e130:	7019      	strb	r1, [r3, #0]
 800e132:	4608      	mov	r0, r1
 800e134:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e138:	4770      	bx	lr

0800e13a <__sfputs_r>:
 800e13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13c:	4606      	mov	r6, r0
 800e13e:	460f      	mov	r7, r1
 800e140:	4614      	mov	r4, r2
 800e142:	18d5      	adds	r5, r2, r3
 800e144:	42ac      	cmp	r4, r5
 800e146:	d101      	bne.n	800e14c <__sfputs_r+0x12>
 800e148:	2000      	movs	r0, #0
 800e14a:	e007      	b.n	800e15c <__sfputs_r+0x22>
 800e14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e150:	463a      	mov	r2, r7
 800e152:	4630      	mov	r0, r6
 800e154:	f7ff ffda 	bl	800e10c <__sfputc_r>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d1f3      	bne.n	800e144 <__sfputs_r+0xa>
 800e15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e160 <_vfiprintf_r>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	460d      	mov	r5, r1
 800e166:	b09d      	sub	sp, #116	@ 0x74
 800e168:	4614      	mov	r4, r2
 800e16a:	4698      	mov	r8, r3
 800e16c:	4606      	mov	r6, r0
 800e16e:	b118      	cbz	r0, 800e178 <_vfiprintf_r+0x18>
 800e170:	6a03      	ldr	r3, [r0, #32]
 800e172:	b90b      	cbnz	r3, 800e178 <_vfiprintf_r+0x18>
 800e174:	f7fd f848 	bl	800b208 <__sinit>
 800e178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e17a:	07d9      	lsls	r1, r3, #31
 800e17c:	d405      	bmi.n	800e18a <_vfiprintf_r+0x2a>
 800e17e:	89ab      	ldrh	r3, [r5, #12]
 800e180:	059a      	lsls	r2, r3, #22
 800e182:	d402      	bmi.n	800e18a <_vfiprintf_r+0x2a>
 800e184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e186:	f7fd fa8e 	bl	800b6a6 <__retarget_lock_acquire_recursive>
 800e18a:	89ab      	ldrh	r3, [r5, #12]
 800e18c:	071b      	lsls	r3, r3, #28
 800e18e:	d501      	bpl.n	800e194 <_vfiprintf_r+0x34>
 800e190:	692b      	ldr	r3, [r5, #16]
 800e192:	b99b      	cbnz	r3, 800e1bc <_vfiprintf_r+0x5c>
 800e194:	4629      	mov	r1, r5
 800e196:	4630      	mov	r0, r6
 800e198:	f7fd f9b2 	bl	800b500 <__swsetup_r>
 800e19c:	b170      	cbz	r0, 800e1bc <_vfiprintf_r+0x5c>
 800e19e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1a0:	07dc      	lsls	r4, r3, #31
 800e1a2:	d504      	bpl.n	800e1ae <_vfiprintf_r+0x4e>
 800e1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a8:	b01d      	add	sp, #116	@ 0x74
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	89ab      	ldrh	r3, [r5, #12]
 800e1b0:	0598      	lsls	r0, r3, #22
 800e1b2:	d4f7      	bmi.n	800e1a4 <_vfiprintf_r+0x44>
 800e1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1b6:	f7fd fa77 	bl	800b6a8 <__retarget_lock_release_recursive>
 800e1ba:	e7f3      	b.n	800e1a4 <_vfiprintf_r+0x44>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1c0:	2320      	movs	r3, #32
 800e1c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e1c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1ca:	2330      	movs	r3, #48	@ 0x30
 800e1cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e37c <_vfiprintf_r+0x21c>
 800e1d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e1d4:	f04f 0901 	mov.w	r9, #1
 800e1d8:	4623      	mov	r3, r4
 800e1da:	469a      	mov	sl, r3
 800e1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1e0:	b10a      	cbz	r2, 800e1e6 <_vfiprintf_r+0x86>
 800e1e2:	2a25      	cmp	r2, #37	@ 0x25
 800e1e4:	d1f9      	bne.n	800e1da <_vfiprintf_r+0x7a>
 800e1e6:	ebba 0b04 	subs.w	fp, sl, r4
 800e1ea:	d00b      	beq.n	800e204 <_vfiprintf_r+0xa4>
 800e1ec:	465b      	mov	r3, fp
 800e1ee:	4622      	mov	r2, r4
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f7ff ffa1 	bl	800e13a <__sfputs_r>
 800e1f8:	3001      	adds	r0, #1
 800e1fa:	f000 80a7 	beq.w	800e34c <_vfiprintf_r+0x1ec>
 800e1fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e200:	445a      	add	r2, fp
 800e202:	9209      	str	r2, [sp, #36]	@ 0x24
 800e204:	f89a 3000 	ldrb.w	r3, [sl]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	f000 809f 	beq.w	800e34c <_vfiprintf_r+0x1ec>
 800e20e:	2300      	movs	r3, #0
 800e210:	f04f 32ff 	mov.w	r2, #4294967295
 800e214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e218:	f10a 0a01 	add.w	sl, sl, #1
 800e21c:	9304      	str	r3, [sp, #16]
 800e21e:	9307      	str	r3, [sp, #28]
 800e220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e224:	931a      	str	r3, [sp, #104]	@ 0x68
 800e226:	4654      	mov	r4, sl
 800e228:	2205      	movs	r2, #5
 800e22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22e:	4853      	ldr	r0, [pc, #332]	@ (800e37c <_vfiprintf_r+0x21c>)
 800e230:	f7f1 ffe6 	bl	8000200 <memchr>
 800e234:	9a04      	ldr	r2, [sp, #16]
 800e236:	b9d8      	cbnz	r0, 800e270 <_vfiprintf_r+0x110>
 800e238:	06d1      	lsls	r1, r2, #27
 800e23a:	bf44      	itt	mi
 800e23c:	2320      	movmi	r3, #32
 800e23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e242:	0713      	lsls	r3, r2, #28
 800e244:	bf44      	itt	mi
 800e246:	232b      	movmi	r3, #43	@ 0x2b
 800e248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e24c:	f89a 3000 	ldrb.w	r3, [sl]
 800e250:	2b2a      	cmp	r3, #42	@ 0x2a
 800e252:	d015      	beq.n	800e280 <_vfiprintf_r+0x120>
 800e254:	9a07      	ldr	r2, [sp, #28]
 800e256:	4654      	mov	r4, sl
 800e258:	2000      	movs	r0, #0
 800e25a:	f04f 0c0a 	mov.w	ip, #10
 800e25e:	4621      	mov	r1, r4
 800e260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e264:	3b30      	subs	r3, #48	@ 0x30
 800e266:	2b09      	cmp	r3, #9
 800e268:	d94b      	bls.n	800e302 <_vfiprintf_r+0x1a2>
 800e26a:	b1b0      	cbz	r0, 800e29a <_vfiprintf_r+0x13a>
 800e26c:	9207      	str	r2, [sp, #28]
 800e26e:	e014      	b.n	800e29a <_vfiprintf_r+0x13a>
 800e270:	eba0 0308 	sub.w	r3, r0, r8
 800e274:	fa09 f303 	lsl.w	r3, r9, r3
 800e278:	4313      	orrs	r3, r2
 800e27a:	9304      	str	r3, [sp, #16]
 800e27c:	46a2      	mov	sl, r4
 800e27e:	e7d2      	b.n	800e226 <_vfiprintf_r+0xc6>
 800e280:	9b03      	ldr	r3, [sp, #12]
 800e282:	1d19      	adds	r1, r3, #4
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	9103      	str	r1, [sp, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	bfbb      	ittet	lt
 800e28c:	425b      	neglt	r3, r3
 800e28e:	f042 0202 	orrlt.w	r2, r2, #2
 800e292:	9307      	strge	r3, [sp, #28]
 800e294:	9307      	strlt	r3, [sp, #28]
 800e296:	bfb8      	it	lt
 800e298:	9204      	strlt	r2, [sp, #16]
 800e29a:	7823      	ldrb	r3, [r4, #0]
 800e29c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e29e:	d10a      	bne.n	800e2b6 <_vfiprintf_r+0x156>
 800e2a0:	7863      	ldrb	r3, [r4, #1]
 800e2a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2a4:	d132      	bne.n	800e30c <_vfiprintf_r+0x1ac>
 800e2a6:	9b03      	ldr	r3, [sp, #12]
 800e2a8:	1d1a      	adds	r2, r3, #4
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	9203      	str	r2, [sp, #12]
 800e2ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e2b2:	3402      	adds	r4, #2
 800e2b4:	9305      	str	r3, [sp, #20]
 800e2b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e38c <_vfiprintf_r+0x22c>
 800e2ba:	7821      	ldrb	r1, [r4, #0]
 800e2bc:	2203      	movs	r2, #3
 800e2be:	4650      	mov	r0, sl
 800e2c0:	f7f1 ff9e 	bl	8000200 <memchr>
 800e2c4:	b138      	cbz	r0, 800e2d6 <_vfiprintf_r+0x176>
 800e2c6:	9b04      	ldr	r3, [sp, #16]
 800e2c8:	eba0 000a 	sub.w	r0, r0, sl
 800e2cc:	2240      	movs	r2, #64	@ 0x40
 800e2ce:	4082      	lsls	r2, r0
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	3401      	adds	r4, #1
 800e2d4:	9304      	str	r3, [sp, #16]
 800e2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2da:	4829      	ldr	r0, [pc, #164]	@ (800e380 <_vfiprintf_r+0x220>)
 800e2dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e2e0:	2206      	movs	r2, #6
 800e2e2:	f7f1 ff8d 	bl	8000200 <memchr>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d03f      	beq.n	800e36a <_vfiprintf_r+0x20a>
 800e2ea:	4b26      	ldr	r3, [pc, #152]	@ (800e384 <_vfiprintf_r+0x224>)
 800e2ec:	bb1b      	cbnz	r3, 800e336 <_vfiprintf_r+0x1d6>
 800e2ee:	9b03      	ldr	r3, [sp, #12]
 800e2f0:	3307      	adds	r3, #7
 800e2f2:	f023 0307 	bic.w	r3, r3, #7
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	9303      	str	r3, [sp, #12]
 800e2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2fc:	443b      	add	r3, r7
 800e2fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800e300:	e76a      	b.n	800e1d8 <_vfiprintf_r+0x78>
 800e302:	fb0c 3202 	mla	r2, ip, r2, r3
 800e306:	460c      	mov	r4, r1
 800e308:	2001      	movs	r0, #1
 800e30a:	e7a8      	b.n	800e25e <_vfiprintf_r+0xfe>
 800e30c:	2300      	movs	r3, #0
 800e30e:	3401      	adds	r4, #1
 800e310:	9305      	str	r3, [sp, #20]
 800e312:	4619      	mov	r1, r3
 800e314:	f04f 0c0a 	mov.w	ip, #10
 800e318:	4620      	mov	r0, r4
 800e31a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e31e:	3a30      	subs	r2, #48	@ 0x30
 800e320:	2a09      	cmp	r2, #9
 800e322:	d903      	bls.n	800e32c <_vfiprintf_r+0x1cc>
 800e324:	2b00      	cmp	r3, #0
 800e326:	d0c6      	beq.n	800e2b6 <_vfiprintf_r+0x156>
 800e328:	9105      	str	r1, [sp, #20]
 800e32a:	e7c4      	b.n	800e2b6 <_vfiprintf_r+0x156>
 800e32c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e330:	4604      	mov	r4, r0
 800e332:	2301      	movs	r3, #1
 800e334:	e7f0      	b.n	800e318 <_vfiprintf_r+0x1b8>
 800e336:	ab03      	add	r3, sp, #12
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	462a      	mov	r2, r5
 800e33c:	4b12      	ldr	r3, [pc, #72]	@ (800e388 <_vfiprintf_r+0x228>)
 800e33e:	a904      	add	r1, sp, #16
 800e340:	4630      	mov	r0, r6
 800e342:	f7fc f909 	bl	800a558 <_printf_float>
 800e346:	4607      	mov	r7, r0
 800e348:	1c78      	adds	r0, r7, #1
 800e34a:	d1d6      	bne.n	800e2fa <_vfiprintf_r+0x19a>
 800e34c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e34e:	07d9      	lsls	r1, r3, #31
 800e350:	d405      	bmi.n	800e35e <_vfiprintf_r+0x1fe>
 800e352:	89ab      	ldrh	r3, [r5, #12]
 800e354:	059a      	lsls	r2, r3, #22
 800e356:	d402      	bmi.n	800e35e <_vfiprintf_r+0x1fe>
 800e358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e35a:	f7fd f9a5 	bl	800b6a8 <__retarget_lock_release_recursive>
 800e35e:	89ab      	ldrh	r3, [r5, #12]
 800e360:	065b      	lsls	r3, r3, #25
 800e362:	f53f af1f 	bmi.w	800e1a4 <_vfiprintf_r+0x44>
 800e366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e368:	e71e      	b.n	800e1a8 <_vfiprintf_r+0x48>
 800e36a:	ab03      	add	r3, sp, #12
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	462a      	mov	r2, r5
 800e370:	4b05      	ldr	r3, [pc, #20]	@ (800e388 <_vfiprintf_r+0x228>)
 800e372:	a904      	add	r1, sp, #16
 800e374:	4630      	mov	r0, r6
 800e376:	f7fc fb87 	bl	800aa88 <_printf_i>
 800e37a:	e7e4      	b.n	800e346 <_vfiprintf_r+0x1e6>
 800e37c:	08011010 	.word	0x08011010
 800e380:	0801101a 	.word	0x0801101a
 800e384:	0800a559 	.word	0x0800a559
 800e388:	0800e13b 	.word	0x0800e13b
 800e38c:	08011016 	.word	0x08011016

0800e390 <_scanf_chars>:
 800e390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e394:	4615      	mov	r5, r2
 800e396:	688a      	ldr	r2, [r1, #8]
 800e398:	4680      	mov	r8, r0
 800e39a:	460c      	mov	r4, r1
 800e39c:	b932      	cbnz	r2, 800e3ac <_scanf_chars+0x1c>
 800e39e:	698a      	ldr	r2, [r1, #24]
 800e3a0:	2a00      	cmp	r2, #0
 800e3a2:	bf14      	ite	ne
 800e3a4:	f04f 32ff 	movne.w	r2, #4294967295
 800e3a8:	2201      	moveq	r2, #1
 800e3aa:	608a      	str	r2, [r1, #8]
 800e3ac:	6822      	ldr	r2, [r4, #0]
 800e3ae:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e440 <_scanf_chars+0xb0>
 800e3b2:	06d1      	lsls	r1, r2, #27
 800e3b4:	bf5f      	itttt	pl
 800e3b6:	681a      	ldrpl	r2, [r3, #0]
 800e3b8:	1d11      	addpl	r1, r2, #4
 800e3ba:	6019      	strpl	r1, [r3, #0]
 800e3bc:	6816      	ldrpl	r6, [r2, #0]
 800e3be:	2700      	movs	r7, #0
 800e3c0:	69a0      	ldr	r0, [r4, #24]
 800e3c2:	b188      	cbz	r0, 800e3e8 <_scanf_chars+0x58>
 800e3c4:	2801      	cmp	r0, #1
 800e3c6:	d107      	bne.n	800e3d8 <_scanf_chars+0x48>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	781a      	ldrb	r2, [r3, #0]
 800e3cc:	6963      	ldr	r3, [r4, #20]
 800e3ce:	5c9b      	ldrb	r3, [r3, r2]
 800e3d0:	b953      	cbnz	r3, 800e3e8 <_scanf_chars+0x58>
 800e3d2:	2f00      	cmp	r7, #0
 800e3d4:	d031      	beq.n	800e43a <_scanf_chars+0xaa>
 800e3d6:	e022      	b.n	800e41e <_scanf_chars+0x8e>
 800e3d8:	2802      	cmp	r0, #2
 800e3da:	d120      	bne.n	800e41e <_scanf_chars+0x8e>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e3e4:	071b      	lsls	r3, r3, #28
 800e3e6:	d41a      	bmi.n	800e41e <_scanf_chars+0x8e>
 800e3e8:	6823      	ldr	r3, [r4, #0]
 800e3ea:	06da      	lsls	r2, r3, #27
 800e3ec:	bf5e      	ittt	pl
 800e3ee:	682b      	ldrpl	r3, [r5, #0]
 800e3f0:	781b      	ldrbpl	r3, [r3, #0]
 800e3f2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e3f6:	682a      	ldr	r2, [r5, #0]
 800e3f8:	686b      	ldr	r3, [r5, #4]
 800e3fa:	3201      	adds	r2, #1
 800e3fc:	602a      	str	r2, [r5, #0]
 800e3fe:	68a2      	ldr	r2, [r4, #8]
 800e400:	3b01      	subs	r3, #1
 800e402:	3a01      	subs	r2, #1
 800e404:	606b      	str	r3, [r5, #4]
 800e406:	3701      	adds	r7, #1
 800e408:	60a2      	str	r2, [r4, #8]
 800e40a:	b142      	cbz	r2, 800e41e <_scanf_chars+0x8e>
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dcd7      	bgt.n	800e3c0 <_scanf_chars+0x30>
 800e410:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e414:	4629      	mov	r1, r5
 800e416:	4640      	mov	r0, r8
 800e418:	4798      	blx	r3
 800e41a:	2800      	cmp	r0, #0
 800e41c:	d0d0      	beq.n	800e3c0 <_scanf_chars+0x30>
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	f013 0310 	ands.w	r3, r3, #16
 800e424:	d105      	bne.n	800e432 <_scanf_chars+0xa2>
 800e426:	68e2      	ldr	r2, [r4, #12]
 800e428:	3201      	adds	r2, #1
 800e42a:	60e2      	str	r2, [r4, #12]
 800e42c:	69a2      	ldr	r2, [r4, #24]
 800e42e:	b102      	cbz	r2, 800e432 <_scanf_chars+0xa2>
 800e430:	7033      	strb	r3, [r6, #0]
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	443b      	add	r3, r7
 800e436:	6123      	str	r3, [r4, #16]
 800e438:	2000      	movs	r0, #0
 800e43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e43e:	bf00      	nop
 800e440:	08010c9d 	.word	0x08010c9d

0800e444 <_scanf_i>:
 800e444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e448:	4698      	mov	r8, r3
 800e44a:	4b74      	ldr	r3, [pc, #464]	@ (800e61c <_scanf_i+0x1d8>)
 800e44c:	460c      	mov	r4, r1
 800e44e:	4682      	mov	sl, r0
 800e450:	4616      	mov	r6, r2
 800e452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e456:	b087      	sub	sp, #28
 800e458:	ab03      	add	r3, sp, #12
 800e45a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e45e:	4b70      	ldr	r3, [pc, #448]	@ (800e620 <_scanf_i+0x1dc>)
 800e460:	69a1      	ldr	r1, [r4, #24]
 800e462:	4a70      	ldr	r2, [pc, #448]	@ (800e624 <_scanf_i+0x1e0>)
 800e464:	2903      	cmp	r1, #3
 800e466:	bf08      	it	eq
 800e468:	461a      	moveq	r2, r3
 800e46a:	68a3      	ldr	r3, [r4, #8]
 800e46c:	9201      	str	r2, [sp, #4]
 800e46e:	1e5a      	subs	r2, r3, #1
 800e470:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e474:	bf88      	it	hi
 800e476:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e47a:	4627      	mov	r7, r4
 800e47c:	bf82      	ittt	hi
 800e47e:	eb03 0905 	addhi.w	r9, r3, r5
 800e482:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e486:	60a3      	strhi	r3, [r4, #8]
 800e488:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e48c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e490:	bf98      	it	ls
 800e492:	f04f 0900 	movls.w	r9, #0
 800e496:	6023      	str	r3, [r4, #0]
 800e498:	463d      	mov	r5, r7
 800e49a:	f04f 0b00 	mov.w	fp, #0
 800e49e:	6831      	ldr	r1, [r6, #0]
 800e4a0:	ab03      	add	r3, sp, #12
 800e4a2:	7809      	ldrb	r1, [r1, #0]
 800e4a4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e4a8:	2202      	movs	r2, #2
 800e4aa:	f7f1 fea9 	bl	8000200 <memchr>
 800e4ae:	b328      	cbz	r0, 800e4fc <_scanf_i+0xb8>
 800e4b0:	f1bb 0f01 	cmp.w	fp, #1
 800e4b4:	d159      	bne.n	800e56a <_scanf_i+0x126>
 800e4b6:	6862      	ldr	r2, [r4, #4]
 800e4b8:	b92a      	cbnz	r2, 800e4c6 <_scanf_i+0x82>
 800e4ba:	6822      	ldr	r2, [r4, #0]
 800e4bc:	2108      	movs	r1, #8
 800e4be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4c2:	6061      	str	r1, [r4, #4]
 800e4c4:	6022      	str	r2, [r4, #0]
 800e4c6:	6822      	ldr	r2, [r4, #0]
 800e4c8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e4cc:	6022      	str	r2, [r4, #0]
 800e4ce:	68a2      	ldr	r2, [r4, #8]
 800e4d0:	1e51      	subs	r1, r2, #1
 800e4d2:	60a1      	str	r1, [r4, #8]
 800e4d4:	b192      	cbz	r2, 800e4fc <_scanf_i+0xb8>
 800e4d6:	6832      	ldr	r2, [r6, #0]
 800e4d8:	1c51      	adds	r1, r2, #1
 800e4da:	6031      	str	r1, [r6, #0]
 800e4dc:	7812      	ldrb	r2, [r2, #0]
 800e4de:	f805 2b01 	strb.w	r2, [r5], #1
 800e4e2:	6872      	ldr	r2, [r6, #4]
 800e4e4:	3a01      	subs	r2, #1
 800e4e6:	2a00      	cmp	r2, #0
 800e4e8:	6072      	str	r2, [r6, #4]
 800e4ea:	dc07      	bgt.n	800e4fc <_scanf_i+0xb8>
 800e4ec:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e4f0:	4631      	mov	r1, r6
 800e4f2:	4650      	mov	r0, sl
 800e4f4:	4790      	blx	r2
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	f040 8085 	bne.w	800e606 <_scanf_i+0x1c2>
 800e4fc:	f10b 0b01 	add.w	fp, fp, #1
 800e500:	f1bb 0f03 	cmp.w	fp, #3
 800e504:	d1cb      	bne.n	800e49e <_scanf_i+0x5a>
 800e506:	6863      	ldr	r3, [r4, #4]
 800e508:	b90b      	cbnz	r3, 800e50e <_scanf_i+0xca>
 800e50a:	230a      	movs	r3, #10
 800e50c:	6063      	str	r3, [r4, #4]
 800e50e:	6863      	ldr	r3, [r4, #4]
 800e510:	4945      	ldr	r1, [pc, #276]	@ (800e628 <_scanf_i+0x1e4>)
 800e512:	6960      	ldr	r0, [r4, #20]
 800e514:	1ac9      	subs	r1, r1, r3
 800e516:	f000 f9cb 	bl	800e8b0 <__sccl>
 800e51a:	f04f 0b00 	mov.w	fp, #0
 800e51e:	68a3      	ldr	r3, [r4, #8]
 800e520:	6822      	ldr	r2, [r4, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d03d      	beq.n	800e5a2 <_scanf_i+0x15e>
 800e526:	6831      	ldr	r1, [r6, #0]
 800e528:	6960      	ldr	r0, [r4, #20]
 800e52a:	f891 c000 	ldrb.w	ip, [r1]
 800e52e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e532:	2800      	cmp	r0, #0
 800e534:	d035      	beq.n	800e5a2 <_scanf_i+0x15e>
 800e536:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e53a:	d124      	bne.n	800e586 <_scanf_i+0x142>
 800e53c:	0510      	lsls	r0, r2, #20
 800e53e:	d522      	bpl.n	800e586 <_scanf_i+0x142>
 800e540:	f10b 0b01 	add.w	fp, fp, #1
 800e544:	f1b9 0f00 	cmp.w	r9, #0
 800e548:	d003      	beq.n	800e552 <_scanf_i+0x10e>
 800e54a:	3301      	adds	r3, #1
 800e54c:	f109 39ff 	add.w	r9, r9, #4294967295
 800e550:	60a3      	str	r3, [r4, #8]
 800e552:	6873      	ldr	r3, [r6, #4]
 800e554:	3b01      	subs	r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	6073      	str	r3, [r6, #4]
 800e55a:	dd1b      	ble.n	800e594 <_scanf_i+0x150>
 800e55c:	6833      	ldr	r3, [r6, #0]
 800e55e:	3301      	adds	r3, #1
 800e560:	6033      	str	r3, [r6, #0]
 800e562:	68a3      	ldr	r3, [r4, #8]
 800e564:	3b01      	subs	r3, #1
 800e566:	60a3      	str	r3, [r4, #8]
 800e568:	e7d9      	b.n	800e51e <_scanf_i+0xda>
 800e56a:	f1bb 0f02 	cmp.w	fp, #2
 800e56e:	d1ae      	bne.n	800e4ce <_scanf_i+0x8a>
 800e570:	6822      	ldr	r2, [r4, #0]
 800e572:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e576:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e57a:	d1bf      	bne.n	800e4fc <_scanf_i+0xb8>
 800e57c:	2110      	movs	r1, #16
 800e57e:	6061      	str	r1, [r4, #4]
 800e580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e584:	e7a2      	b.n	800e4cc <_scanf_i+0x88>
 800e586:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e58a:	6022      	str	r2, [r4, #0]
 800e58c:	780b      	ldrb	r3, [r1, #0]
 800e58e:	f805 3b01 	strb.w	r3, [r5], #1
 800e592:	e7de      	b.n	800e552 <_scanf_i+0x10e>
 800e594:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e598:	4631      	mov	r1, r6
 800e59a:	4650      	mov	r0, sl
 800e59c:	4798      	blx	r3
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d0df      	beq.n	800e562 <_scanf_i+0x11e>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	05d9      	lsls	r1, r3, #23
 800e5a6:	d50d      	bpl.n	800e5c4 <_scanf_i+0x180>
 800e5a8:	42bd      	cmp	r5, r7
 800e5aa:	d909      	bls.n	800e5c0 <_scanf_i+0x17c>
 800e5ac:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e5b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e5b4:	4632      	mov	r2, r6
 800e5b6:	4650      	mov	r0, sl
 800e5b8:	4798      	blx	r3
 800e5ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800e5be:	464d      	mov	r5, r9
 800e5c0:	42bd      	cmp	r5, r7
 800e5c2:	d028      	beq.n	800e616 <_scanf_i+0x1d2>
 800e5c4:	6822      	ldr	r2, [r4, #0]
 800e5c6:	f012 0210 	ands.w	r2, r2, #16
 800e5ca:	d113      	bne.n	800e5f4 <_scanf_i+0x1b0>
 800e5cc:	702a      	strb	r2, [r5, #0]
 800e5ce:	6863      	ldr	r3, [r4, #4]
 800e5d0:	9e01      	ldr	r6, [sp, #4]
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	4650      	mov	r0, sl
 800e5d6:	47b0      	blx	r6
 800e5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800e5dc:	6821      	ldr	r1, [r4, #0]
 800e5de:	1d1a      	adds	r2, r3, #4
 800e5e0:	f8c8 2000 	str.w	r2, [r8]
 800e5e4:	f011 0f20 	tst.w	r1, #32
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	d00f      	beq.n	800e60c <_scanf_i+0x1c8>
 800e5ec:	6018      	str	r0, [r3, #0]
 800e5ee:	68e3      	ldr	r3, [r4, #12]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	60e3      	str	r3, [r4, #12]
 800e5f4:	6923      	ldr	r3, [r4, #16]
 800e5f6:	1bed      	subs	r5, r5, r7
 800e5f8:	445d      	add	r5, fp
 800e5fa:	442b      	add	r3, r5
 800e5fc:	6123      	str	r3, [r4, #16]
 800e5fe:	2000      	movs	r0, #0
 800e600:	b007      	add	sp, #28
 800e602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e606:	f04f 0b00 	mov.w	fp, #0
 800e60a:	e7ca      	b.n	800e5a2 <_scanf_i+0x15e>
 800e60c:	07ca      	lsls	r2, r1, #31
 800e60e:	bf4c      	ite	mi
 800e610:	8018      	strhmi	r0, [r3, #0]
 800e612:	6018      	strpl	r0, [r3, #0]
 800e614:	e7eb      	b.n	800e5ee <_scanf_i+0x1aa>
 800e616:	2001      	movs	r0, #1
 800e618:	e7f2      	b.n	800e600 <_scanf_i+0x1bc>
 800e61a:	bf00      	nop
 800e61c:	08010780 	.word	0x08010780
 800e620:	0800a401 	.word	0x0800a401
 800e624:	0800f2b5 	.word	0x0800f2b5
 800e628:	08011031 	.word	0x08011031

0800e62c <__sflush_r>:
 800e62c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e634:	0716      	lsls	r6, r2, #28
 800e636:	4605      	mov	r5, r0
 800e638:	460c      	mov	r4, r1
 800e63a:	d454      	bmi.n	800e6e6 <__sflush_r+0xba>
 800e63c:	684b      	ldr	r3, [r1, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	dc02      	bgt.n	800e648 <__sflush_r+0x1c>
 800e642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e644:	2b00      	cmp	r3, #0
 800e646:	dd48      	ble.n	800e6da <__sflush_r+0xae>
 800e648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e64a:	2e00      	cmp	r6, #0
 800e64c:	d045      	beq.n	800e6da <__sflush_r+0xae>
 800e64e:	2300      	movs	r3, #0
 800e650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e654:	682f      	ldr	r7, [r5, #0]
 800e656:	6a21      	ldr	r1, [r4, #32]
 800e658:	602b      	str	r3, [r5, #0]
 800e65a:	d030      	beq.n	800e6be <__sflush_r+0x92>
 800e65c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	0759      	lsls	r1, r3, #29
 800e662:	d505      	bpl.n	800e670 <__sflush_r+0x44>
 800e664:	6863      	ldr	r3, [r4, #4]
 800e666:	1ad2      	subs	r2, r2, r3
 800e668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e66a:	b10b      	cbz	r3, 800e670 <__sflush_r+0x44>
 800e66c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e66e:	1ad2      	subs	r2, r2, r3
 800e670:	2300      	movs	r3, #0
 800e672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e674:	6a21      	ldr	r1, [r4, #32]
 800e676:	4628      	mov	r0, r5
 800e678:	47b0      	blx	r6
 800e67a:	1c43      	adds	r3, r0, #1
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	d106      	bne.n	800e68e <__sflush_r+0x62>
 800e680:	6829      	ldr	r1, [r5, #0]
 800e682:	291d      	cmp	r1, #29
 800e684:	d82b      	bhi.n	800e6de <__sflush_r+0xb2>
 800e686:	4a2a      	ldr	r2, [pc, #168]	@ (800e730 <__sflush_r+0x104>)
 800e688:	410a      	asrs	r2, r1
 800e68a:	07d6      	lsls	r6, r2, #31
 800e68c:	d427      	bmi.n	800e6de <__sflush_r+0xb2>
 800e68e:	2200      	movs	r2, #0
 800e690:	6062      	str	r2, [r4, #4]
 800e692:	04d9      	lsls	r1, r3, #19
 800e694:	6922      	ldr	r2, [r4, #16]
 800e696:	6022      	str	r2, [r4, #0]
 800e698:	d504      	bpl.n	800e6a4 <__sflush_r+0x78>
 800e69a:	1c42      	adds	r2, r0, #1
 800e69c:	d101      	bne.n	800e6a2 <__sflush_r+0x76>
 800e69e:	682b      	ldr	r3, [r5, #0]
 800e6a0:	b903      	cbnz	r3, 800e6a4 <__sflush_r+0x78>
 800e6a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800e6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6a6:	602f      	str	r7, [r5, #0]
 800e6a8:	b1b9      	cbz	r1, 800e6da <__sflush_r+0xae>
 800e6aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6ae:	4299      	cmp	r1, r3
 800e6b0:	d002      	beq.n	800e6b8 <__sflush_r+0x8c>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7fd fe4c 	bl	800c350 <_free_r>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6bc:	e00d      	b.n	800e6da <__sflush_r+0xae>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	47b0      	blx	r6
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	1c50      	adds	r0, r2, #1
 800e6c8:	d1c9      	bne.n	800e65e <__sflush_r+0x32>
 800e6ca:	682b      	ldr	r3, [r5, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d0c6      	beq.n	800e65e <__sflush_r+0x32>
 800e6d0:	2b1d      	cmp	r3, #29
 800e6d2:	d001      	beq.n	800e6d8 <__sflush_r+0xac>
 800e6d4:	2b16      	cmp	r3, #22
 800e6d6:	d11e      	bne.n	800e716 <__sflush_r+0xea>
 800e6d8:	602f      	str	r7, [r5, #0]
 800e6da:	2000      	movs	r0, #0
 800e6dc:	e022      	b.n	800e724 <__sflush_r+0xf8>
 800e6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6e2:	b21b      	sxth	r3, r3
 800e6e4:	e01b      	b.n	800e71e <__sflush_r+0xf2>
 800e6e6:	690f      	ldr	r7, [r1, #16]
 800e6e8:	2f00      	cmp	r7, #0
 800e6ea:	d0f6      	beq.n	800e6da <__sflush_r+0xae>
 800e6ec:	0793      	lsls	r3, r2, #30
 800e6ee:	680e      	ldr	r6, [r1, #0]
 800e6f0:	bf08      	it	eq
 800e6f2:	694b      	ldreq	r3, [r1, #20]
 800e6f4:	600f      	str	r7, [r1, #0]
 800e6f6:	bf18      	it	ne
 800e6f8:	2300      	movne	r3, #0
 800e6fa:	eba6 0807 	sub.w	r8, r6, r7
 800e6fe:	608b      	str	r3, [r1, #8]
 800e700:	f1b8 0f00 	cmp.w	r8, #0
 800e704:	dde9      	ble.n	800e6da <__sflush_r+0xae>
 800e706:	6a21      	ldr	r1, [r4, #32]
 800e708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e70a:	4643      	mov	r3, r8
 800e70c:	463a      	mov	r2, r7
 800e70e:	4628      	mov	r0, r5
 800e710:	47b0      	blx	r6
 800e712:	2800      	cmp	r0, #0
 800e714:	dc08      	bgt.n	800e728 <__sflush_r+0xfc>
 800e716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e71e:	81a3      	strh	r3, [r4, #12]
 800e720:	f04f 30ff 	mov.w	r0, #4294967295
 800e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e728:	4407      	add	r7, r0
 800e72a:	eba8 0800 	sub.w	r8, r8, r0
 800e72e:	e7e7      	b.n	800e700 <__sflush_r+0xd4>
 800e730:	dfbffffe 	.word	0xdfbffffe

0800e734 <_fflush_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	690b      	ldr	r3, [r1, #16]
 800e738:	4605      	mov	r5, r0
 800e73a:	460c      	mov	r4, r1
 800e73c:	b913      	cbnz	r3, 800e744 <_fflush_r+0x10>
 800e73e:	2500      	movs	r5, #0
 800e740:	4628      	mov	r0, r5
 800e742:	bd38      	pop	{r3, r4, r5, pc}
 800e744:	b118      	cbz	r0, 800e74e <_fflush_r+0x1a>
 800e746:	6a03      	ldr	r3, [r0, #32]
 800e748:	b90b      	cbnz	r3, 800e74e <_fflush_r+0x1a>
 800e74a:	f7fc fd5d 	bl	800b208 <__sinit>
 800e74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0f3      	beq.n	800e73e <_fflush_r+0xa>
 800e756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e758:	07d0      	lsls	r0, r2, #31
 800e75a:	d404      	bmi.n	800e766 <_fflush_r+0x32>
 800e75c:	0599      	lsls	r1, r3, #22
 800e75e:	d402      	bmi.n	800e766 <_fflush_r+0x32>
 800e760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e762:	f7fc ffa0 	bl	800b6a6 <__retarget_lock_acquire_recursive>
 800e766:	4628      	mov	r0, r5
 800e768:	4621      	mov	r1, r4
 800e76a:	f7ff ff5f 	bl	800e62c <__sflush_r>
 800e76e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e770:	07da      	lsls	r2, r3, #31
 800e772:	4605      	mov	r5, r0
 800e774:	d4e4      	bmi.n	800e740 <_fflush_r+0xc>
 800e776:	89a3      	ldrh	r3, [r4, #12]
 800e778:	059b      	lsls	r3, r3, #22
 800e77a:	d4e1      	bmi.n	800e740 <_fflush_r+0xc>
 800e77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e77e:	f7fc ff93 	bl	800b6a8 <__retarget_lock_release_recursive>
 800e782:	e7dd      	b.n	800e740 <_fflush_r+0xc>

0800e784 <__swhatbuf_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	460c      	mov	r4, r1
 800e788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78c:	2900      	cmp	r1, #0
 800e78e:	b096      	sub	sp, #88	@ 0x58
 800e790:	4615      	mov	r5, r2
 800e792:	461e      	mov	r6, r3
 800e794:	da0d      	bge.n	800e7b2 <__swhatbuf_r+0x2e>
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e79c:	f04f 0100 	mov.w	r1, #0
 800e7a0:	bf14      	ite	ne
 800e7a2:	2340      	movne	r3, #64	@ 0x40
 800e7a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	6031      	str	r1, [r6, #0]
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	b016      	add	sp, #88	@ 0x58
 800e7b0:	bd70      	pop	{r4, r5, r6, pc}
 800e7b2:	466a      	mov	r2, sp
 800e7b4:	f000 f91c 	bl	800e9f0 <_fstat_r>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	dbec      	blt.n	800e796 <__swhatbuf_r+0x12>
 800e7bc:	9901      	ldr	r1, [sp, #4]
 800e7be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7c6:	4259      	negs	r1, r3
 800e7c8:	4159      	adcs	r1, r3
 800e7ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7ce:	e7eb      	b.n	800e7a8 <__swhatbuf_r+0x24>

0800e7d0 <__smakebuf_r>:
 800e7d0:	898b      	ldrh	r3, [r1, #12]
 800e7d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7d4:	079d      	lsls	r5, r3, #30
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	460c      	mov	r4, r1
 800e7da:	d507      	bpl.n	800e7ec <__smakebuf_r+0x1c>
 800e7dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7e0:	6023      	str	r3, [r4, #0]
 800e7e2:	6123      	str	r3, [r4, #16]
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	6163      	str	r3, [r4, #20]
 800e7e8:	b003      	add	sp, #12
 800e7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ec:	ab01      	add	r3, sp, #4
 800e7ee:	466a      	mov	r2, sp
 800e7f0:	f7ff ffc8 	bl	800e784 <__swhatbuf_r>
 800e7f4:	9f00      	ldr	r7, [sp, #0]
 800e7f6:	4605      	mov	r5, r0
 800e7f8:	4639      	mov	r1, r7
 800e7fa:	4630      	mov	r0, r6
 800e7fc:	f7fd fe1c 	bl	800c438 <_malloc_r>
 800e800:	b948      	cbnz	r0, 800e816 <__smakebuf_r+0x46>
 800e802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e806:	059a      	lsls	r2, r3, #22
 800e808:	d4ee      	bmi.n	800e7e8 <__smakebuf_r+0x18>
 800e80a:	f023 0303 	bic.w	r3, r3, #3
 800e80e:	f043 0302 	orr.w	r3, r3, #2
 800e812:	81a3      	strh	r3, [r4, #12]
 800e814:	e7e2      	b.n	800e7dc <__smakebuf_r+0xc>
 800e816:	89a3      	ldrh	r3, [r4, #12]
 800e818:	6020      	str	r0, [r4, #0]
 800e81a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e826:	b15b      	cbz	r3, 800e840 <__smakebuf_r+0x70>
 800e828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e82c:	4630      	mov	r0, r6
 800e82e:	f000 f8f1 	bl	800ea14 <_isatty_r>
 800e832:	b128      	cbz	r0, 800e840 <__smakebuf_r+0x70>
 800e834:	89a3      	ldrh	r3, [r4, #12]
 800e836:	f023 0303 	bic.w	r3, r3, #3
 800e83a:	f043 0301 	orr.w	r3, r3, #1
 800e83e:	81a3      	strh	r3, [r4, #12]
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	431d      	orrs	r5, r3
 800e844:	81a5      	strh	r5, [r4, #12]
 800e846:	e7cf      	b.n	800e7e8 <__smakebuf_r+0x18>

0800e848 <_putc_r>:
 800e848:	b570      	push	{r4, r5, r6, lr}
 800e84a:	460d      	mov	r5, r1
 800e84c:	4614      	mov	r4, r2
 800e84e:	4606      	mov	r6, r0
 800e850:	b118      	cbz	r0, 800e85a <_putc_r+0x12>
 800e852:	6a03      	ldr	r3, [r0, #32]
 800e854:	b90b      	cbnz	r3, 800e85a <_putc_r+0x12>
 800e856:	f7fc fcd7 	bl	800b208 <__sinit>
 800e85a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e85c:	07d8      	lsls	r0, r3, #31
 800e85e:	d405      	bmi.n	800e86c <_putc_r+0x24>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	0599      	lsls	r1, r3, #22
 800e864:	d402      	bmi.n	800e86c <_putc_r+0x24>
 800e866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e868:	f7fc ff1d 	bl	800b6a6 <__retarget_lock_acquire_recursive>
 800e86c:	68a3      	ldr	r3, [r4, #8]
 800e86e:	3b01      	subs	r3, #1
 800e870:	2b00      	cmp	r3, #0
 800e872:	60a3      	str	r3, [r4, #8]
 800e874:	da05      	bge.n	800e882 <_putc_r+0x3a>
 800e876:	69a2      	ldr	r2, [r4, #24]
 800e878:	4293      	cmp	r3, r2
 800e87a:	db12      	blt.n	800e8a2 <_putc_r+0x5a>
 800e87c:	b2eb      	uxtb	r3, r5
 800e87e:	2b0a      	cmp	r3, #10
 800e880:	d00f      	beq.n	800e8a2 <_putc_r+0x5a>
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	6022      	str	r2, [r4, #0]
 800e888:	701d      	strb	r5, [r3, #0]
 800e88a:	b2ed      	uxtb	r5, r5
 800e88c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e88e:	07da      	lsls	r2, r3, #31
 800e890:	d405      	bmi.n	800e89e <_putc_r+0x56>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	059b      	lsls	r3, r3, #22
 800e896:	d402      	bmi.n	800e89e <_putc_r+0x56>
 800e898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e89a:	f7fc ff05 	bl	800b6a8 <__retarget_lock_release_recursive>
 800e89e:	4628      	mov	r0, r5
 800e8a0:	bd70      	pop	{r4, r5, r6, pc}
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f7fc fdeb 	bl	800b482 <__swbuf_r>
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	e7ed      	b.n	800e88c <_putc_r+0x44>

0800e8b0 <__sccl>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	780b      	ldrb	r3, [r1, #0]
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	2b5e      	cmp	r3, #94	@ 0x5e
 800e8b8:	bf0b      	itete	eq
 800e8ba:	784b      	ldrbeq	r3, [r1, #1]
 800e8bc:	1c4a      	addne	r2, r1, #1
 800e8be:	1c8a      	addeq	r2, r1, #2
 800e8c0:	2100      	movne	r1, #0
 800e8c2:	bf08      	it	eq
 800e8c4:	2101      	moveq	r1, #1
 800e8c6:	3801      	subs	r0, #1
 800e8c8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e8cc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e8d0:	42a8      	cmp	r0, r5
 800e8d2:	d1fb      	bne.n	800e8cc <__sccl+0x1c>
 800e8d4:	b90b      	cbnz	r3, 800e8da <__sccl+0x2a>
 800e8d6:	1e50      	subs	r0, r2, #1
 800e8d8:	bd70      	pop	{r4, r5, r6, pc}
 800e8da:	f081 0101 	eor.w	r1, r1, #1
 800e8de:	54e1      	strb	r1, [r4, r3]
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e8e8:	2d2d      	cmp	r5, #45	@ 0x2d
 800e8ea:	d005      	beq.n	800e8f8 <__sccl+0x48>
 800e8ec:	2d5d      	cmp	r5, #93	@ 0x5d
 800e8ee:	d016      	beq.n	800e91e <__sccl+0x6e>
 800e8f0:	2d00      	cmp	r5, #0
 800e8f2:	d0f1      	beq.n	800e8d8 <__sccl+0x28>
 800e8f4:	462b      	mov	r3, r5
 800e8f6:	e7f2      	b.n	800e8de <__sccl+0x2e>
 800e8f8:	7846      	ldrb	r6, [r0, #1]
 800e8fa:	2e5d      	cmp	r6, #93	@ 0x5d
 800e8fc:	d0fa      	beq.n	800e8f4 <__sccl+0x44>
 800e8fe:	42b3      	cmp	r3, r6
 800e900:	dcf8      	bgt.n	800e8f4 <__sccl+0x44>
 800e902:	3002      	adds	r0, #2
 800e904:	461a      	mov	r2, r3
 800e906:	3201      	adds	r2, #1
 800e908:	4296      	cmp	r6, r2
 800e90a:	54a1      	strb	r1, [r4, r2]
 800e90c:	dcfb      	bgt.n	800e906 <__sccl+0x56>
 800e90e:	1af2      	subs	r2, r6, r3
 800e910:	3a01      	subs	r2, #1
 800e912:	1c5d      	adds	r5, r3, #1
 800e914:	42b3      	cmp	r3, r6
 800e916:	bfa8      	it	ge
 800e918:	2200      	movge	r2, #0
 800e91a:	18ab      	adds	r3, r5, r2
 800e91c:	e7e1      	b.n	800e8e2 <__sccl+0x32>
 800e91e:	4610      	mov	r0, r2
 800e920:	e7da      	b.n	800e8d8 <__sccl+0x28>

0800e922 <__submore>:
 800e922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e926:	460c      	mov	r4, r1
 800e928:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e92a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e92e:	4299      	cmp	r1, r3
 800e930:	d11d      	bne.n	800e96e <__submore+0x4c>
 800e932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e936:	f7fd fd7f 	bl	800c438 <_malloc_r>
 800e93a:	b918      	cbnz	r0, 800e944 <__submore+0x22>
 800e93c:	f04f 30ff 	mov.w	r0, #4294967295
 800e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e948:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e94a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e94e:	6360      	str	r0, [r4, #52]	@ 0x34
 800e950:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e954:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e958:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e95c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e960:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e964:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e968:	6020      	str	r0, [r4, #0]
 800e96a:	2000      	movs	r0, #0
 800e96c:	e7e8      	b.n	800e940 <__submore+0x1e>
 800e96e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e970:	0077      	lsls	r7, r6, #1
 800e972:	463a      	mov	r2, r7
 800e974:	f000 fc01 	bl	800f17a <_realloc_r>
 800e978:	4605      	mov	r5, r0
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d0de      	beq.n	800e93c <__submore+0x1a>
 800e97e:	eb00 0806 	add.w	r8, r0, r6
 800e982:	4601      	mov	r1, r0
 800e984:	4632      	mov	r2, r6
 800e986:	4640      	mov	r0, r8
 800e988:	f000 f864 	bl	800ea54 <memcpy>
 800e98c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e990:	f8c4 8000 	str.w	r8, [r4]
 800e994:	e7e9      	b.n	800e96a <__submore+0x48>

0800e996 <memmove>:
 800e996:	4288      	cmp	r0, r1
 800e998:	b510      	push	{r4, lr}
 800e99a:	eb01 0402 	add.w	r4, r1, r2
 800e99e:	d902      	bls.n	800e9a6 <memmove+0x10>
 800e9a0:	4284      	cmp	r4, r0
 800e9a2:	4623      	mov	r3, r4
 800e9a4:	d807      	bhi.n	800e9b6 <memmove+0x20>
 800e9a6:	1e43      	subs	r3, r0, #1
 800e9a8:	42a1      	cmp	r1, r4
 800e9aa:	d008      	beq.n	800e9be <memmove+0x28>
 800e9ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9b4:	e7f8      	b.n	800e9a8 <memmove+0x12>
 800e9b6:	4402      	add	r2, r0
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	428a      	cmp	r2, r1
 800e9bc:	d100      	bne.n	800e9c0 <memmove+0x2a>
 800e9be:	bd10      	pop	{r4, pc}
 800e9c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9c8:	e7f7      	b.n	800e9ba <memmove+0x24>

0800e9ca <strncmp>:
 800e9ca:	b510      	push	{r4, lr}
 800e9cc:	b16a      	cbz	r2, 800e9ea <strncmp+0x20>
 800e9ce:	3901      	subs	r1, #1
 800e9d0:	1884      	adds	r4, r0, r2
 800e9d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d103      	bne.n	800e9e6 <strncmp+0x1c>
 800e9de:	42a0      	cmp	r0, r4
 800e9e0:	d001      	beq.n	800e9e6 <strncmp+0x1c>
 800e9e2:	2a00      	cmp	r2, #0
 800e9e4:	d1f5      	bne.n	800e9d2 <strncmp+0x8>
 800e9e6:	1ad0      	subs	r0, r2, r3
 800e9e8:	bd10      	pop	{r4, pc}
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	e7fc      	b.n	800e9e8 <strncmp+0x1e>
	...

0800e9f0 <_fstat_r>:
 800e9f0:	b538      	push	{r3, r4, r5, lr}
 800e9f2:	4d07      	ldr	r5, [pc, #28]	@ (800ea10 <_fstat_r+0x20>)
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	4604      	mov	r4, r0
 800e9f8:	4608      	mov	r0, r1
 800e9fa:	4611      	mov	r1, r2
 800e9fc:	602b      	str	r3, [r5, #0]
 800e9fe:	f7f5 fd59 	bl	80044b4 <_fstat>
 800ea02:	1c43      	adds	r3, r0, #1
 800ea04:	d102      	bne.n	800ea0c <_fstat_r+0x1c>
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	b103      	cbz	r3, 800ea0c <_fstat_r+0x1c>
 800ea0a:	6023      	str	r3, [r4, #0]
 800ea0c:	bd38      	pop	{r3, r4, r5, pc}
 800ea0e:	bf00      	nop
 800ea10:	20000e84 	.word	0x20000e84

0800ea14 <_isatty_r>:
 800ea14:	b538      	push	{r3, r4, r5, lr}
 800ea16:	4d06      	ldr	r5, [pc, #24]	@ (800ea30 <_isatty_r+0x1c>)
 800ea18:	2300      	movs	r3, #0
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	4608      	mov	r0, r1
 800ea1e:	602b      	str	r3, [r5, #0]
 800ea20:	f7f5 fd58 	bl	80044d4 <_isatty>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d102      	bne.n	800ea2e <_isatty_r+0x1a>
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	b103      	cbz	r3, 800ea2e <_isatty_r+0x1a>
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	bd38      	pop	{r3, r4, r5, pc}
 800ea30:	20000e84 	.word	0x20000e84

0800ea34 <_sbrk_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	4d06      	ldr	r5, [pc, #24]	@ (800ea50 <_sbrk_r+0x1c>)
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	4608      	mov	r0, r1
 800ea3e:	602b      	str	r3, [r5, #0]
 800ea40:	f7f5 fd60 	bl	8004504 <_sbrk>
 800ea44:	1c43      	adds	r3, r0, #1
 800ea46:	d102      	bne.n	800ea4e <_sbrk_r+0x1a>
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	b103      	cbz	r3, 800ea4e <_sbrk_r+0x1a>
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}
 800ea50:	20000e84 	.word	0x20000e84

0800ea54 <memcpy>:
 800ea54:	440a      	add	r2, r1
 800ea56:	4291      	cmp	r1, r2
 800ea58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea5c:	d100      	bne.n	800ea60 <memcpy+0xc>
 800ea5e:	4770      	bx	lr
 800ea60:	b510      	push	{r4, lr}
 800ea62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea6a:	4291      	cmp	r1, r2
 800ea6c:	d1f9      	bne.n	800ea62 <memcpy+0xe>
 800ea6e:	bd10      	pop	{r4, pc}

0800ea70 <nan>:
 800ea70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ea78 <nan+0x8>
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	00000000 	.word	0x00000000
 800ea7c:	7ff80000 	.word	0x7ff80000

0800ea80 <__assert_func>:
 800ea80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea82:	4614      	mov	r4, r2
 800ea84:	461a      	mov	r2, r3
 800ea86:	4b09      	ldr	r3, [pc, #36]	@ (800eaac <__assert_func+0x2c>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4605      	mov	r5, r0
 800ea8c:	68d8      	ldr	r0, [r3, #12]
 800ea8e:	b954      	cbnz	r4, 800eaa6 <__assert_func+0x26>
 800ea90:	4b07      	ldr	r3, [pc, #28]	@ (800eab0 <__assert_func+0x30>)
 800ea92:	461c      	mov	r4, r3
 800ea94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea98:	9100      	str	r1, [sp, #0]
 800ea9a:	462b      	mov	r3, r5
 800ea9c:	4905      	ldr	r1, [pc, #20]	@ (800eab4 <__assert_func+0x34>)
 800ea9e:	f000 fc19 	bl	800f2d4 <fiprintf>
 800eaa2:	f000 fc29 	bl	800f2f8 <abort>
 800eaa6:	4b04      	ldr	r3, [pc, #16]	@ (800eab8 <__assert_func+0x38>)
 800eaa8:	e7f4      	b.n	800ea94 <__assert_func+0x14>
 800eaaa:	bf00      	nop
 800eaac:	20000034 	.word	0x20000034
 800eab0:	0801107f 	.word	0x0801107f
 800eab4:	08011051 	.word	0x08011051
 800eab8:	08011044 	.word	0x08011044

0800eabc <_calloc_r>:
 800eabc:	b570      	push	{r4, r5, r6, lr}
 800eabe:	fba1 5402 	umull	r5, r4, r1, r2
 800eac2:	b93c      	cbnz	r4, 800ead4 <_calloc_r+0x18>
 800eac4:	4629      	mov	r1, r5
 800eac6:	f7fd fcb7 	bl	800c438 <_malloc_r>
 800eaca:	4606      	mov	r6, r0
 800eacc:	b928      	cbnz	r0, 800eada <_calloc_r+0x1e>
 800eace:	2600      	movs	r6, #0
 800ead0:	4630      	mov	r0, r6
 800ead2:	bd70      	pop	{r4, r5, r6, pc}
 800ead4:	220c      	movs	r2, #12
 800ead6:	6002      	str	r2, [r0, #0]
 800ead8:	e7f9      	b.n	800eace <_calloc_r+0x12>
 800eada:	462a      	mov	r2, r5
 800eadc:	4621      	mov	r1, r4
 800eade:	f7fc fd65 	bl	800b5ac <memset>
 800eae2:	e7f5      	b.n	800ead0 <_calloc_r+0x14>

0800eae4 <rshift>:
 800eae4:	6903      	ldr	r3, [r0, #16]
 800eae6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eaea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eaf2:	f100 0414 	add.w	r4, r0, #20
 800eaf6:	dd45      	ble.n	800eb84 <rshift+0xa0>
 800eaf8:	f011 011f 	ands.w	r1, r1, #31
 800eafc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb04:	d10c      	bne.n	800eb20 <rshift+0x3c>
 800eb06:	f100 0710 	add.w	r7, r0, #16
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	42b1      	cmp	r1, r6
 800eb0e:	d334      	bcc.n	800eb7a <rshift+0x96>
 800eb10:	1a9b      	subs	r3, r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	1eea      	subs	r2, r5, #3
 800eb16:	4296      	cmp	r6, r2
 800eb18:	bf38      	it	cc
 800eb1a:	2300      	movcc	r3, #0
 800eb1c:	4423      	add	r3, r4
 800eb1e:	e015      	b.n	800eb4c <rshift+0x68>
 800eb20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb24:	f1c1 0820 	rsb	r8, r1, #32
 800eb28:	40cf      	lsrs	r7, r1
 800eb2a:	f105 0e04 	add.w	lr, r5, #4
 800eb2e:	46a1      	mov	r9, r4
 800eb30:	4576      	cmp	r6, lr
 800eb32:	46f4      	mov	ip, lr
 800eb34:	d815      	bhi.n	800eb62 <rshift+0x7e>
 800eb36:	1a9a      	subs	r2, r3, r2
 800eb38:	0092      	lsls	r2, r2, #2
 800eb3a:	3a04      	subs	r2, #4
 800eb3c:	3501      	adds	r5, #1
 800eb3e:	42ae      	cmp	r6, r5
 800eb40:	bf38      	it	cc
 800eb42:	2200      	movcc	r2, #0
 800eb44:	18a3      	adds	r3, r4, r2
 800eb46:	50a7      	str	r7, [r4, r2]
 800eb48:	b107      	cbz	r7, 800eb4c <rshift+0x68>
 800eb4a:	3304      	adds	r3, #4
 800eb4c:	1b1a      	subs	r2, r3, r4
 800eb4e:	42a3      	cmp	r3, r4
 800eb50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb54:	bf08      	it	eq
 800eb56:	2300      	moveq	r3, #0
 800eb58:	6102      	str	r2, [r0, #16]
 800eb5a:	bf08      	it	eq
 800eb5c:	6143      	streq	r3, [r0, #20]
 800eb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb62:	f8dc c000 	ldr.w	ip, [ip]
 800eb66:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb6a:	ea4c 0707 	orr.w	r7, ip, r7
 800eb6e:	f849 7b04 	str.w	r7, [r9], #4
 800eb72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb76:	40cf      	lsrs	r7, r1
 800eb78:	e7da      	b.n	800eb30 <rshift+0x4c>
 800eb7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb82:	e7c3      	b.n	800eb0c <rshift+0x28>
 800eb84:	4623      	mov	r3, r4
 800eb86:	e7e1      	b.n	800eb4c <rshift+0x68>

0800eb88 <__hexdig_fun>:
 800eb88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d802      	bhi.n	800eb96 <__hexdig_fun+0xe>
 800eb90:	3820      	subs	r0, #32
 800eb92:	b2c0      	uxtb	r0, r0
 800eb94:	4770      	bx	lr
 800eb96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800eb9a:	2b05      	cmp	r3, #5
 800eb9c:	d801      	bhi.n	800eba2 <__hexdig_fun+0x1a>
 800eb9e:	3847      	subs	r0, #71	@ 0x47
 800eba0:	e7f7      	b.n	800eb92 <__hexdig_fun+0xa>
 800eba2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eba6:	2b05      	cmp	r3, #5
 800eba8:	d801      	bhi.n	800ebae <__hexdig_fun+0x26>
 800ebaa:	3827      	subs	r0, #39	@ 0x27
 800ebac:	e7f1      	b.n	800eb92 <__hexdig_fun+0xa>
 800ebae:	2000      	movs	r0, #0
 800ebb0:	4770      	bx	lr
	...

0800ebb4 <__gethex>:
 800ebb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb8:	b085      	sub	sp, #20
 800ebba:	468a      	mov	sl, r1
 800ebbc:	9302      	str	r3, [sp, #8]
 800ebbe:	680b      	ldr	r3, [r1, #0]
 800ebc0:	9001      	str	r0, [sp, #4]
 800ebc2:	4690      	mov	r8, r2
 800ebc4:	1c9c      	adds	r4, r3, #2
 800ebc6:	46a1      	mov	r9, r4
 800ebc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ebcc:	2830      	cmp	r0, #48	@ 0x30
 800ebce:	d0fa      	beq.n	800ebc6 <__gethex+0x12>
 800ebd0:	eba9 0303 	sub.w	r3, r9, r3
 800ebd4:	f1a3 0b02 	sub.w	fp, r3, #2
 800ebd8:	f7ff ffd6 	bl	800eb88 <__hexdig_fun>
 800ebdc:	4605      	mov	r5, r0
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d168      	bne.n	800ecb4 <__gethex+0x100>
 800ebe2:	49a0      	ldr	r1, [pc, #640]	@ (800ee64 <__gethex+0x2b0>)
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	4648      	mov	r0, r9
 800ebe8:	f7ff feef 	bl	800e9ca <strncmp>
 800ebec:	4607      	mov	r7, r0
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d167      	bne.n	800ecc2 <__gethex+0x10e>
 800ebf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ebf6:	4626      	mov	r6, r4
 800ebf8:	f7ff ffc6 	bl	800eb88 <__hexdig_fun>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d062      	beq.n	800ecc6 <__gethex+0x112>
 800ec00:	4623      	mov	r3, r4
 800ec02:	7818      	ldrb	r0, [r3, #0]
 800ec04:	2830      	cmp	r0, #48	@ 0x30
 800ec06:	4699      	mov	r9, r3
 800ec08:	f103 0301 	add.w	r3, r3, #1
 800ec0c:	d0f9      	beq.n	800ec02 <__gethex+0x4e>
 800ec0e:	f7ff ffbb 	bl	800eb88 <__hexdig_fun>
 800ec12:	fab0 f580 	clz	r5, r0
 800ec16:	096d      	lsrs	r5, r5, #5
 800ec18:	f04f 0b01 	mov.w	fp, #1
 800ec1c:	464a      	mov	r2, r9
 800ec1e:	4616      	mov	r6, r2
 800ec20:	3201      	adds	r2, #1
 800ec22:	7830      	ldrb	r0, [r6, #0]
 800ec24:	f7ff ffb0 	bl	800eb88 <__hexdig_fun>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d1f8      	bne.n	800ec1e <__gethex+0x6a>
 800ec2c:	498d      	ldr	r1, [pc, #564]	@ (800ee64 <__gethex+0x2b0>)
 800ec2e:	2201      	movs	r2, #1
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7ff feca 	bl	800e9ca <strncmp>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d13f      	bne.n	800ecba <__gethex+0x106>
 800ec3a:	b944      	cbnz	r4, 800ec4e <__gethex+0x9a>
 800ec3c:	1c74      	adds	r4, r6, #1
 800ec3e:	4622      	mov	r2, r4
 800ec40:	4616      	mov	r6, r2
 800ec42:	3201      	adds	r2, #1
 800ec44:	7830      	ldrb	r0, [r6, #0]
 800ec46:	f7ff ff9f 	bl	800eb88 <__hexdig_fun>
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d1f8      	bne.n	800ec40 <__gethex+0x8c>
 800ec4e:	1ba4      	subs	r4, r4, r6
 800ec50:	00a7      	lsls	r7, r4, #2
 800ec52:	7833      	ldrb	r3, [r6, #0]
 800ec54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ec58:	2b50      	cmp	r3, #80	@ 0x50
 800ec5a:	d13e      	bne.n	800ecda <__gethex+0x126>
 800ec5c:	7873      	ldrb	r3, [r6, #1]
 800ec5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec60:	d033      	beq.n	800ecca <__gethex+0x116>
 800ec62:	2b2d      	cmp	r3, #45	@ 0x2d
 800ec64:	d034      	beq.n	800ecd0 <__gethex+0x11c>
 800ec66:	1c71      	adds	r1, r6, #1
 800ec68:	2400      	movs	r4, #0
 800ec6a:	7808      	ldrb	r0, [r1, #0]
 800ec6c:	f7ff ff8c 	bl	800eb88 <__hexdig_fun>
 800ec70:	1e43      	subs	r3, r0, #1
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b18      	cmp	r3, #24
 800ec76:	d830      	bhi.n	800ecda <__gethex+0x126>
 800ec78:	f1a0 0210 	sub.w	r2, r0, #16
 800ec7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec80:	f7ff ff82 	bl	800eb88 <__hexdig_fun>
 800ec84:	f100 3cff 	add.w	ip, r0, #4294967295
 800ec88:	fa5f fc8c 	uxtb.w	ip, ip
 800ec8c:	f1bc 0f18 	cmp.w	ip, #24
 800ec90:	f04f 030a 	mov.w	r3, #10
 800ec94:	d91e      	bls.n	800ecd4 <__gethex+0x120>
 800ec96:	b104      	cbz	r4, 800ec9a <__gethex+0xe6>
 800ec98:	4252      	negs	r2, r2
 800ec9a:	4417      	add	r7, r2
 800ec9c:	f8ca 1000 	str.w	r1, [sl]
 800eca0:	b1ed      	cbz	r5, 800ecde <__gethex+0x12a>
 800eca2:	f1bb 0f00 	cmp.w	fp, #0
 800eca6:	bf0c      	ite	eq
 800eca8:	2506      	moveq	r5, #6
 800ecaa:	2500      	movne	r5, #0
 800ecac:	4628      	mov	r0, r5
 800ecae:	b005      	add	sp, #20
 800ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb4:	2500      	movs	r5, #0
 800ecb6:	462c      	mov	r4, r5
 800ecb8:	e7b0      	b.n	800ec1c <__gethex+0x68>
 800ecba:	2c00      	cmp	r4, #0
 800ecbc:	d1c7      	bne.n	800ec4e <__gethex+0x9a>
 800ecbe:	4627      	mov	r7, r4
 800ecc0:	e7c7      	b.n	800ec52 <__gethex+0x9e>
 800ecc2:	464e      	mov	r6, r9
 800ecc4:	462f      	mov	r7, r5
 800ecc6:	2501      	movs	r5, #1
 800ecc8:	e7c3      	b.n	800ec52 <__gethex+0x9e>
 800ecca:	2400      	movs	r4, #0
 800eccc:	1cb1      	adds	r1, r6, #2
 800ecce:	e7cc      	b.n	800ec6a <__gethex+0xb6>
 800ecd0:	2401      	movs	r4, #1
 800ecd2:	e7fb      	b.n	800eccc <__gethex+0x118>
 800ecd4:	fb03 0002 	mla	r0, r3, r2, r0
 800ecd8:	e7ce      	b.n	800ec78 <__gethex+0xc4>
 800ecda:	4631      	mov	r1, r6
 800ecdc:	e7de      	b.n	800ec9c <__gethex+0xe8>
 800ecde:	eba6 0309 	sub.w	r3, r6, r9
 800ece2:	3b01      	subs	r3, #1
 800ece4:	4629      	mov	r1, r5
 800ece6:	2b07      	cmp	r3, #7
 800ece8:	dc0a      	bgt.n	800ed00 <__gethex+0x14c>
 800ecea:	9801      	ldr	r0, [sp, #4]
 800ecec:	f7fd fc30 	bl	800c550 <_Balloc>
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	b940      	cbnz	r0, 800ed06 <__gethex+0x152>
 800ecf4:	4b5c      	ldr	r3, [pc, #368]	@ (800ee68 <__gethex+0x2b4>)
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	21e4      	movs	r1, #228	@ 0xe4
 800ecfa:	485c      	ldr	r0, [pc, #368]	@ (800ee6c <__gethex+0x2b8>)
 800ecfc:	f7ff fec0 	bl	800ea80 <__assert_func>
 800ed00:	3101      	adds	r1, #1
 800ed02:	105b      	asrs	r3, r3, #1
 800ed04:	e7ef      	b.n	800ece6 <__gethex+0x132>
 800ed06:	f100 0a14 	add.w	sl, r0, #20
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	4655      	mov	r5, sl
 800ed0e:	469b      	mov	fp, r3
 800ed10:	45b1      	cmp	r9, r6
 800ed12:	d337      	bcc.n	800ed84 <__gethex+0x1d0>
 800ed14:	f845 bb04 	str.w	fp, [r5], #4
 800ed18:	eba5 050a 	sub.w	r5, r5, sl
 800ed1c:	10ad      	asrs	r5, r5, #2
 800ed1e:	6125      	str	r5, [r4, #16]
 800ed20:	4658      	mov	r0, fp
 800ed22:	f7fd fd07 	bl	800c734 <__hi0bits>
 800ed26:	016d      	lsls	r5, r5, #5
 800ed28:	f8d8 6000 	ldr.w	r6, [r8]
 800ed2c:	1a2d      	subs	r5, r5, r0
 800ed2e:	42b5      	cmp	r5, r6
 800ed30:	dd54      	ble.n	800eddc <__gethex+0x228>
 800ed32:	1bad      	subs	r5, r5, r6
 800ed34:	4629      	mov	r1, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	f7fe f89b 	bl	800ce72 <__any_on>
 800ed3c:	4681      	mov	r9, r0
 800ed3e:	b178      	cbz	r0, 800ed60 <__gethex+0x1ac>
 800ed40:	1e6b      	subs	r3, r5, #1
 800ed42:	1159      	asrs	r1, r3, #5
 800ed44:	f003 021f 	and.w	r2, r3, #31
 800ed48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ed4c:	f04f 0901 	mov.w	r9, #1
 800ed50:	fa09 f202 	lsl.w	r2, r9, r2
 800ed54:	420a      	tst	r2, r1
 800ed56:	d003      	beq.n	800ed60 <__gethex+0x1ac>
 800ed58:	454b      	cmp	r3, r9
 800ed5a:	dc36      	bgt.n	800edca <__gethex+0x216>
 800ed5c:	f04f 0902 	mov.w	r9, #2
 800ed60:	4629      	mov	r1, r5
 800ed62:	4620      	mov	r0, r4
 800ed64:	f7ff febe 	bl	800eae4 <rshift>
 800ed68:	442f      	add	r7, r5
 800ed6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed6e:	42bb      	cmp	r3, r7
 800ed70:	da42      	bge.n	800edf8 <__gethex+0x244>
 800ed72:	9801      	ldr	r0, [sp, #4]
 800ed74:	4621      	mov	r1, r4
 800ed76:	f7fd fc2b 	bl	800c5d0 <_Bfree>
 800ed7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	25a3      	movs	r5, #163	@ 0xa3
 800ed82:	e793      	b.n	800ecac <__gethex+0xf8>
 800ed84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ed88:	2a2e      	cmp	r2, #46	@ 0x2e
 800ed8a:	d012      	beq.n	800edb2 <__gethex+0x1fe>
 800ed8c:	2b20      	cmp	r3, #32
 800ed8e:	d104      	bne.n	800ed9a <__gethex+0x1e6>
 800ed90:	f845 bb04 	str.w	fp, [r5], #4
 800ed94:	f04f 0b00 	mov.w	fp, #0
 800ed98:	465b      	mov	r3, fp
 800ed9a:	7830      	ldrb	r0, [r6, #0]
 800ed9c:	9303      	str	r3, [sp, #12]
 800ed9e:	f7ff fef3 	bl	800eb88 <__hexdig_fun>
 800eda2:	9b03      	ldr	r3, [sp, #12]
 800eda4:	f000 000f 	and.w	r0, r0, #15
 800eda8:	4098      	lsls	r0, r3
 800edaa:	ea4b 0b00 	orr.w	fp, fp, r0
 800edae:	3304      	adds	r3, #4
 800edb0:	e7ae      	b.n	800ed10 <__gethex+0x15c>
 800edb2:	45b1      	cmp	r9, r6
 800edb4:	d8ea      	bhi.n	800ed8c <__gethex+0x1d8>
 800edb6:	492b      	ldr	r1, [pc, #172]	@ (800ee64 <__gethex+0x2b0>)
 800edb8:	9303      	str	r3, [sp, #12]
 800edba:	2201      	movs	r2, #1
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff fe04 	bl	800e9ca <strncmp>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d1e1      	bne.n	800ed8c <__gethex+0x1d8>
 800edc8:	e7a2      	b.n	800ed10 <__gethex+0x15c>
 800edca:	1ea9      	subs	r1, r5, #2
 800edcc:	4620      	mov	r0, r4
 800edce:	f7fe f850 	bl	800ce72 <__any_on>
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d0c2      	beq.n	800ed5c <__gethex+0x1a8>
 800edd6:	f04f 0903 	mov.w	r9, #3
 800edda:	e7c1      	b.n	800ed60 <__gethex+0x1ac>
 800eddc:	da09      	bge.n	800edf2 <__gethex+0x23e>
 800edde:	1b75      	subs	r5, r6, r5
 800ede0:	4621      	mov	r1, r4
 800ede2:	9801      	ldr	r0, [sp, #4]
 800ede4:	462a      	mov	r2, r5
 800ede6:	f7fd fe0b 	bl	800ca00 <__lshift>
 800edea:	1b7f      	subs	r7, r7, r5
 800edec:	4604      	mov	r4, r0
 800edee:	f100 0a14 	add.w	sl, r0, #20
 800edf2:	f04f 0900 	mov.w	r9, #0
 800edf6:	e7b8      	b.n	800ed6a <__gethex+0x1b6>
 800edf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800edfc:	42bd      	cmp	r5, r7
 800edfe:	dd6f      	ble.n	800eee0 <__gethex+0x32c>
 800ee00:	1bed      	subs	r5, r5, r7
 800ee02:	42ae      	cmp	r6, r5
 800ee04:	dc34      	bgt.n	800ee70 <__gethex+0x2bc>
 800ee06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee0a:	2b02      	cmp	r3, #2
 800ee0c:	d022      	beq.n	800ee54 <__gethex+0x2a0>
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d024      	beq.n	800ee5c <__gethex+0x2a8>
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d115      	bne.n	800ee42 <__gethex+0x28e>
 800ee16:	42ae      	cmp	r6, r5
 800ee18:	d113      	bne.n	800ee42 <__gethex+0x28e>
 800ee1a:	2e01      	cmp	r6, #1
 800ee1c:	d10b      	bne.n	800ee36 <__gethex+0x282>
 800ee1e:	9a02      	ldr	r2, [sp, #8]
 800ee20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	2301      	movs	r3, #1
 800ee28:	6123      	str	r3, [r4, #16]
 800ee2a:	f8ca 3000 	str.w	r3, [sl]
 800ee2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee30:	2562      	movs	r5, #98	@ 0x62
 800ee32:	601c      	str	r4, [r3, #0]
 800ee34:	e73a      	b.n	800ecac <__gethex+0xf8>
 800ee36:	1e71      	subs	r1, r6, #1
 800ee38:	4620      	mov	r0, r4
 800ee3a:	f7fe f81a 	bl	800ce72 <__any_on>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d1ed      	bne.n	800ee1e <__gethex+0x26a>
 800ee42:	9801      	ldr	r0, [sp, #4]
 800ee44:	4621      	mov	r1, r4
 800ee46:	f7fd fbc3 	bl	800c5d0 <_Bfree>
 800ee4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	6013      	str	r3, [r2, #0]
 800ee50:	2550      	movs	r5, #80	@ 0x50
 800ee52:	e72b      	b.n	800ecac <__gethex+0xf8>
 800ee54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1f3      	bne.n	800ee42 <__gethex+0x28e>
 800ee5a:	e7e0      	b.n	800ee1e <__gethex+0x26a>
 800ee5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1dd      	bne.n	800ee1e <__gethex+0x26a>
 800ee62:	e7ee      	b.n	800ee42 <__gethex+0x28e>
 800ee64:	08010fb8 	.word	0x08010fb8
 800ee68:	08010e50 	.word	0x08010e50
 800ee6c:	08011080 	.word	0x08011080
 800ee70:	1e6f      	subs	r7, r5, #1
 800ee72:	f1b9 0f00 	cmp.w	r9, #0
 800ee76:	d130      	bne.n	800eeda <__gethex+0x326>
 800ee78:	b127      	cbz	r7, 800ee84 <__gethex+0x2d0>
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f7fd fff8 	bl	800ce72 <__any_on>
 800ee82:	4681      	mov	r9, r0
 800ee84:	117a      	asrs	r2, r7, #5
 800ee86:	2301      	movs	r3, #1
 800ee88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ee8c:	f007 071f 	and.w	r7, r7, #31
 800ee90:	40bb      	lsls	r3, r7
 800ee92:	4213      	tst	r3, r2
 800ee94:	4629      	mov	r1, r5
 800ee96:	4620      	mov	r0, r4
 800ee98:	bf18      	it	ne
 800ee9a:	f049 0902 	orrne.w	r9, r9, #2
 800ee9e:	f7ff fe21 	bl	800eae4 <rshift>
 800eea2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eea6:	1b76      	subs	r6, r6, r5
 800eea8:	2502      	movs	r5, #2
 800eeaa:	f1b9 0f00 	cmp.w	r9, #0
 800eeae:	d047      	beq.n	800ef40 <__gethex+0x38c>
 800eeb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d015      	beq.n	800eee4 <__gethex+0x330>
 800eeb8:	2b03      	cmp	r3, #3
 800eeba:	d017      	beq.n	800eeec <__gethex+0x338>
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d109      	bne.n	800eed4 <__gethex+0x320>
 800eec0:	f019 0f02 	tst.w	r9, #2
 800eec4:	d006      	beq.n	800eed4 <__gethex+0x320>
 800eec6:	f8da 3000 	ldr.w	r3, [sl]
 800eeca:	ea49 0903 	orr.w	r9, r9, r3
 800eece:	f019 0f01 	tst.w	r9, #1
 800eed2:	d10e      	bne.n	800eef2 <__gethex+0x33e>
 800eed4:	f045 0510 	orr.w	r5, r5, #16
 800eed8:	e032      	b.n	800ef40 <__gethex+0x38c>
 800eeda:	f04f 0901 	mov.w	r9, #1
 800eede:	e7d1      	b.n	800ee84 <__gethex+0x2d0>
 800eee0:	2501      	movs	r5, #1
 800eee2:	e7e2      	b.n	800eeaa <__gethex+0x2f6>
 800eee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eee6:	f1c3 0301 	rsb	r3, r3, #1
 800eeea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d0f0      	beq.n	800eed4 <__gethex+0x320>
 800eef2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eef6:	f104 0314 	add.w	r3, r4, #20
 800eefa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eefe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ef02:	f04f 0c00 	mov.w	ip, #0
 800ef06:	4618      	mov	r0, r3
 800ef08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef10:	d01b      	beq.n	800ef4a <__gethex+0x396>
 800ef12:	3201      	adds	r2, #1
 800ef14:	6002      	str	r2, [r0, #0]
 800ef16:	2d02      	cmp	r5, #2
 800ef18:	f104 0314 	add.w	r3, r4, #20
 800ef1c:	d13c      	bne.n	800ef98 <__gethex+0x3e4>
 800ef1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ef22:	3a01      	subs	r2, #1
 800ef24:	42b2      	cmp	r2, r6
 800ef26:	d109      	bne.n	800ef3c <__gethex+0x388>
 800ef28:	1171      	asrs	r1, r6, #5
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef30:	f006 061f 	and.w	r6, r6, #31
 800ef34:	fa02 f606 	lsl.w	r6, r2, r6
 800ef38:	421e      	tst	r6, r3
 800ef3a:	d13a      	bne.n	800efb2 <__gethex+0x3fe>
 800ef3c:	f045 0520 	orr.w	r5, r5, #32
 800ef40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef42:	601c      	str	r4, [r3, #0]
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	601f      	str	r7, [r3, #0]
 800ef48:	e6b0      	b.n	800ecac <__gethex+0xf8>
 800ef4a:	4299      	cmp	r1, r3
 800ef4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef50:	d8d9      	bhi.n	800ef06 <__gethex+0x352>
 800ef52:	68a3      	ldr	r3, [r4, #8]
 800ef54:	459b      	cmp	fp, r3
 800ef56:	db17      	blt.n	800ef88 <__gethex+0x3d4>
 800ef58:	6861      	ldr	r1, [r4, #4]
 800ef5a:	9801      	ldr	r0, [sp, #4]
 800ef5c:	3101      	adds	r1, #1
 800ef5e:	f7fd faf7 	bl	800c550 <_Balloc>
 800ef62:	4681      	mov	r9, r0
 800ef64:	b918      	cbnz	r0, 800ef6e <__gethex+0x3ba>
 800ef66:	4b1a      	ldr	r3, [pc, #104]	@ (800efd0 <__gethex+0x41c>)
 800ef68:	4602      	mov	r2, r0
 800ef6a:	2184      	movs	r1, #132	@ 0x84
 800ef6c:	e6c5      	b.n	800ecfa <__gethex+0x146>
 800ef6e:	6922      	ldr	r2, [r4, #16]
 800ef70:	3202      	adds	r2, #2
 800ef72:	f104 010c 	add.w	r1, r4, #12
 800ef76:	0092      	lsls	r2, r2, #2
 800ef78:	300c      	adds	r0, #12
 800ef7a:	f7ff fd6b 	bl	800ea54 <memcpy>
 800ef7e:	4621      	mov	r1, r4
 800ef80:	9801      	ldr	r0, [sp, #4]
 800ef82:	f7fd fb25 	bl	800c5d0 <_Bfree>
 800ef86:	464c      	mov	r4, r9
 800ef88:	6923      	ldr	r3, [r4, #16]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef90:	6122      	str	r2, [r4, #16]
 800ef92:	2201      	movs	r2, #1
 800ef94:	615a      	str	r2, [r3, #20]
 800ef96:	e7be      	b.n	800ef16 <__gethex+0x362>
 800ef98:	6922      	ldr	r2, [r4, #16]
 800ef9a:	455a      	cmp	r2, fp
 800ef9c:	dd0b      	ble.n	800efb6 <__gethex+0x402>
 800ef9e:	2101      	movs	r1, #1
 800efa0:	4620      	mov	r0, r4
 800efa2:	f7ff fd9f 	bl	800eae4 <rshift>
 800efa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efaa:	3701      	adds	r7, #1
 800efac:	42bb      	cmp	r3, r7
 800efae:	f6ff aee0 	blt.w	800ed72 <__gethex+0x1be>
 800efb2:	2501      	movs	r5, #1
 800efb4:	e7c2      	b.n	800ef3c <__gethex+0x388>
 800efb6:	f016 061f 	ands.w	r6, r6, #31
 800efba:	d0fa      	beq.n	800efb2 <__gethex+0x3fe>
 800efbc:	4453      	add	r3, sl
 800efbe:	f1c6 0620 	rsb	r6, r6, #32
 800efc2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800efc6:	f7fd fbb5 	bl	800c734 <__hi0bits>
 800efca:	42b0      	cmp	r0, r6
 800efcc:	dbe7      	blt.n	800ef9e <__gethex+0x3ea>
 800efce:	e7f0      	b.n	800efb2 <__gethex+0x3fe>
 800efd0:	08010e50 	.word	0x08010e50

0800efd4 <L_shift>:
 800efd4:	f1c2 0208 	rsb	r2, r2, #8
 800efd8:	0092      	lsls	r2, r2, #2
 800efda:	b570      	push	{r4, r5, r6, lr}
 800efdc:	f1c2 0620 	rsb	r6, r2, #32
 800efe0:	6843      	ldr	r3, [r0, #4]
 800efe2:	6804      	ldr	r4, [r0, #0]
 800efe4:	fa03 f506 	lsl.w	r5, r3, r6
 800efe8:	432c      	orrs	r4, r5
 800efea:	40d3      	lsrs	r3, r2
 800efec:	6004      	str	r4, [r0, #0]
 800efee:	f840 3f04 	str.w	r3, [r0, #4]!
 800eff2:	4288      	cmp	r0, r1
 800eff4:	d3f4      	bcc.n	800efe0 <L_shift+0xc>
 800eff6:	bd70      	pop	{r4, r5, r6, pc}

0800eff8 <__match>:
 800eff8:	b530      	push	{r4, r5, lr}
 800effa:	6803      	ldr	r3, [r0, #0]
 800effc:	3301      	adds	r3, #1
 800effe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f002:	b914      	cbnz	r4, 800f00a <__match+0x12>
 800f004:	6003      	str	r3, [r0, #0]
 800f006:	2001      	movs	r0, #1
 800f008:	bd30      	pop	{r4, r5, pc}
 800f00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f00e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f012:	2d19      	cmp	r5, #25
 800f014:	bf98      	it	ls
 800f016:	3220      	addls	r2, #32
 800f018:	42a2      	cmp	r2, r4
 800f01a:	d0f0      	beq.n	800effe <__match+0x6>
 800f01c:	2000      	movs	r0, #0
 800f01e:	e7f3      	b.n	800f008 <__match+0x10>

0800f020 <__hexnan>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	680b      	ldr	r3, [r1, #0]
 800f026:	6801      	ldr	r1, [r0, #0]
 800f028:	115e      	asrs	r6, r3, #5
 800f02a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f02e:	f013 031f 	ands.w	r3, r3, #31
 800f032:	b087      	sub	sp, #28
 800f034:	bf18      	it	ne
 800f036:	3604      	addne	r6, #4
 800f038:	2500      	movs	r5, #0
 800f03a:	1f37      	subs	r7, r6, #4
 800f03c:	4682      	mov	sl, r0
 800f03e:	4690      	mov	r8, r2
 800f040:	9301      	str	r3, [sp, #4]
 800f042:	f846 5c04 	str.w	r5, [r6, #-4]
 800f046:	46b9      	mov	r9, r7
 800f048:	463c      	mov	r4, r7
 800f04a:	9502      	str	r5, [sp, #8]
 800f04c:	46ab      	mov	fp, r5
 800f04e:	784a      	ldrb	r2, [r1, #1]
 800f050:	1c4b      	adds	r3, r1, #1
 800f052:	9303      	str	r3, [sp, #12]
 800f054:	b342      	cbz	r2, 800f0a8 <__hexnan+0x88>
 800f056:	4610      	mov	r0, r2
 800f058:	9105      	str	r1, [sp, #20]
 800f05a:	9204      	str	r2, [sp, #16]
 800f05c:	f7ff fd94 	bl	800eb88 <__hexdig_fun>
 800f060:	2800      	cmp	r0, #0
 800f062:	d151      	bne.n	800f108 <__hexnan+0xe8>
 800f064:	9a04      	ldr	r2, [sp, #16]
 800f066:	9905      	ldr	r1, [sp, #20]
 800f068:	2a20      	cmp	r2, #32
 800f06a:	d818      	bhi.n	800f09e <__hexnan+0x7e>
 800f06c:	9b02      	ldr	r3, [sp, #8]
 800f06e:	459b      	cmp	fp, r3
 800f070:	dd13      	ble.n	800f09a <__hexnan+0x7a>
 800f072:	454c      	cmp	r4, r9
 800f074:	d206      	bcs.n	800f084 <__hexnan+0x64>
 800f076:	2d07      	cmp	r5, #7
 800f078:	dc04      	bgt.n	800f084 <__hexnan+0x64>
 800f07a:	462a      	mov	r2, r5
 800f07c:	4649      	mov	r1, r9
 800f07e:	4620      	mov	r0, r4
 800f080:	f7ff ffa8 	bl	800efd4 <L_shift>
 800f084:	4544      	cmp	r4, r8
 800f086:	d952      	bls.n	800f12e <__hexnan+0x10e>
 800f088:	2300      	movs	r3, #0
 800f08a:	f1a4 0904 	sub.w	r9, r4, #4
 800f08e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f092:	f8cd b008 	str.w	fp, [sp, #8]
 800f096:	464c      	mov	r4, r9
 800f098:	461d      	mov	r5, r3
 800f09a:	9903      	ldr	r1, [sp, #12]
 800f09c:	e7d7      	b.n	800f04e <__hexnan+0x2e>
 800f09e:	2a29      	cmp	r2, #41	@ 0x29
 800f0a0:	d157      	bne.n	800f152 <__hexnan+0x132>
 800f0a2:	3102      	adds	r1, #2
 800f0a4:	f8ca 1000 	str.w	r1, [sl]
 800f0a8:	f1bb 0f00 	cmp.w	fp, #0
 800f0ac:	d051      	beq.n	800f152 <__hexnan+0x132>
 800f0ae:	454c      	cmp	r4, r9
 800f0b0:	d206      	bcs.n	800f0c0 <__hexnan+0xa0>
 800f0b2:	2d07      	cmp	r5, #7
 800f0b4:	dc04      	bgt.n	800f0c0 <__hexnan+0xa0>
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f7ff ff8a 	bl	800efd4 <L_shift>
 800f0c0:	4544      	cmp	r4, r8
 800f0c2:	d936      	bls.n	800f132 <__hexnan+0x112>
 800f0c4:	f1a8 0204 	sub.w	r2, r8, #4
 800f0c8:	4623      	mov	r3, r4
 800f0ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0d2:	429f      	cmp	r7, r3
 800f0d4:	d2f9      	bcs.n	800f0ca <__hexnan+0xaa>
 800f0d6:	1b3b      	subs	r3, r7, r4
 800f0d8:	f023 0303 	bic.w	r3, r3, #3
 800f0dc:	3304      	adds	r3, #4
 800f0de:	3401      	adds	r4, #1
 800f0e0:	3e03      	subs	r6, #3
 800f0e2:	42b4      	cmp	r4, r6
 800f0e4:	bf88      	it	hi
 800f0e6:	2304      	movhi	r3, #4
 800f0e8:	4443      	add	r3, r8
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f843 2b04 	str.w	r2, [r3], #4
 800f0f0:	429f      	cmp	r7, r3
 800f0f2:	d2fb      	bcs.n	800f0ec <__hexnan+0xcc>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	b91b      	cbnz	r3, 800f100 <__hexnan+0xe0>
 800f0f8:	4547      	cmp	r7, r8
 800f0fa:	d128      	bne.n	800f14e <__hexnan+0x12e>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	603b      	str	r3, [r7, #0]
 800f100:	2005      	movs	r0, #5
 800f102:	b007      	add	sp, #28
 800f104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f108:	3501      	adds	r5, #1
 800f10a:	2d08      	cmp	r5, #8
 800f10c:	f10b 0b01 	add.w	fp, fp, #1
 800f110:	dd06      	ble.n	800f120 <__hexnan+0x100>
 800f112:	4544      	cmp	r4, r8
 800f114:	d9c1      	bls.n	800f09a <__hexnan+0x7a>
 800f116:	2300      	movs	r3, #0
 800f118:	f844 3c04 	str.w	r3, [r4, #-4]
 800f11c:	2501      	movs	r5, #1
 800f11e:	3c04      	subs	r4, #4
 800f120:	6822      	ldr	r2, [r4, #0]
 800f122:	f000 000f 	and.w	r0, r0, #15
 800f126:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f12a:	6020      	str	r0, [r4, #0]
 800f12c:	e7b5      	b.n	800f09a <__hexnan+0x7a>
 800f12e:	2508      	movs	r5, #8
 800f130:	e7b3      	b.n	800f09a <__hexnan+0x7a>
 800f132:	9b01      	ldr	r3, [sp, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0dd      	beq.n	800f0f4 <__hexnan+0xd4>
 800f138:	f1c3 0320 	rsb	r3, r3, #32
 800f13c:	f04f 32ff 	mov.w	r2, #4294967295
 800f140:	40da      	lsrs	r2, r3
 800f142:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f146:	4013      	ands	r3, r2
 800f148:	f846 3c04 	str.w	r3, [r6, #-4]
 800f14c:	e7d2      	b.n	800f0f4 <__hexnan+0xd4>
 800f14e:	3f04      	subs	r7, #4
 800f150:	e7d0      	b.n	800f0f4 <__hexnan+0xd4>
 800f152:	2004      	movs	r0, #4
 800f154:	e7d5      	b.n	800f102 <__hexnan+0xe2>

0800f156 <__ascii_mbtowc>:
 800f156:	b082      	sub	sp, #8
 800f158:	b901      	cbnz	r1, 800f15c <__ascii_mbtowc+0x6>
 800f15a:	a901      	add	r1, sp, #4
 800f15c:	b142      	cbz	r2, 800f170 <__ascii_mbtowc+0x1a>
 800f15e:	b14b      	cbz	r3, 800f174 <__ascii_mbtowc+0x1e>
 800f160:	7813      	ldrb	r3, [r2, #0]
 800f162:	600b      	str	r3, [r1, #0]
 800f164:	7812      	ldrb	r2, [r2, #0]
 800f166:	1e10      	subs	r0, r2, #0
 800f168:	bf18      	it	ne
 800f16a:	2001      	movne	r0, #1
 800f16c:	b002      	add	sp, #8
 800f16e:	4770      	bx	lr
 800f170:	4610      	mov	r0, r2
 800f172:	e7fb      	b.n	800f16c <__ascii_mbtowc+0x16>
 800f174:	f06f 0001 	mvn.w	r0, #1
 800f178:	e7f8      	b.n	800f16c <__ascii_mbtowc+0x16>

0800f17a <_realloc_r>:
 800f17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f17e:	4680      	mov	r8, r0
 800f180:	4615      	mov	r5, r2
 800f182:	460c      	mov	r4, r1
 800f184:	b921      	cbnz	r1, 800f190 <_realloc_r+0x16>
 800f186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f18a:	4611      	mov	r1, r2
 800f18c:	f7fd b954 	b.w	800c438 <_malloc_r>
 800f190:	b92a      	cbnz	r2, 800f19e <_realloc_r+0x24>
 800f192:	f7fd f8dd 	bl	800c350 <_free_r>
 800f196:	2400      	movs	r4, #0
 800f198:	4620      	mov	r0, r4
 800f19a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f19e:	f000 f8b2 	bl	800f306 <_malloc_usable_size_r>
 800f1a2:	4285      	cmp	r5, r0
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	d802      	bhi.n	800f1ae <_realloc_r+0x34>
 800f1a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f1ac:	d8f4      	bhi.n	800f198 <_realloc_r+0x1e>
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	4640      	mov	r0, r8
 800f1b2:	f7fd f941 	bl	800c438 <_malloc_r>
 800f1b6:	4607      	mov	r7, r0
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d0ec      	beq.n	800f196 <_realloc_r+0x1c>
 800f1bc:	42b5      	cmp	r5, r6
 800f1be:	462a      	mov	r2, r5
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	bf28      	it	cs
 800f1c4:	4632      	movcs	r2, r6
 800f1c6:	f7ff fc45 	bl	800ea54 <memcpy>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	f7fd f8bf 	bl	800c350 <_free_r>
 800f1d2:	463c      	mov	r4, r7
 800f1d4:	e7e0      	b.n	800f198 <_realloc_r+0x1e>
	...

0800f1d8 <_strtoul_l.constprop.0>:
 800f1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	4e34      	ldr	r6, [pc, #208]	@ (800f2b0 <_strtoul_l.constprop.0+0xd8>)
 800f1de:	4686      	mov	lr, r0
 800f1e0:	460d      	mov	r5, r1
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1e8:	5d37      	ldrb	r7, [r6, r4]
 800f1ea:	f017 0708 	ands.w	r7, r7, #8
 800f1ee:	d1f8      	bne.n	800f1e2 <_strtoul_l.constprop.0+0xa>
 800f1f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f1f2:	d12f      	bne.n	800f254 <_strtoul_l.constprop.0+0x7c>
 800f1f4:	782c      	ldrb	r4, [r5, #0]
 800f1f6:	2701      	movs	r7, #1
 800f1f8:	1c85      	adds	r5, r0, #2
 800f1fa:	f033 0010 	bics.w	r0, r3, #16
 800f1fe:	d109      	bne.n	800f214 <_strtoul_l.constprop.0+0x3c>
 800f200:	2c30      	cmp	r4, #48	@ 0x30
 800f202:	d12c      	bne.n	800f25e <_strtoul_l.constprop.0+0x86>
 800f204:	7828      	ldrb	r0, [r5, #0]
 800f206:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f20a:	2858      	cmp	r0, #88	@ 0x58
 800f20c:	d127      	bne.n	800f25e <_strtoul_l.constprop.0+0x86>
 800f20e:	786c      	ldrb	r4, [r5, #1]
 800f210:	2310      	movs	r3, #16
 800f212:	3502      	adds	r5, #2
 800f214:	f04f 38ff 	mov.w	r8, #4294967295
 800f218:	2600      	movs	r6, #0
 800f21a:	fbb8 f8f3 	udiv	r8, r8, r3
 800f21e:	fb03 f908 	mul.w	r9, r3, r8
 800f222:	ea6f 0909 	mvn.w	r9, r9
 800f226:	4630      	mov	r0, r6
 800f228:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f22c:	f1bc 0f09 	cmp.w	ip, #9
 800f230:	d81c      	bhi.n	800f26c <_strtoul_l.constprop.0+0x94>
 800f232:	4664      	mov	r4, ip
 800f234:	42a3      	cmp	r3, r4
 800f236:	dd2a      	ble.n	800f28e <_strtoul_l.constprop.0+0xb6>
 800f238:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f23c:	d007      	beq.n	800f24e <_strtoul_l.constprop.0+0x76>
 800f23e:	4580      	cmp	r8, r0
 800f240:	d322      	bcc.n	800f288 <_strtoul_l.constprop.0+0xb0>
 800f242:	d101      	bne.n	800f248 <_strtoul_l.constprop.0+0x70>
 800f244:	45a1      	cmp	r9, r4
 800f246:	db1f      	blt.n	800f288 <_strtoul_l.constprop.0+0xb0>
 800f248:	fb00 4003 	mla	r0, r0, r3, r4
 800f24c:	2601      	movs	r6, #1
 800f24e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f252:	e7e9      	b.n	800f228 <_strtoul_l.constprop.0+0x50>
 800f254:	2c2b      	cmp	r4, #43	@ 0x2b
 800f256:	bf04      	itt	eq
 800f258:	782c      	ldrbeq	r4, [r5, #0]
 800f25a:	1c85      	addeq	r5, r0, #2
 800f25c:	e7cd      	b.n	800f1fa <_strtoul_l.constprop.0+0x22>
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d1d8      	bne.n	800f214 <_strtoul_l.constprop.0+0x3c>
 800f262:	2c30      	cmp	r4, #48	@ 0x30
 800f264:	bf0c      	ite	eq
 800f266:	2308      	moveq	r3, #8
 800f268:	230a      	movne	r3, #10
 800f26a:	e7d3      	b.n	800f214 <_strtoul_l.constprop.0+0x3c>
 800f26c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f270:	f1bc 0f19 	cmp.w	ip, #25
 800f274:	d801      	bhi.n	800f27a <_strtoul_l.constprop.0+0xa2>
 800f276:	3c37      	subs	r4, #55	@ 0x37
 800f278:	e7dc      	b.n	800f234 <_strtoul_l.constprop.0+0x5c>
 800f27a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f27e:	f1bc 0f19 	cmp.w	ip, #25
 800f282:	d804      	bhi.n	800f28e <_strtoul_l.constprop.0+0xb6>
 800f284:	3c57      	subs	r4, #87	@ 0x57
 800f286:	e7d5      	b.n	800f234 <_strtoul_l.constprop.0+0x5c>
 800f288:	f04f 36ff 	mov.w	r6, #4294967295
 800f28c:	e7df      	b.n	800f24e <_strtoul_l.constprop.0+0x76>
 800f28e:	1c73      	adds	r3, r6, #1
 800f290:	d106      	bne.n	800f2a0 <_strtoul_l.constprop.0+0xc8>
 800f292:	2322      	movs	r3, #34	@ 0x22
 800f294:	f8ce 3000 	str.w	r3, [lr]
 800f298:	4630      	mov	r0, r6
 800f29a:	b932      	cbnz	r2, 800f2aa <_strtoul_l.constprop.0+0xd2>
 800f29c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2a0:	b107      	cbz	r7, 800f2a4 <_strtoul_l.constprop.0+0xcc>
 800f2a2:	4240      	negs	r0, r0
 800f2a4:	2a00      	cmp	r2, #0
 800f2a6:	d0f9      	beq.n	800f29c <_strtoul_l.constprop.0+0xc4>
 800f2a8:	b106      	cbz	r6, 800f2ac <_strtoul_l.constprop.0+0xd4>
 800f2aa:	1e69      	subs	r1, r5, #1
 800f2ac:	6011      	str	r1, [r2, #0]
 800f2ae:	e7f5      	b.n	800f29c <_strtoul_l.constprop.0+0xc4>
 800f2b0:	08010c9d 	.word	0x08010c9d

0800f2b4 <_strtoul_r>:
 800f2b4:	f7ff bf90 	b.w	800f1d8 <_strtoul_l.constprop.0>

0800f2b8 <__ascii_wctomb>:
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	b141      	cbz	r1, 800f2d0 <__ascii_wctomb+0x18>
 800f2be:	2aff      	cmp	r2, #255	@ 0xff
 800f2c0:	d904      	bls.n	800f2cc <__ascii_wctomb+0x14>
 800f2c2:	228a      	movs	r2, #138	@ 0x8a
 800f2c4:	601a      	str	r2, [r3, #0]
 800f2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ca:	4770      	bx	lr
 800f2cc:	700a      	strb	r2, [r1, #0]
 800f2ce:	2001      	movs	r0, #1
 800f2d0:	4770      	bx	lr
	...

0800f2d4 <fiprintf>:
 800f2d4:	b40e      	push	{r1, r2, r3}
 800f2d6:	b503      	push	{r0, r1, lr}
 800f2d8:	4601      	mov	r1, r0
 800f2da:	ab03      	add	r3, sp, #12
 800f2dc:	4805      	ldr	r0, [pc, #20]	@ (800f2f4 <fiprintf+0x20>)
 800f2de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2e2:	6800      	ldr	r0, [r0, #0]
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	f7fe ff3b 	bl	800e160 <_vfiprintf_r>
 800f2ea:	b002      	add	sp, #8
 800f2ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2f0:	b003      	add	sp, #12
 800f2f2:	4770      	bx	lr
 800f2f4:	20000034 	.word	0x20000034

0800f2f8 <abort>:
 800f2f8:	b508      	push	{r3, lr}
 800f2fa:	2006      	movs	r0, #6
 800f2fc:	f000 f834 	bl	800f368 <raise>
 800f300:	2001      	movs	r0, #1
 800f302:	f7f5 f887 	bl	8004414 <_exit>

0800f306 <_malloc_usable_size_r>:
 800f306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f30a:	1f18      	subs	r0, r3, #4
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	bfbc      	itt	lt
 800f310:	580b      	ldrlt	r3, [r1, r0]
 800f312:	18c0      	addlt	r0, r0, r3
 800f314:	4770      	bx	lr

0800f316 <_raise_r>:
 800f316:	291f      	cmp	r1, #31
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4605      	mov	r5, r0
 800f31c:	460c      	mov	r4, r1
 800f31e:	d904      	bls.n	800f32a <_raise_r+0x14>
 800f320:	2316      	movs	r3, #22
 800f322:	6003      	str	r3, [r0, #0]
 800f324:	f04f 30ff 	mov.w	r0, #4294967295
 800f328:	bd38      	pop	{r3, r4, r5, pc}
 800f32a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f32c:	b112      	cbz	r2, 800f334 <_raise_r+0x1e>
 800f32e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f332:	b94b      	cbnz	r3, 800f348 <_raise_r+0x32>
 800f334:	4628      	mov	r0, r5
 800f336:	f000 f831 	bl	800f39c <_getpid_r>
 800f33a:	4622      	mov	r2, r4
 800f33c:	4601      	mov	r1, r0
 800f33e:	4628      	mov	r0, r5
 800f340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f344:	f000 b818 	b.w	800f378 <_kill_r>
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d00a      	beq.n	800f362 <_raise_r+0x4c>
 800f34c:	1c59      	adds	r1, r3, #1
 800f34e:	d103      	bne.n	800f358 <_raise_r+0x42>
 800f350:	2316      	movs	r3, #22
 800f352:	6003      	str	r3, [r0, #0]
 800f354:	2001      	movs	r0, #1
 800f356:	e7e7      	b.n	800f328 <_raise_r+0x12>
 800f358:	2100      	movs	r1, #0
 800f35a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f35e:	4620      	mov	r0, r4
 800f360:	4798      	blx	r3
 800f362:	2000      	movs	r0, #0
 800f364:	e7e0      	b.n	800f328 <_raise_r+0x12>
	...

0800f368 <raise>:
 800f368:	4b02      	ldr	r3, [pc, #8]	@ (800f374 <raise+0xc>)
 800f36a:	4601      	mov	r1, r0
 800f36c:	6818      	ldr	r0, [r3, #0]
 800f36e:	f7ff bfd2 	b.w	800f316 <_raise_r>
 800f372:	bf00      	nop
 800f374:	20000034 	.word	0x20000034

0800f378 <_kill_r>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4d07      	ldr	r5, [pc, #28]	@ (800f398 <_kill_r+0x20>)
 800f37c:	2300      	movs	r3, #0
 800f37e:	4604      	mov	r4, r0
 800f380:	4608      	mov	r0, r1
 800f382:	4611      	mov	r1, r2
 800f384:	602b      	str	r3, [r5, #0]
 800f386:	f7f5 f835 	bl	80043f4 <_kill>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	d102      	bne.n	800f394 <_kill_r+0x1c>
 800f38e:	682b      	ldr	r3, [r5, #0]
 800f390:	b103      	cbz	r3, 800f394 <_kill_r+0x1c>
 800f392:	6023      	str	r3, [r4, #0]
 800f394:	bd38      	pop	{r3, r4, r5, pc}
 800f396:	bf00      	nop
 800f398:	20000e84 	.word	0x20000e84

0800f39c <_getpid_r>:
 800f39c:	f7f5 b822 	b.w	80043e4 <_getpid>

0800f3a0 <pow>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	ed2d 8b02 	vpush	{d8}
 800f3a6:	eeb0 8a40 	vmov.f32	s16, s0
 800f3aa:	eef0 8a60 	vmov.f32	s17, s1
 800f3ae:	ec55 4b11 	vmov	r4, r5, d1
 800f3b2:	f000 f871 	bl	800f498 <__ieee754_pow>
 800f3b6:	4622      	mov	r2, r4
 800f3b8:	462b      	mov	r3, r5
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	4629      	mov	r1, r5
 800f3be:	ec57 6b10 	vmov	r6, r7, d0
 800f3c2:	f7f1 fbcb 	bl	8000b5c <__aeabi_dcmpun>
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d13b      	bne.n	800f442 <pow+0xa2>
 800f3ca:	ec51 0b18 	vmov	r0, r1, d8
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f7f1 fb91 	bl	8000af8 <__aeabi_dcmpeq>
 800f3d6:	b1b8      	cbz	r0, 800f408 <pow+0x68>
 800f3d8:	2200      	movs	r2, #0
 800f3da:	2300      	movs	r3, #0
 800f3dc:	4620      	mov	r0, r4
 800f3de:	4629      	mov	r1, r5
 800f3e0:	f7f1 fb8a 	bl	8000af8 <__aeabi_dcmpeq>
 800f3e4:	2800      	cmp	r0, #0
 800f3e6:	d146      	bne.n	800f476 <pow+0xd6>
 800f3e8:	ec45 4b10 	vmov	d0, r4, r5
 800f3ec:	f000 f848 	bl	800f480 <finite>
 800f3f0:	b338      	cbz	r0, 800f442 <pow+0xa2>
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	4629      	mov	r1, r5
 800f3fa:	f7f1 fb87 	bl	8000b0c <__aeabi_dcmplt>
 800f3fe:	b300      	cbz	r0, 800f442 <pow+0xa2>
 800f400:	f7fc f926 	bl	800b650 <__errno>
 800f404:	2322      	movs	r3, #34	@ 0x22
 800f406:	e01b      	b.n	800f440 <pow+0xa0>
 800f408:	ec47 6b10 	vmov	d0, r6, r7
 800f40c:	f000 f838 	bl	800f480 <finite>
 800f410:	b9e0      	cbnz	r0, 800f44c <pow+0xac>
 800f412:	eeb0 0a48 	vmov.f32	s0, s16
 800f416:	eef0 0a68 	vmov.f32	s1, s17
 800f41a:	f000 f831 	bl	800f480 <finite>
 800f41e:	b1a8      	cbz	r0, 800f44c <pow+0xac>
 800f420:	ec45 4b10 	vmov	d0, r4, r5
 800f424:	f000 f82c 	bl	800f480 <finite>
 800f428:	b180      	cbz	r0, 800f44c <pow+0xac>
 800f42a:	4632      	mov	r2, r6
 800f42c:	463b      	mov	r3, r7
 800f42e:	4630      	mov	r0, r6
 800f430:	4639      	mov	r1, r7
 800f432:	f7f1 fb93 	bl	8000b5c <__aeabi_dcmpun>
 800f436:	2800      	cmp	r0, #0
 800f438:	d0e2      	beq.n	800f400 <pow+0x60>
 800f43a:	f7fc f909 	bl	800b650 <__errno>
 800f43e:	2321      	movs	r3, #33	@ 0x21
 800f440:	6003      	str	r3, [r0, #0]
 800f442:	ecbd 8b02 	vpop	{d8}
 800f446:	ec47 6b10 	vmov	d0, r6, r7
 800f44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f44c:	2200      	movs	r2, #0
 800f44e:	2300      	movs	r3, #0
 800f450:	4630      	mov	r0, r6
 800f452:	4639      	mov	r1, r7
 800f454:	f7f1 fb50 	bl	8000af8 <__aeabi_dcmpeq>
 800f458:	2800      	cmp	r0, #0
 800f45a:	d0f2      	beq.n	800f442 <pow+0xa2>
 800f45c:	eeb0 0a48 	vmov.f32	s0, s16
 800f460:	eef0 0a68 	vmov.f32	s1, s17
 800f464:	f000 f80c 	bl	800f480 <finite>
 800f468:	2800      	cmp	r0, #0
 800f46a:	d0ea      	beq.n	800f442 <pow+0xa2>
 800f46c:	ec45 4b10 	vmov	d0, r4, r5
 800f470:	f000 f806 	bl	800f480 <finite>
 800f474:	e7c3      	b.n	800f3fe <pow+0x5e>
 800f476:	4f01      	ldr	r7, [pc, #4]	@ (800f47c <pow+0xdc>)
 800f478:	2600      	movs	r6, #0
 800f47a:	e7e2      	b.n	800f442 <pow+0xa2>
 800f47c:	3ff00000 	.word	0x3ff00000

0800f480 <finite>:
 800f480:	b082      	sub	sp, #8
 800f482:	ed8d 0b00 	vstr	d0, [sp]
 800f486:	9801      	ldr	r0, [sp, #4]
 800f488:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f48c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f490:	0fc0      	lsrs	r0, r0, #31
 800f492:	b002      	add	sp, #8
 800f494:	4770      	bx	lr
	...

0800f498 <__ieee754_pow>:
 800f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49c:	b091      	sub	sp, #68	@ 0x44
 800f49e:	ed8d 1b00 	vstr	d1, [sp]
 800f4a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f4a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f4aa:	ea5a 0001 	orrs.w	r0, sl, r1
 800f4ae:	ec57 6b10 	vmov	r6, r7, d0
 800f4b2:	d113      	bne.n	800f4dc <__ieee754_pow+0x44>
 800f4b4:	19b3      	adds	r3, r6, r6
 800f4b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f4ba:	4152      	adcs	r2, r2
 800f4bc:	4298      	cmp	r0, r3
 800f4be:	4b98      	ldr	r3, [pc, #608]	@ (800f720 <__ieee754_pow+0x288>)
 800f4c0:	4193      	sbcs	r3, r2
 800f4c2:	f080 84ea 	bcs.w	800fe9a <__ieee754_pow+0xa02>
 800f4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	4639      	mov	r1, r7
 800f4ce:	f7f0 fef5 	bl	80002bc <__adddf3>
 800f4d2:	ec41 0b10 	vmov	d0, r0, r1
 800f4d6:	b011      	add	sp, #68	@ 0x44
 800f4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4dc:	4a91      	ldr	r2, [pc, #580]	@ (800f724 <__ieee754_pow+0x28c>)
 800f4de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f4e2:	4590      	cmp	r8, r2
 800f4e4:	463d      	mov	r5, r7
 800f4e6:	4633      	mov	r3, r6
 800f4e8:	d806      	bhi.n	800f4f8 <__ieee754_pow+0x60>
 800f4ea:	d101      	bne.n	800f4f0 <__ieee754_pow+0x58>
 800f4ec:	2e00      	cmp	r6, #0
 800f4ee:	d1ea      	bne.n	800f4c6 <__ieee754_pow+0x2e>
 800f4f0:	4592      	cmp	sl, r2
 800f4f2:	d801      	bhi.n	800f4f8 <__ieee754_pow+0x60>
 800f4f4:	d10e      	bne.n	800f514 <__ieee754_pow+0x7c>
 800f4f6:	b169      	cbz	r1, 800f514 <__ieee754_pow+0x7c>
 800f4f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f4fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f500:	431d      	orrs	r5, r3
 800f502:	d1e0      	bne.n	800f4c6 <__ieee754_pow+0x2e>
 800f504:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f508:	18db      	adds	r3, r3, r3
 800f50a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f50e:	4152      	adcs	r2, r2
 800f510:	429d      	cmp	r5, r3
 800f512:	e7d4      	b.n	800f4be <__ieee754_pow+0x26>
 800f514:	2d00      	cmp	r5, #0
 800f516:	46c3      	mov	fp, r8
 800f518:	da3a      	bge.n	800f590 <__ieee754_pow+0xf8>
 800f51a:	4a83      	ldr	r2, [pc, #524]	@ (800f728 <__ieee754_pow+0x290>)
 800f51c:	4592      	cmp	sl, r2
 800f51e:	d84d      	bhi.n	800f5bc <__ieee754_pow+0x124>
 800f520:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f524:	4592      	cmp	sl, r2
 800f526:	f240 84c7 	bls.w	800feb8 <__ieee754_pow+0xa20>
 800f52a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f52e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f532:	2a14      	cmp	r2, #20
 800f534:	dd0f      	ble.n	800f556 <__ieee754_pow+0xbe>
 800f536:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f53a:	fa21 f402 	lsr.w	r4, r1, r2
 800f53e:	fa04 f202 	lsl.w	r2, r4, r2
 800f542:	428a      	cmp	r2, r1
 800f544:	f040 84b8 	bne.w	800feb8 <__ieee754_pow+0xa20>
 800f548:	f004 0401 	and.w	r4, r4, #1
 800f54c:	f1c4 0402 	rsb	r4, r4, #2
 800f550:	2900      	cmp	r1, #0
 800f552:	d158      	bne.n	800f606 <__ieee754_pow+0x16e>
 800f554:	e00e      	b.n	800f574 <__ieee754_pow+0xdc>
 800f556:	2900      	cmp	r1, #0
 800f558:	d154      	bne.n	800f604 <__ieee754_pow+0x16c>
 800f55a:	f1c2 0214 	rsb	r2, r2, #20
 800f55e:	fa4a f402 	asr.w	r4, sl, r2
 800f562:	fa04 f202 	lsl.w	r2, r4, r2
 800f566:	4552      	cmp	r2, sl
 800f568:	f040 84a3 	bne.w	800feb2 <__ieee754_pow+0xa1a>
 800f56c:	f004 0401 	and.w	r4, r4, #1
 800f570:	f1c4 0402 	rsb	r4, r4, #2
 800f574:	4a6d      	ldr	r2, [pc, #436]	@ (800f72c <__ieee754_pow+0x294>)
 800f576:	4592      	cmp	sl, r2
 800f578:	d12e      	bne.n	800f5d8 <__ieee754_pow+0x140>
 800f57a:	f1b9 0f00 	cmp.w	r9, #0
 800f57e:	f280 8494 	bge.w	800feaa <__ieee754_pow+0xa12>
 800f582:	496a      	ldr	r1, [pc, #424]	@ (800f72c <__ieee754_pow+0x294>)
 800f584:	4632      	mov	r2, r6
 800f586:	463b      	mov	r3, r7
 800f588:	2000      	movs	r0, #0
 800f58a:	f7f1 f977 	bl	800087c <__aeabi_ddiv>
 800f58e:	e7a0      	b.n	800f4d2 <__ieee754_pow+0x3a>
 800f590:	2400      	movs	r4, #0
 800f592:	bbc1      	cbnz	r1, 800f606 <__ieee754_pow+0x16e>
 800f594:	4a63      	ldr	r2, [pc, #396]	@ (800f724 <__ieee754_pow+0x28c>)
 800f596:	4592      	cmp	sl, r2
 800f598:	d1ec      	bne.n	800f574 <__ieee754_pow+0xdc>
 800f59a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f59e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f5a2:	431a      	orrs	r2, r3
 800f5a4:	f000 8479 	beq.w	800fe9a <__ieee754_pow+0xa02>
 800f5a8:	4b61      	ldr	r3, [pc, #388]	@ (800f730 <__ieee754_pow+0x298>)
 800f5aa:	4598      	cmp	r8, r3
 800f5ac:	d908      	bls.n	800f5c0 <__ieee754_pow+0x128>
 800f5ae:	f1b9 0f00 	cmp.w	r9, #0
 800f5b2:	f2c0 8476 	blt.w	800fea2 <__ieee754_pow+0xa0a>
 800f5b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5ba:	e78a      	b.n	800f4d2 <__ieee754_pow+0x3a>
 800f5bc:	2402      	movs	r4, #2
 800f5be:	e7e8      	b.n	800f592 <__ieee754_pow+0xfa>
 800f5c0:	f1b9 0f00 	cmp.w	r9, #0
 800f5c4:	f04f 0000 	mov.w	r0, #0
 800f5c8:	f04f 0100 	mov.w	r1, #0
 800f5cc:	da81      	bge.n	800f4d2 <__ieee754_pow+0x3a>
 800f5ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f5d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f5d6:	e77c      	b.n	800f4d2 <__ieee754_pow+0x3a>
 800f5d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f5dc:	d106      	bne.n	800f5ec <__ieee754_pow+0x154>
 800f5de:	4632      	mov	r2, r6
 800f5e0:	463b      	mov	r3, r7
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	f7f1 f81f 	bl	8000628 <__aeabi_dmul>
 800f5ea:	e772      	b.n	800f4d2 <__ieee754_pow+0x3a>
 800f5ec:	4a51      	ldr	r2, [pc, #324]	@ (800f734 <__ieee754_pow+0x29c>)
 800f5ee:	4591      	cmp	r9, r2
 800f5f0:	d109      	bne.n	800f606 <__ieee754_pow+0x16e>
 800f5f2:	2d00      	cmp	r5, #0
 800f5f4:	db07      	blt.n	800f606 <__ieee754_pow+0x16e>
 800f5f6:	ec47 6b10 	vmov	d0, r6, r7
 800f5fa:	b011      	add	sp, #68	@ 0x44
 800f5fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f600:	f000 bd52 	b.w	80100a8 <__ieee754_sqrt>
 800f604:	2400      	movs	r4, #0
 800f606:	ec47 6b10 	vmov	d0, r6, r7
 800f60a:	9302      	str	r3, [sp, #8]
 800f60c:	f000 fc88 	bl	800ff20 <fabs>
 800f610:	9b02      	ldr	r3, [sp, #8]
 800f612:	ec51 0b10 	vmov	r0, r1, d0
 800f616:	bb53      	cbnz	r3, 800f66e <__ieee754_pow+0x1d6>
 800f618:	4b44      	ldr	r3, [pc, #272]	@ (800f72c <__ieee754_pow+0x294>)
 800f61a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f61e:	429a      	cmp	r2, r3
 800f620:	d002      	beq.n	800f628 <__ieee754_pow+0x190>
 800f622:	f1b8 0f00 	cmp.w	r8, #0
 800f626:	d122      	bne.n	800f66e <__ieee754_pow+0x1d6>
 800f628:	f1b9 0f00 	cmp.w	r9, #0
 800f62c:	da05      	bge.n	800f63a <__ieee754_pow+0x1a2>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	2000      	movs	r0, #0
 800f634:	493d      	ldr	r1, [pc, #244]	@ (800f72c <__ieee754_pow+0x294>)
 800f636:	f7f1 f921 	bl	800087c <__aeabi_ddiv>
 800f63a:	2d00      	cmp	r5, #0
 800f63c:	f6bf af49 	bge.w	800f4d2 <__ieee754_pow+0x3a>
 800f640:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f644:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f648:	ea58 0804 	orrs.w	r8, r8, r4
 800f64c:	d108      	bne.n	800f660 <__ieee754_pow+0x1c8>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	4610      	mov	r0, r2
 800f654:	4619      	mov	r1, r3
 800f656:	f7f0 fe2f 	bl	80002b8 <__aeabi_dsub>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	e794      	b.n	800f58a <__ieee754_pow+0xf2>
 800f660:	2c01      	cmp	r4, #1
 800f662:	f47f af36 	bne.w	800f4d2 <__ieee754_pow+0x3a>
 800f666:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f66a:	4619      	mov	r1, r3
 800f66c:	e731      	b.n	800f4d2 <__ieee754_pow+0x3a>
 800f66e:	0feb      	lsrs	r3, r5, #31
 800f670:	3b01      	subs	r3, #1
 800f672:	ea53 0204 	orrs.w	r2, r3, r4
 800f676:	d102      	bne.n	800f67e <__ieee754_pow+0x1e6>
 800f678:	4632      	mov	r2, r6
 800f67a:	463b      	mov	r3, r7
 800f67c:	e7e9      	b.n	800f652 <__ieee754_pow+0x1ba>
 800f67e:	3c01      	subs	r4, #1
 800f680:	431c      	orrs	r4, r3
 800f682:	d016      	beq.n	800f6b2 <__ieee754_pow+0x21a>
 800f684:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f710 <__ieee754_pow+0x278>
 800f688:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f68c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f690:	f240 8112 	bls.w	800f8b8 <__ieee754_pow+0x420>
 800f694:	4b28      	ldr	r3, [pc, #160]	@ (800f738 <__ieee754_pow+0x2a0>)
 800f696:	459a      	cmp	sl, r3
 800f698:	4b25      	ldr	r3, [pc, #148]	@ (800f730 <__ieee754_pow+0x298>)
 800f69a:	d916      	bls.n	800f6ca <__ieee754_pow+0x232>
 800f69c:	4598      	cmp	r8, r3
 800f69e:	d80b      	bhi.n	800f6b8 <__ieee754_pow+0x220>
 800f6a0:	f1b9 0f00 	cmp.w	r9, #0
 800f6a4:	da0b      	bge.n	800f6be <__ieee754_pow+0x226>
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	b011      	add	sp, #68	@ 0x44
 800f6aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ae:	f000 bcf3 	b.w	8010098 <__math_oflow>
 800f6b2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f718 <__ieee754_pow+0x280>
 800f6b6:	e7e7      	b.n	800f688 <__ieee754_pow+0x1f0>
 800f6b8:	f1b9 0f00 	cmp.w	r9, #0
 800f6bc:	dcf3      	bgt.n	800f6a6 <__ieee754_pow+0x20e>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	b011      	add	sp, #68	@ 0x44
 800f6c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c6:	f000 bcdf 	b.w	8010088 <__math_uflow>
 800f6ca:	4598      	cmp	r8, r3
 800f6cc:	d20c      	bcs.n	800f6e8 <__ieee754_pow+0x250>
 800f6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f7f1 fa19 	bl	8000b0c <__aeabi_dcmplt>
 800f6da:	3800      	subs	r0, #0
 800f6dc:	bf18      	it	ne
 800f6de:	2001      	movne	r0, #1
 800f6e0:	f1b9 0f00 	cmp.w	r9, #0
 800f6e4:	daec      	bge.n	800f6c0 <__ieee754_pow+0x228>
 800f6e6:	e7df      	b.n	800f6a8 <__ieee754_pow+0x210>
 800f6e8:	4b10      	ldr	r3, [pc, #64]	@ (800f72c <__ieee754_pow+0x294>)
 800f6ea:	4598      	cmp	r8, r3
 800f6ec:	f04f 0200 	mov.w	r2, #0
 800f6f0:	d924      	bls.n	800f73c <__ieee754_pow+0x2a4>
 800f6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	f7f1 fa08 	bl	8000b0c <__aeabi_dcmplt>
 800f6fc:	3800      	subs	r0, #0
 800f6fe:	bf18      	it	ne
 800f700:	2001      	movne	r0, #1
 800f702:	f1b9 0f00 	cmp.w	r9, #0
 800f706:	dccf      	bgt.n	800f6a8 <__ieee754_pow+0x210>
 800f708:	e7da      	b.n	800f6c0 <__ieee754_pow+0x228>
 800f70a:	bf00      	nop
 800f70c:	f3af 8000 	nop.w
 800f710:	00000000 	.word	0x00000000
 800f714:	3ff00000 	.word	0x3ff00000
 800f718:	00000000 	.word	0x00000000
 800f71c:	bff00000 	.word	0xbff00000
 800f720:	fff00000 	.word	0xfff00000
 800f724:	7ff00000 	.word	0x7ff00000
 800f728:	433fffff 	.word	0x433fffff
 800f72c:	3ff00000 	.word	0x3ff00000
 800f730:	3fefffff 	.word	0x3fefffff
 800f734:	3fe00000 	.word	0x3fe00000
 800f738:	43f00000 	.word	0x43f00000
 800f73c:	4b5a      	ldr	r3, [pc, #360]	@ (800f8a8 <__ieee754_pow+0x410>)
 800f73e:	f7f0 fdbb 	bl	80002b8 <__aeabi_dsub>
 800f742:	a351      	add	r3, pc, #324	@ (adr r3, 800f888 <__ieee754_pow+0x3f0>)
 800f744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	f7f0 ff6c 	bl	8000628 <__aeabi_dmul>
 800f750:	a34f      	add	r3, pc, #316	@ (adr r3, 800f890 <__ieee754_pow+0x3f8>)
 800f752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f756:	4606      	mov	r6, r0
 800f758:	460f      	mov	r7, r1
 800f75a:	4620      	mov	r0, r4
 800f75c:	4629      	mov	r1, r5
 800f75e:	f7f0 ff63 	bl	8000628 <__aeabi_dmul>
 800f762:	4b52      	ldr	r3, [pc, #328]	@ (800f8ac <__ieee754_pow+0x414>)
 800f764:	4682      	mov	sl, r0
 800f766:	468b      	mov	fp, r1
 800f768:	2200      	movs	r2, #0
 800f76a:	4620      	mov	r0, r4
 800f76c:	4629      	mov	r1, r5
 800f76e:	f7f0 ff5b 	bl	8000628 <__aeabi_dmul>
 800f772:	4602      	mov	r2, r0
 800f774:	460b      	mov	r3, r1
 800f776:	a148      	add	r1, pc, #288	@ (adr r1, 800f898 <__ieee754_pow+0x400>)
 800f778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f77c:	f7f0 fd9c 	bl	80002b8 <__aeabi_dsub>
 800f780:	4622      	mov	r2, r4
 800f782:	462b      	mov	r3, r5
 800f784:	f7f0 ff50 	bl	8000628 <__aeabi_dmul>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	2000      	movs	r0, #0
 800f78e:	4948      	ldr	r1, [pc, #288]	@ (800f8b0 <__ieee754_pow+0x418>)
 800f790:	f7f0 fd92 	bl	80002b8 <__aeabi_dsub>
 800f794:	4622      	mov	r2, r4
 800f796:	4680      	mov	r8, r0
 800f798:	4689      	mov	r9, r1
 800f79a:	462b      	mov	r3, r5
 800f79c:	4620      	mov	r0, r4
 800f79e:	4629      	mov	r1, r5
 800f7a0:	f7f0 ff42 	bl	8000628 <__aeabi_dmul>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	f7f0 ff3c 	bl	8000628 <__aeabi_dmul>
 800f7b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800f8a0 <__ieee754_pow+0x408>)
 800f7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b6:	f7f0 ff37 	bl	8000628 <__aeabi_dmul>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	4650      	mov	r0, sl
 800f7c0:	4659      	mov	r1, fp
 800f7c2:	f7f0 fd79 	bl	80002b8 <__aeabi_dsub>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	4680      	mov	r8, r0
 800f7cc:	4689      	mov	r9, r1
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	4639      	mov	r1, r7
 800f7d2:	f7f0 fd73 	bl	80002bc <__adddf3>
 800f7d6:	2400      	movs	r4, #0
 800f7d8:	4632      	mov	r2, r6
 800f7da:	463b      	mov	r3, r7
 800f7dc:	4620      	mov	r0, r4
 800f7de:	460d      	mov	r5, r1
 800f7e0:	f7f0 fd6a 	bl	80002b8 <__aeabi_dsub>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	4640      	mov	r0, r8
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	f7f0 fd64 	bl	80002b8 <__aeabi_dsub>
 800f7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	9304      	str	r3, [sp, #16]
 800f7fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f800:	4606      	mov	r6, r0
 800f802:	460f      	mov	r7, r1
 800f804:	4652      	mov	r2, sl
 800f806:	465b      	mov	r3, fp
 800f808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f80c:	f7f0 fd54 	bl	80002b8 <__aeabi_dsub>
 800f810:	4622      	mov	r2, r4
 800f812:	462b      	mov	r3, r5
 800f814:	f7f0 ff08 	bl	8000628 <__aeabi_dmul>
 800f818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f81c:	4680      	mov	r8, r0
 800f81e:	4689      	mov	r9, r1
 800f820:	4630      	mov	r0, r6
 800f822:	4639      	mov	r1, r7
 800f824:	f7f0 ff00 	bl	8000628 <__aeabi_dmul>
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	4640      	mov	r0, r8
 800f82e:	4649      	mov	r1, r9
 800f830:	f7f0 fd44 	bl	80002bc <__adddf3>
 800f834:	4652      	mov	r2, sl
 800f836:	465b      	mov	r3, fp
 800f838:	4606      	mov	r6, r0
 800f83a:	460f      	mov	r7, r1
 800f83c:	4620      	mov	r0, r4
 800f83e:	4629      	mov	r1, r5
 800f840:	f7f0 fef2 	bl	8000628 <__aeabi_dmul>
 800f844:	460b      	mov	r3, r1
 800f846:	4602      	mov	r2, r0
 800f848:	4680      	mov	r8, r0
 800f84a:	4689      	mov	r9, r1
 800f84c:	4630      	mov	r0, r6
 800f84e:	4639      	mov	r1, r7
 800f850:	f7f0 fd34 	bl	80002bc <__adddf3>
 800f854:	4b17      	ldr	r3, [pc, #92]	@ (800f8b4 <__ieee754_pow+0x41c>)
 800f856:	4299      	cmp	r1, r3
 800f858:	4604      	mov	r4, r0
 800f85a:	460d      	mov	r5, r1
 800f85c:	468a      	mov	sl, r1
 800f85e:	468b      	mov	fp, r1
 800f860:	f340 82ef 	ble.w	800fe42 <__ieee754_pow+0x9aa>
 800f864:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f868:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f86c:	4303      	orrs	r3, r0
 800f86e:	f000 81e8 	beq.w	800fc42 <__ieee754_pow+0x7aa>
 800f872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f876:	2200      	movs	r2, #0
 800f878:	2300      	movs	r3, #0
 800f87a:	f7f1 f947 	bl	8000b0c <__aeabi_dcmplt>
 800f87e:	3800      	subs	r0, #0
 800f880:	bf18      	it	ne
 800f882:	2001      	movne	r0, #1
 800f884:	e710      	b.n	800f6a8 <__ieee754_pow+0x210>
 800f886:	bf00      	nop
 800f888:	60000000 	.word	0x60000000
 800f88c:	3ff71547 	.word	0x3ff71547
 800f890:	f85ddf44 	.word	0xf85ddf44
 800f894:	3e54ae0b 	.word	0x3e54ae0b
 800f898:	55555555 	.word	0x55555555
 800f89c:	3fd55555 	.word	0x3fd55555
 800f8a0:	652b82fe 	.word	0x652b82fe
 800f8a4:	3ff71547 	.word	0x3ff71547
 800f8a8:	3ff00000 	.word	0x3ff00000
 800f8ac:	3fd00000 	.word	0x3fd00000
 800f8b0:	3fe00000 	.word	0x3fe00000
 800f8b4:	408fffff 	.word	0x408fffff
 800f8b8:	4bd5      	ldr	r3, [pc, #852]	@ (800fc10 <__ieee754_pow+0x778>)
 800f8ba:	402b      	ands	r3, r5
 800f8bc:	2200      	movs	r2, #0
 800f8be:	b92b      	cbnz	r3, 800f8cc <__ieee754_pow+0x434>
 800f8c0:	4bd4      	ldr	r3, [pc, #848]	@ (800fc14 <__ieee754_pow+0x77c>)
 800f8c2:	f7f0 feb1 	bl	8000628 <__aeabi_dmul>
 800f8c6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f8ca:	468b      	mov	fp, r1
 800f8cc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f8d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f8d4:	4413      	add	r3, r2
 800f8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8d8:	4bcf      	ldr	r3, [pc, #828]	@ (800fc18 <__ieee754_pow+0x780>)
 800f8da:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f8de:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f8e2:	459b      	cmp	fp, r3
 800f8e4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f8e8:	dd08      	ble.n	800f8fc <__ieee754_pow+0x464>
 800f8ea:	4bcc      	ldr	r3, [pc, #816]	@ (800fc1c <__ieee754_pow+0x784>)
 800f8ec:	459b      	cmp	fp, r3
 800f8ee:	f340 81a5 	ble.w	800fc3c <__ieee754_pow+0x7a4>
 800f8f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f8fc:	f04f 0a00 	mov.w	sl, #0
 800f900:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f904:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f906:	4bc6      	ldr	r3, [pc, #792]	@ (800fc20 <__ieee754_pow+0x788>)
 800f908:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f90c:	ed93 7b00 	vldr	d7, [r3]
 800f910:	4629      	mov	r1, r5
 800f912:	ec53 2b17 	vmov	r2, r3, d7
 800f916:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f91a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f91e:	f7f0 fccb 	bl	80002b8 <__aeabi_dsub>
 800f922:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f926:	4606      	mov	r6, r0
 800f928:	460f      	mov	r7, r1
 800f92a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f92e:	f7f0 fcc5 	bl	80002bc <__adddf3>
 800f932:	4602      	mov	r2, r0
 800f934:	460b      	mov	r3, r1
 800f936:	2000      	movs	r0, #0
 800f938:	49ba      	ldr	r1, [pc, #744]	@ (800fc24 <__ieee754_pow+0x78c>)
 800f93a:	f7f0 ff9f 	bl	800087c <__aeabi_ddiv>
 800f93e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f942:	4602      	mov	r2, r0
 800f944:	460b      	mov	r3, r1
 800f946:	4630      	mov	r0, r6
 800f948:	4639      	mov	r1, r7
 800f94a:	f7f0 fe6d 	bl	8000628 <__aeabi_dmul>
 800f94e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f952:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f956:	106d      	asrs	r5, r5, #1
 800f958:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f95c:	f04f 0b00 	mov.w	fp, #0
 800f960:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f964:	4661      	mov	r1, ip
 800f966:	2200      	movs	r2, #0
 800f968:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f96c:	4658      	mov	r0, fp
 800f96e:	46e1      	mov	r9, ip
 800f970:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f974:	4614      	mov	r4, r2
 800f976:	461d      	mov	r5, r3
 800f978:	f7f0 fe56 	bl	8000628 <__aeabi_dmul>
 800f97c:	4602      	mov	r2, r0
 800f97e:	460b      	mov	r3, r1
 800f980:	4630      	mov	r0, r6
 800f982:	4639      	mov	r1, r7
 800f984:	f7f0 fc98 	bl	80002b8 <__aeabi_dsub>
 800f988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f98c:	4606      	mov	r6, r0
 800f98e:	460f      	mov	r7, r1
 800f990:	4620      	mov	r0, r4
 800f992:	4629      	mov	r1, r5
 800f994:	f7f0 fc90 	bl	80002b8 <__aeabi_dsub>
 800f998:	4602      	mov	r2, r0
 800f99a:	460b      	mov	r3, r1
 800f99c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9a0:	f7f0 fc8a 	bl	80002b8 <__aeabi_dsub>
 800f9a4:	465a      	mov	r2, fp
 800f9a6:	464b      	mov	r3, r9
 800f9a8:	f7f0 fe3e 	bl	8000628 <__aeabi_dmul>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	4639      	mov	r1, r7
 800f9b4:	f7f0 fc80 	bl	80002b8 <__aeabi_dsub>
 800f9b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f9bc:	f7f0 fe34 	bl	8000628 <__aeabi_dmul>
 800f9c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f7f0 fe2c 	bl	8000628 <__aeabi_dmul>
 800f9d0:	a37d      	add	r3, pc, #500	@ (adr r3, 800fbc8 <__ieee754_pow+0x730>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	460d      	mov	r5, r1
 800f9da:	f7f0 fe25 	bl	8000628 <__aeabi_dmul>
 800f9de:	a37c      	add	r3, pc, #496	@ (adr r3, 800fbd0 <__ieee754_pow+0x738>)
 800f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e4:	f7f0 fc6a 	bl	80002bc <__adddf3>
 800f9e8:	4622      	mov	r2, r4
 800f9ea:	462b      	mov	r3, r5
 800f9ec:	f7f0 fe1c 	bl	8000628 <__aeabi_dmul>
 800f9f0:	a379      	add	r3, pc, #484	@ (adr r3, 800fbd8 <__ieee754_pow+0x740>)
 800f9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f6:	f7f0 fc61 	bl	80002bc <__adddf3>
 800f9fa:	4622      	mov	r2, r4
 800f9fc:	462b      	mov	r3, r5
 800f9fe:	f7f0 fe13 	bl	8000628 <__aeabi_dmul>
 800fa02:	a377      	add	r3, pc, #476	@ (adr r3, 800fbe0 <__ieee754_pow+0x748>)
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	f7f0 fc58 	bl	80002bc <__adddf3>
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	462b      	mov	r3, r5
 800fa10:	f7f0 fe0a 	bl	8000628 <__aeabi_dmul>
 800fa14:	a374      	add	r3, pc, #464	@ (adr r3, 800fbe8 <__ieee754_pow+0x750>)
 800fa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1a:	f7f0 fc4f 	bl	80002bc <__adddf3>
 800fa1e:	4622      	mov	r2, r4
 800fa20:	462b      	mov	r3, r5
 800fa22:	f7f0 fe01 	bl	8000628 <__aeabi_dmul>
 800fa26:	a372      	add	r3, pc, #456	@ (adr r3, 800fbf0 <__ieee754_pow+0x758>)
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	f7f0 fc46 	bl	80002bc <__adddf3>
 800fa30:	4622      	mov	r2, r4
 800fa32:	4606      	mov	r6, r0
 800fa34:	460f      	mov	r7, r1
 800fa36:	462b      	mov	r3, r5
 800fa38:	4620      	mov	r0, r4
 800fa3a:	4629      	mov	r1, r5
 800fa3c:	f7f0 fdf4 	bl	8000628 <__aeabi_dmul>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	4630      	mov	r0, r6
 800fa46:	4639      	mov	r1, r7
 800fa48:	f7f0 fdee 	bl	8000628 <__aeabi_dmul>
 800fa4c:	465a      	mov	r2, fp
 800fa4e:	4604      	mov	r4, r0
 800fa50:	460d      	mov	r5, r1
 800fa52:	464b      	mov	r3, r9
 800fa54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa58:	f7f0 fc30 	bl	80002bc <__adddf3>
 800fa5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa60:	f7f0 fde2 	bl	8000628 <__aeabi_dmul>
 800fa64:	4622      	mov	r2, r4
 800fa66:	462b      	mov	r3, r5
 800fa68:	f7f0 fc28 	bl	80002bc <__adddf3>
 800fa6c:	465a      	mov	r2, fp
 800fa6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa72:	464b      	mov	r3, r9
 800fa74:	4658      	mov	r0, fp
 800fa76:	4649      	mov	r1, r9
 800fa78:	f7f0 fdd6 	bl	8000628 <__aeabi_dmul>
 800fa7c:	4b6a      	ldr	r3, [pc, #424]	@ (800fc28 <__ieee754_pow+0x790>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	4606      	mov	r6, r0
 800fa82:	460f      	mov	r7, r1
 800fa84:	f7f0 fc1a 	bl	80002bc <__adddf3>
 800fa88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fa8c:	f7f0 fc16 	bl	80002bc <__adddf3>
 800fa90:	46d8      	mov	r8, fp
 800fa92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fa96:	460d      	mov	r5, r1
 800fa98:	465a      	mov	r2, fp
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	4640      	mov	r0, r8
 800fa9e:	4649      	mov	r1, r9
 800faa0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800faa4:	f7f0 fdc0 	bl	8000628 <__aeabi_dmul>
 800faa8:	465c      	mov	r4, fp
 800faaa:	4680      	mov	r8, r0
 800faac:	4689      	mov	r9, r1
 800faae:	4b5e      	ldr	r3, [pc, #376]	@ (800fc28 <__ieee754_pow+0x790>)
 800fab0:	2200      	movs	r2, #0
 800fab2:	4620      	mov	r0, r4
 800fab4:	4629      	mov	r1, r5
 800fab6:	f7f0 fbff 	bl	80002b8 <__aeabi_dsub>
 800faba:	4632      	mov	r2, r6
 800fabc:	463b      	mov	r3, r7
 800fabe:	f7f0 fbfb 	bl	80002b8 <__aeabi_dsub>
 800fac2:	4602      	mov	r2, r0
 800fac4:	460b      	mov	r3, r1
 800fac6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800faca:	f7f0 fbf5 	bl	80002b8 <__aeabi_dsub>
 800face:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fad2:	f7f0 fda9 	bl	8000628 <__aeabi_dmul>
 800fad6:	4622      	mov	r2, r4
 800fad8:	4606      	mov	r6, r0
 800fada:	460f      	mov	r7, r1
 800fadc:	462b      	mov	r3, r5
 800fade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fae2:	f7f0 fda1 	bl	8000628 <__aeabi_dmul>
 800fae6:	4602      	mov	r2, r0
 800fae8:	460b      	mov	r3, r1
 800faea:	4630      	mov	r0, r6
 800faec:	4639      	mov	r1, r7
 800faee:	f7f0 fbe5 	bl	80002bc <__adddf3>
 800faf2:	4606      	mov	r6, r0
 800faf4:	460f      	mov	r7, r1
 800faf6:	4602      	mov	r2, r0
 800faf8:	460b      	mov	r3, r1
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	f7f0 fbdd 	bl	80002bc <__adddf3>
 800fb02:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fb06:	a33c      	add	r3, pc, #240	@ (adr r3, 800fbf8 <__ieee754_pow+0x760>)
 800fb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0c:	4658      	mov	r0, fp
 800fb0e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fb12:	460d      	mov	r5, r1
 800fb14:	f7f0 fd88 	bl	8000628 <__aeabi_dmul>
 800fb18:	465c      	mov	r4, fp
 800fb1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb1e:	4642      	mov	r2, r8
 800fb20:	464b      	mov	r3, r9
 800fb22:	4620      	mov	r0, r4
 800fb24:	4629      	mov	r1, r5
 800fb26:	f7f0 fbc7 	bl	80002b8 <__aeabi_dsub>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	4630      	mov	r0, r6
 800fb30:	4639      	mov	r1, r7
 800fb32:	f7f0 fbc1 	bl	80002b8 <__aeabi_dsub>
 800fb36:	a332      	add	r3, pc, #200	@ (adr r3, 800fc00 <__ieee754_pow+0x768>)
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	f7f0 fd74 	bl	8000628 <__aeabi_dmul>
 800fb40:	a331      	add	r3, pc, #196	@ (adr r3, 800fc08 <__ieee754_pow+0x770>)
 800fb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb46:	4606      	mov	r6, r0
 800fb48:	460f      	mov	r7, r1
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	f7f0 fd6b 	bl	8000628 <__aeabi_dmul>
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	4630      	mov	r0, r6
 800fb58:	4639      	mov	r1, r7
 800fb5a:	f7f0 fbaf 	bl	80002bc <__adddf3>
 800fb5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb60:	4b32      	ldr	r3, [pc, #200]	@ (800fc2c <__ieee754_pow+0x794>)
 800fb62:	4413      	add	r3, r2
 800fb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb68:	f7f0 fba8 	bl	80002bc <__adddf3>
 800fb6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb72:	f7f0 fcef 	bl	8000554 <__aeabi_i2d>
 800fb76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb78:	4b2d      	ldr	r3, [pc, #180]	@ (800fc30 <__ieee754_pow+0x798>)
 800fb7a:	4413      	add	r3, r2
 800fb7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb80:	4606      	mov	r6, r0
 800fb82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb86:	460f      	mov	r7, r1
 800fb88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb8c:	f7f0 fb96 	bl	80002bc <__adddf3>
 800fb90:	4642      	mov	r2, r8
 800fb92:	464b      	mov	r3, r9
 800fb94:	f7f0 fb92 	bl	80002bc <__adddf3>
 800fb98:	4632      	mov	r2, r6
 800fb9a:	463b      	mov	r3, r7
 800fb9c:	f7f0 fb8e 	bl	80002bc <__adddf3>
 800fba0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fba4:	4632      	mov	r2, r6
 800fba6:	463b      	mov	r3, r7
 800fba8:	4658      	mov	r0, fp
 800fbaa:	460d      	mov	r5, r1
 800fbac:	f7f0 fb84 	bl	80002b8 <__aeabi_dsub>
 800fbb0:	4642      	mov	r2, r8
 800fbb2:	464b      	mov	r3, r9
 800fbb4:	f7f0 fb80 	bl	80002b8 <__aeabi_dsub>
 800fbb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbbc:	f7f0 fb7c 	bl	80002b8 <__aeabi_dsub>
 800fbc0:	465c      	mov	r4, fp
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	e036      	b.n	800fc34 <__ieee754_pow+0x79c>
 800fbc6:	bf00      	nop
 800fbc8:	4a454eef 	.word	0x4a454eef
 800fbcc:	3fca7e28 	.word	0x3fca7e28
 800fbd0:	93c9db65 	.word	0x93c9db65
 800fbd4:	3fcd864a 	.word	0x3fcd864a
 800fbd8:	a91d4101 	.word	0xa91d4101
 800fbdc:	3fd17460 	.word	0x3fd17460
 800fbe0:	518f264d 	.word	0x518f264d
 800fbe4:	3fd55555 	.word	0x3fd55555
 800fbe8:	db6fabff 	.word	0xdb6fabff
 800fbec:	3fdb6db6 	.word	0x3fdb6db6
 800fbf0:	33333303 	.word	0x33333303
 800fbf4:	3fe33333 	.word	0x3fe33333
 800fbf8:	e0000000 	.word	0xe0000000
 800fbfc:	3feec709 	.word	0x3feec709
 800fc00:	dc3a03fd 	.word	0xdc3a03fd
 800fc04:	3feec709 	.word	0x3feec709
 800fc08:	145b01f5 	.word	0x145b01f5
 800fc0c:	be3e2fe0 	.word	0xbe3e2fe0
 800fc10:	7ff00000 	.word	0x7ff00000
 800fc14:	43400000 	.word	0x43400000
 800fc18:	0003988e 	.word	0x0003988e
 800fc1c:	000bb679 	.word	0x000bb679
 800fc20:	08011100 	.word	0x08011100
 800fc24:	3ff00000 	.word	0x3ff00000
 800fc28:	40080000 	.word	0x40080000
 800fc2c:	080110e0 	.word	0x080110e0
 800fc30:	080110f0 	.word	0x080110f0
 800fc34:	460b      	mov	r3, r1
 800fc36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc3a:	e5d7      	b.n	800f7ec <__ieee754_pow+0x354>
 800fc3c:	f04f 0a01 	mov.w	sl, #1
 800fc40:	e65e      	b.n	800f900 <__ieee754_pow+0x468>
 800fc42:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ff14 <__ieee754_pow+0xa7c>)
 800fc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc48:	4630      	mov	r0, r6
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	f7f0 fb36 	bl	80002bc <__adddf3>
 800fc50:	4642      	mov	r2, r8
 800fc52:	e9cd 0100 	strd	r0, r1, [sp]
 800fc56:	464b      	mov	r3, r9
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f7f0 fb2c 	bl	80002b8 <__aeabi_dsub>
 800fc60:	4602      	mov	r2, r0
 800fc62:	460b      	mov	r3, r1
 800fc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc68:	f7f0 ff6e 	bl	8000b48 <__aeabi_dcmpgt>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	f47f ae00 	bne.w	800f872 <__ieee754_pow+0x3da>
 800fc72:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800fc76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fc7a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800fc7e:	fa43 fa0a 	asr.w	sl, r3, sl
 800fc82:	44da      	add	sl, fp
 800fc84:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fc88:	489d      	ldr	r0, [pc, #628]	@ (800ff00 <__ieee754_pow+0xa68>)
 800fc8a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fc8e:	4108      	asrs	r0, r1
 800fc90:	ea00 030a 	and.w	r3, r0, sl
 800fc94:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fc98:	f1c1 0114 	rsb	r1, r1, #20
 800fc9c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fca0:	fa4a fa01 	asr.w	sl, sl, r1
 800fca4:	f1bb 0f00 	cmp.w	fp, #0
 800fca8:	4640      	mov	r0, r8
 800fcaa:	4649      	mov	r1, r9
 800fcac:	f04f 0200 	mov.w	r2, #0
 800fcb0:	bfb8      	it	lt
 800fcb2:	f1ca 0a00 	rsblt	sl, sl, #0
 800fcb6:	f7f0 faff 	bl	80002b8 <__aeabi_dsub>
 800fcba:	4680      	mov	r8, r0
 800fcbc:	4689      	mov	r9, r1
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	463b      	mov	r3, r7
 800fcc2:	4640      	mov	r0, r8
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	f7f0 faf9 	bl	80002bc <__adddf3>
 800fcca:	2400      	movs	r4, #0
 800fccc:	a37c      	add	r3, pc, #496	@ (adr r3, 800fec0 <__ieee754_pow+0xa28>)
 800fcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	460d      	mov	r5, r1
 800fcd6:	f7f0 fca7 	bl	8000628 <__aeabi_dmul>
 800fcda:	4642      	mov	r2, r8
 800fcdc:	e9cd 0100 	strd	r0, r1, [sp]
 800fce0:	464b      	mov	r3, r9
 800fce2:	4620      	mov	r0, r4
 800fce4:	4629      	mov	r1, r5
 800fce6:	f7f0 fae7 	bl	80002b8 <__aeabi_dsub>
 800fcea:	4602      	mov	r2, r0
 800fcec:	460b      	mov	r3, r1
 800fcee:	4630      	mov	r0, r6
 800fcf0:	4639      	mov	r1, r7
 800fcf2:	f7f0 fae1 	bl	80002b8 <__aeabi_dsub>
 800fcf6:	a374      	add	r3, pc, #464	@ (adr r3, 800fec8 <__ieee754_pow+0xa30>)
 800fcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfc:	f7f0 fc94 	bl	8000628 <__aeabi_dmul>
 800fd00:	a373      	add	r3, pc, #460	@ (adr r3, 800fed0 <__ieee754_pow+0xa38>)
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	4680      	mov	r8, r0
 800fd08:	4689      	mov	r9, r1
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	f7f0 fc8b 	bl	8000628 <__aeabi_dmul>
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	4640      	mov	r0, r8
 800fd18:	4649      	mov	r1, r9
 800fd1a:	f7f0 facf 	bl	80002bc <__adddf3>
 800fd1e:	4604      	mov	r4, r0
 800fd20:	460d      	mov	r5, r1
 800fd22:	4602      	mov	r2, r0
 800fd24:	460b      	mov	r3, r1
 800fd26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd2a:	f7f0 fac7 	bl	80002bc <__adddf3>
 800fd2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd32:	4680      	mov	r8, r0
 800fd34:	4689      	mov	r9, r1
 800fd36:	f7f0 fabf 	bl	80002b8 <__aeabi_dsub>
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4620      	mov	r0, r4
 800fd40:	4629      	mov	r1, r5
 800fd42:	f7f0 fab9 	bl	80002b8 <__aeabi_dsub>
 800fd46:	4642      	mov	r2, r8
 800fd48:	4606      	mov	r6, r0
 800fd4a:	460f      	mov	r7, r1
 800fd4c:	464b      	mov	r3, r9
 800fd4e:	4640      	mov	r0, r8
 800fd50:	4649      	mov	r1, r9
 800fd52:	f7f0 fc69 	bl	8000628 <__aeabi_dmul>
 800fd56:	a360      	add	r3, pc, #384	@ (adr r3, 800fed8 <__ieee754_pow+0xa40>)
 800fd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	460d      	mov	r5, r1
 800fd60:	f7f0 fc62 	bl	8000628 <__aeabi_dmul>
 800fd64:	a35e      	add	r3, pc, #376	@ (adr r3, 800fee0 <__ieee754_pow+0xa48>)
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	f7f0 faa5 	bl	80002b8 <__aeabi_dsub>
 800fd6e:	4622      	mov	r2, r4
 800fd70:	462b      	mov	r3, r5
 800fd72:	f7f0 fc59 	bl	8000628 <__aeabi_dmul>
 800fd76:	a35c      	add	r3, pc, #368	@ (adr r3, 800fee8 <__ieee754_pow+0xa50>)
 800fd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7c:	f7f0 fa9e 	bl	80002bc <__adddf3>
 800fd80:	4622      	mov	r2, r4
 800fd82:	462b      	mov	r3, r5
 800fd84:	f7f0 fc50 	bl	8000628 <__aeabi_dmul>
 800fd88:	a359      	add	r3, pc, #356	@ (adr r3, 800fef0 <__ieee754_pow+0xa58>)
 800fd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8e:	f7f0 fa93 	bl	80002b8 <__aeabi_dsub>
 800fd92:	4622      	mov	r2, r4
 800fd94:	462b      	mov	r3, r5
 800fd96:	f7f0 fc47 	bl	8000628 <__aeabi_dmul>
 800fd9a:	a357      	add	r3, pc, #348	@ (adr r3, 800fef8 <__ieee754_pow+0xa60>)
 800fd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda0:	f7f0 fa8c 	bl	80002bc <__adddf3>
 800fda4:	4622      	mov	r2, r4
 800fda6:	462b      	mov	r3, r5
 800fda8:	f7f0 fc3e 	bl	8000628 <__aeabi_dmul>
 800fdac:	4602      	mov	r2, r0
 800fdae:	460b      	mov	r3, r1
 800fdb0:	4640      	mov	r0, r8
 800fdb2:	4649      	mov	r1, r9
 800fdb4:	f7f0 fa80 	bl	80002b8 <__aeabi_dsub>
 800fdb8:	4604      	mov	r4, r0
 800fdba:	460d      	mov	r5, r1
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	460b      	mov	r3, r1
 800fdc0:	4640      	mov	r0, r8
 800fdc2:	4649      	mov	r1, r9
 800fdc4:	f7f0 fc30 	bl	8000628 <__aeabi_dmul>
 800fdc8:	2200      	movs	r2, #0
 800fdca:	e9cd 0100 	strd	r0, r1, [sp]
 800fdce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	f7f0 fa6f 	bl	80002b8 <__aeabi_dsub>
 800fdda:	4602      	mov	r2, r0
 800fddc:	460b      	mov	r3, r1
 800fdde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fde2:	f7f0 fd4b 	bl	800087c <__aeabi_ddiv>
 800fde6:	4632      	mov	r2, r6
 800fde8:	4604      	mov	r4, r0
 800fdea:	460d      	mov	r5, r1
 800fdec:	463b      	mov	r3, r7
 800fdee:	4640      	mov	r0, r8
 800fdf0:	4649      	mov	r1, r9
 800fdf2:	f7f0 fc19 	bl	8000628 <__aeabi_dmul>
 800fdf6:	4632      	mov	r2, r6
 800fdf8:	463b      	mov	r3, r7
 800fdfa:	f7f0 fa5f 	bl	80002bc <__adddf3>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	460b      	mov	r3, r1
 800fe02:	4620      	mov	r0, r4
 800fe04:	4629      	mov	r1, r5
 800fe06:	f7f0 fa57 	bl	80002b8 <__aeabi_dsub>
 800fe0a:	4642      	mov	r2, r8
 800fe0c:	464b      	mov	r3, r9
 800fe0e:	f7f0 fa53 	bl	80002b8 <__aeabi_dsub>
 800fe12:	460b      	mov	r3, r1
 800fe14:	4602      	mov	r2, r0
 800fe16:	493b      	ldr	r1, [pc, #236]	@ (800ff04 <__ieee754_pow+0xa6c>)
 800fe18:	2000      	movs	r0, #0
 800fe1a:	f7f0 fa4d 	bl	80002b8 <__aeabi_dsub>
 800fe1e:	ec41 0b10 	vmov	d0, r0, r1
 800fe22:	ee10 3a90 	vmov	r3, s1
 800fe26:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fe2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe2e:	da30      	bge.n	800fe92 <__ieee754_pow+0x9fa>
 800fe30:	4650      	mov	r0, sl
 800fe32:	f000 f87d 	bl	800ff30 <scalbn>
 800fe36:	ec51 0b10 	vmov	r0, r1, d0
 800fe3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe3e:	f7ff bbd2 	b.w	800f5e6 <__ieee754_pow+0x14e>
 800fe42:	4c31      	ldr	r4, [pc, #196]	@ (800ff08 <__ieee754_pow+0xa70>)
 800fe44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe48:	42a3      	cmp	r3, r4
 800fe4a:	d91a      	bls.n	800fe82 <__ieee754_pow+0x9ea>
 800fe4c:	4b2f      	ldr	r3, [pc, #188]	@ (800ff0c <__ieee754_pow+0xa74>)
 800fe4e:	440b      	add	r3, r1
 800fe50:	4303      	orrs	r3, r0
 800fe52:	d009      	beq.n	800fe68 <__ieee754_pow+0x9d0>
 800fe54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	f7f0 fe56 	bl	8000b0c <__aeabi_dcmplt>
 800fe60:	3800      	subs	r0, #0
 800fe62:	bf18      	it	ne
 800fe64:	2001      	movne	r0, #1
 800fe66:	e42b      	b.n	800f6c0 <__ieee754_pow+0x228>
 800fe68:	4642      	mov	r2, r8
 800fe6a:	464b      	mov	r3, r9
 800fe6c:	f7f0 fa24 	bl	80002b8 <__aeabi_dsub>
 800fe70:	4632      	mov	r2, r6
 800fe72:	463b      	mov	r3, r7
 800fe74:	f7f0 fe5e 	bl	8000b34 <__aeabi_dcmpge>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	d1eb      	bne.n	800fe54 <__ieee754_pow+0x9bc>
 800fe7c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ff1c <__ieee754_pow+0xa84>
 800fe80:	e6f7      	b.n	800fc72 <__ieee754_pow+0x7da>
 800fe82:	469a      	mov	sl, r3
 800fe84:	4b22      	ldr	r3, [pc, #136]	@ (800ff10 <__ieee754_pow+0xa78>)
 800fe86:	459a      	cmp	sl, r3
 800fe88:	f63f aef3 	bhi.w	800fc72 <__ieee754_pow+0x7da>
 800fe8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fe90:	e715      	b.n	800fcbe <__ieee754_pow+0x826>
 800fe92:	ec51 0b10 	vmov	r0, r1, d0
 800fe96:	4619      	mov	r1, r3
 800fe98:	e7cf      	b.n	800fe3a <__ieee754_pow+0x9a2>
 800fe9a:	491a      	ldr	r1, [pc, #104]	@ (800ff04 <__ieee754_pow+0xa6c>)
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	f7ff bb18 	b.w	800f4d2 <__ieee754_pow+0x3a>
 800fea2:	2000      	movs	r0, #0
 800fea4:	2100      	movs	r1, #0
 800fea6:	f7ff bb14 	b.w	800f4d2 <__ieee754_pow+0x3a>
 800feaa:	4630      	mov	r0, r6
 800feac:	4639      	mov	r1, r7
 800feae:	f7ff bb10 	b.w	800f4d2 <__ieee754_pow+0x3a>
 800feb2:	460c      	mov	r4, r1
 800feb4:	f7ff bb5e 	b.w	800f574 <__ieee754_pow+0xdc>
 800feb8:	2400      	movs	r4, #0
 800feba:	f7ff bb49 	b.w	800f550 <__ieee754_pow+0xb8>
 800febe:	bf00      	nop
 800fec0:	00000000 	.word	0x00000000
 800fec4:	3fe62e43 	.word	0x3fe62e43
 800fec8:	fefa39ef 	.word	0xfefa39ef
 800fecc:	3fe62e42 	.word	0x3fe62e42
 800fed0:	0ca86c39 	.word	0x0ca86c39
 800fed4:	be205c61 	.word	0xbe205c61
 800fed8:	72bea4d0 	.word	0x72bea4d0
 800fedc:	3e663769 	.word	0x3e663769
 800fee0:	c5d26bf1 	.word	0xc5d26bf1
 800fee4:	3ebbbd41 	.word	0x3ebbbd41
 800fee8:	af25de2c 	.word	0xaf25de2c
 800feec:	3f11566a 	.word	0x3f11566a
 800fef0:	16bebd93 	.word	0x16bebd93
 800fef4:	3f66c16c 	.word	0x3f66c16c
 800fef8:	5555553e 	.word	0x5555553e
 800fefc:	3fc55555 	.word	0x3fc55555
 800ff00:	fff00000 	.word	0xfff00000
 800ff04:	3ff00000 	.word	0x3ff00000
 800ff08:	4090cbff 	.word	0x4090cbff
 800ff0c:	3f6f3400 	.word	0x3f6f3400
 800ff10:	3fe00000 	.word	0x3fe00000
 800ff14:	652b82fe 	.word	0x652b82fe
 800ff18:	3c971547 	.word	0x3c971547
 800ff1c:	4090cc00 	.word	0x4090cc00

0800ff20 <fabs>:
 800ff20:	ec51 0b10 	vmov	r0, r1, d0
 800ff24:	4602      	mov	r2, r0
 800ff26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ff2a:	ec43 2b10 	vmov	d0, r2, r3
 800ff2e:	4770      	bx	lr

0800ff30 <scalbn>:
 800ff30:	b570      	push	{r4, r5, r6, lr}
 800ff32:	ec55 4b10 	vmov	r4, r5, d0
 800ff36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	462b      	mov	r3, r5
 800ff3e:	b991      	cbnz	r1, 800ff66 <scalbn+0x36>
 800ff40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ff44:	4323      	orrs	r3, r4
 800ff46:	d03d      	beq.n	800ffc4 <scalbn+0x94>
 800ff48:	4b35      	ldr	r3, [pc, #212]	@ (8010020 <scalbn+0xf0>)
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f7f0 fb6a 	bl	8000628 <__aeabi_dmul>
 800ff54:	4b33      	ldr	r3, [pc, #204]	@ (8010024 <scalbn+0xf4>)
 800ff56:	429e      	cmp	r6, r3
 800ff58:	4604      	mov	r4, r0
 800ff5a:	460d      	mov	r5, r1
 800ff5c:	da0f      	bge.n	800ff7e <scalbn+0x4e>
 800ff5e:	a328      	add	r3, pc, #160	@ (adr r3, 8010000 <scalbn+0xd0>)
 800ff60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff64:	e01e      	b.n	800ffa4 <scalbn+0x74>
 800ff66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ff6a:	4291      	cmp	r1, r2
 800ff6c:	d10b      	bne.n	800ff86 <scalbn+0x56>
 800ff6e:	4622      	mov	r2, r4
 800ff70:	4620      	mov	r0, r4
 800ff72:	4629      	mov	r1, r5
 800ff74:	f7f0 f9a2 	bl	80002bc <__adddf3>
 800ff78:	4604      	mov	r4, r0
 800ff7a:	460d      	mov	r5, r1
 800ff7c:	e022      	b.n	800ffc4 <scalbn+0x94>
 800ff7e:	460b      	mov	r3, r1
 800ff80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ff84:	3936      	subs	r1, #54	@ 0x36
 800ff86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ff8a:	4296      	cmp	r6, r2
 800ff8c:	dd0d      	ble.n	800ffaa <scalbn+0x7a>
 800ff8e:	2d00      	cmp	r5, #0
 800ff90:	a11d      	add	r1, pc, #116	@ (adr r1, 8010008 <scalbn+0xd8>)
 800ff92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff96:	da02      	bge.n	800ff9e <scalbn+0x6e>
 800ff98:	a11d      	add	r1, pc, #116	@ (adr r1, 8010010 <scalbn+0xe0>)
 800ff9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8010008 <scalbn+0xd8>)
 800ffa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa4:	f7f0 fb40 	bl	8000628 <__aeabi_dmul>
 800ffa8:	e7e6      	b.n	800ff78 <scalbn+0x48>
 800ffaa:	1872      	adds	r2, r6, r1
 800ffac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ffb0:	428a      	cmp	r2, r1
 800ffb2:	dcec      	bgt.n	800ff8e <scalbn+0x5e>
 800ffb4:	2a00      	cmp	r2, #0
 800ffb6:	dd08      	ble.n	800ffca <scalbn+0x9a>
 800ffb8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ffbc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ffc0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ffc4:	ec45 4b10 	vmov	d0, r4, r5
 800ffc8:	bd70      	pop	{r4, r5, r6, pc}
 800ffca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ffce:	da08      	bge.n	800ffe2 <scalbn+0xb2>
 800ffd0:	2d00      	cmp	r5, #0
 800ffd2:	a10b      	add	r1, pc, #44	@ (adr r1, 8010000 <scalbn+0xd0>)
 800ffd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd8:	dac1      	bge.n	800ff5e <scalbn+0x2e>
 800ffda:	a10f      	add	r1, pc, #60	@ (adr r1, 8010018 <scalbn+0xe8>)
 800ffdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffe0:	e7bd      	b.n	800ff5e <scalbn+0x2e>
 800ffe2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ffe6:	3236      	adds	r2, #54	@ 0x36
 800ffe8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ffec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fff0:	4620      	mov	r0, r4
 800fff2:	4b0d      	ldr	r3, [pc, #52]	@ (8010028 <scalbn+0xf8>)
 800fff4:	4629      	mov	r1, r5
 800fff6:	2200      	movs	r2, #0
 800fff8:	e7d4      	b.n	800ffa4 <scalbn+0x74>
 800fffa:	bf00      	nop
 800fffc:	f3af 8000 	nop.w
 8010000:	c2f8f359 	.word	0xc2f8f359
 8010004:	01a56e1f 	.word	0x01a56e1f
 8010008:	8800759c 	.word	0x8800759c
 801000c:	7e37e43c 	.word	0x7e37e43c
 8010010:	8800759c 	.word	0x8800759c
 8010014:	fe37e43c 	.word	0xfe37e43c
 8010018:	c2f8f359 	.word	0xc2f8f359
 801001c:	81a56e1f 	.word	0x81a56e1f
 8010020:	43500000 	.word	0x43500000
 8010024:	ffff3cb0 	.word	0xffff3cb0
 8010028:	3c900000 	.word	0x3c900000

0801002c <with_errno>:
 801002c:	b510      	push	{r4, lr}
 801002e:	ed2d 8b02 	vpush	{d8}
 8010032:	eeb0 8a40 	vmov.f32	s16, s0
 8010036:	eef0 8a60 	vmov.f32	s17, s1
 801003a:	4604      	mov	r4, r0
 801003c:	f7fb fb08 	bl	800b650 <__errno>
 8010040:	eeb0 0a48 	vmov.f32	s0, s16
 8010044:	eef0 0a68 	vmov.f32	s1, s17
 8010048:	ecbd 8b02 	vpop	{d8}
 801004c:	6004      	str	r4, [r0, #0]
 801004e:	bd10      	pop	{r4, pc}

08010050 <xflow>:
 8010050:	4603      	mov	r3, r0
 8010052:	b507      	push	{r0, r1, r2, lr}
 8010054:	ec51 0b10 	vmov	r0, r1, d0
 8010058:	b183      	cbz	r3, 801007c <xflow+0x2c>
 801005a:	4602      	mov	r2, r0
 801005c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010060:	e9cd 2300 	strd	r2, r3, [sp]
 8010064:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010068:	f7f0 fade 	bl	8000628 <__aeabi_dmul>
 801006c:	ec41 0b10 	vmov	d0, r0, r1
 8010070:	2022      	movs	r0, #34	@ 0x22
 8010072:	b003      	add	sp, #12
 8010074:	f85d eb04 	ldr.w	lr, [sp], #4
 8010078:	f7ff bfd8 	b.w	801002c <with_errno>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	e7ee      	b.n	8010060 <xflow+0x10>
 8010082:	0000      	movs	r0, r0
 8010084:	0000      	movs	r0, r0
	...

08010088 <__math_uflow>:
 8010088:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010090 <__math_uflow+0x8>
 801008c:	f7ff bfe0 	b.w	8010050 <xflow>
 8010090:	00000000 	.word	0x00000000
 8010094:	10000000 	.word	0x10000000

08010098 <__math_oflow>:
 8010098:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80100a0 <__math_oflow+0x8>
 801009c:	f7ff bfd8 	b.w	8010050 <xflow>
 80100a0:	00000000 	.word	0x00000000
 80100a4:	70000000 	.word	0x70000000

080100a8 <__ieee754_sqrt>:
 80100a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	4a68      	ldr	r2, [pc, #416]	@ (8010250 <__ieee754_sqrt+0x1a8>)
 80100ae:	ec55 4b10 	vmov	r4, r5, d0
 80100b2:	43aa      	bics	r2, r5
 80100b4:	462b      	mov	r3, r5
 80100b6:	4621      	mov	r1, r4
 80100b8:	d110      	bne.n	80100dc <__ieee754_sqrt+0x34>
 80100ba:	4622      	mov	r2, r4
 80100bc:	4620      	mov	r0, r4
 80100be:	4629      	mov	r1, r5
 80100c0:	f7f0 fab2 	bl	8000628 <__aeabi_dmul>
 80100c4:	4602      	mov	r2, r0
 80100c6:	460b      	mov	r3, r1
 80100c8:	4620      	mov	r0, r4
 80100ca:	4629      	mov	r1, r5
 80100cc:	f7f0 f8f6 	bl	80002bc <__adddf3>
 80100d0:	4604      	mov	r4, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	ec45 4b10 	vmov	d0, r4, r5
 80100d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	2d00      	cmp	r5, #0
 80100de:	dc0e      	bgt.n	80100fe <__ieee754_sqrt+0x56>
 80100e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80100e4:	4322      	orrs	r2, r4
 80100e6:	d0f5      	beq.n	80100d4 <__ieee754_sqrt+0x2c>
 80100e8:	b19d      	cbz	r5, 8010112 <__ieee754_sqrt+0x6a>
 80100ea:	4622      	mov	r2, r4
 80100ec:	4620      	mov	r0, r4
 80100ee:	4629      	mov	r1, r5
 80100f0:	f7f0 f8e2 	bl	80002b8 <__aeabi_dsub>
 80100f4:	4602      	mov	r2, r0
 80100f6:	460b      	mov	r3, r1
 80100f8:	f7f0 fbc0 	bl	800087c <__aeabi_ddiv>
 80100fc:	e7e8      	b.n	80100d0 <__ieee754_sqrt+0x28>
 80100fe:	152a      	asrs	r2, r5, #20
 8010100:	d115      	bne.n	801012e <__ieee754_sqrt+0x86>
 8010102:	2000      	movs	r0, #0
 8010104:	e009      	b.n	801011a <__ieee754_sqrt+0x72>
 8010106:	0acb      	lsrs	r3, r1, #11
 8010108:	3a15      	subs	r2, #21
 801010a:	0549      	lsls	r1, r1, #21
 801010c:	2b00      	cmp	r3, #0
 801010e:	d0fa      	beq.n	8010106 <__ieee754_sqrt+0x5e>
 8010110:	e7f7      	b.n	8010102 <__ieee754_sqrt+0x5a>
 8010112:	462a      	mov	r2, r5
 8010114:	e7fa      	b.n	801010c <__ieee754_sqrt+0x64>
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	3001      	adds	r0, #1
 801011a:	02dc      	lsls	r4, r3, #11
 801011c:	d5fb      	bpl.n	8010116 <__ieee754_sqrt+0x6e>
 801011e:	1e44      	subs	r4, r0, #1
 8010120:	1b12      	subs	r2, r2, r4
 8010122:	f1c0 0420 	rsb	r4, r0, #32
 8010126:	fa21 f404 	lsr.w	r4, r1, r4
 801012a:	4323      	orrs	r3, r4
 801012c:	4081      	lsls	r1, r0
 801012e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010132:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801013a:	07d2      	lsls	r2, r2, #31
 801013c:	bf5c      	itt	pl
 801013e:	005b      	lslpl	r3, r3, #1
 8010140:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010148:	bf58      	it	pl
 801014a:	0049      	lslpl	r1, r1, #1
 801014c:	2600      	movs	r6, #0
 801014e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010152:	106d      	asrs	r5, r5, #1
 8010154:	0049      	lsls	r1, r1, #1
 8010156:	2016      	movs	r0, #22
 8010158:	4632      	mov	r2, r6
 801015a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801015e:	1917      	adds	r7, r2, r4
 8010160:	429f      	cmp	r7, r3
 8010162:	bfde      	ittt	le
 8010164:	193a      	addle	r2, r7, r4
 8010166:	1bdb      	suble	r3, r3, r7
 8010168:	1936      	addle	r6, r6, r4
 801016a:	0fcf      	lsrs	r7, r1, #31
 801016c:	3801      	subs	r0, #1
 801016e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010172:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010176:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801017a:	d1f0      	bne.n	801015e <__ieee754_sqrt+0xb6>
 801017c:	4604      	mov	r4, r0
 801017e:	2720      	movs	r7, #32
 8010180:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010184:	429a      	cmp	r2, r3
 8010186:	eb00 0e0c 	add.w	lr, r0, ip
 801018a:	db02      	blt.n	8010192 <__ieee754_sqrt+0xea>
 801018c:	d113      	bne.n	80101b6 <__ieee754_sqrt+0x10e>
 801018e:	458e      	cmp	lr, r1
 8010190:	d811      	bhi.n	80101b6 <__ieee754_sqrt+0x10e>
 8010192:	f1be 0f00 	cmp.w	lr, #0
 8010196:	eb0e 000c 	add.w	r0, lr, ip
 801019a:	da42      	bge.n	8010222 <__ieee754_sqrt+0x17a>
 801019c:	2800      	cmp	r0, #0
 801019e:	db40      	blt.n	8010222 <__ieee754_sqrt+0x17a>
 80101a0:	f102 0801 	add.w	r8, r2, #1
 80101a4:	1a9b      	subs	r3, r3, r2
 80101a6:	458e      	cmp	lr, r1
 80101a8:	bf88      	it	hi
 80101aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80101ae:	eba1 010e 	sub.w	r1, r1, lr
 80101b2:	4464      	add	r4, ip
 80101b4:	4642      	mov	r2, r8
 80101b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80101ba:	3f01      	subs	r7, #1
 80101bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80101c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80101c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80101c8:	d1dc      	bne.n	8010184 <__ieee754_sqrt+0xdc>
 80101ca:	4319      	orrs	r1, r3
 80101cc:	d01b      	beq.n	8010206 <__ieee754_sqrt+0x15e>
 80101ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010254 <__ieee754_sqrt+0x1ac>
 80101d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010258 <__ieee754_sqrt+0x1b0>
 80101d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80101da:	e9db 2300 	ldrd	r2, r3, [fp]
 80101de:	f7f0 f86b 	bl	80002b8 <__aeabi_dsub>
 80101e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80101e6:	4602      	mov	r2, r0
 80101e8:	460b      	mov	r3, r1
 80101ea:	4640      	mov	r0, r8
 80101ec:	4649      	mov	r1, r9
 80101ee:	f7f0 fc97 	bl	8000b20 <__aeabi_dcmple>
 80101f2:	b140      	cbz	r0, 8010206 <__ieee754_sqrt+0x15e>
 80101f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80101f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80101fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8010200:	d111      	bne.n	8010226 <__ieee754_sqrt+0x17e>
 8010202:	3601      	adds	r6, #1
 8010204:	463c      	mov	r4, r7
 8010206:	1072      	asrs	r2, r6, #1
 8010208:	0863      	lsrs	r3, r4, #1
 801020a:	07f1      	lsls	r1, r6, #31
 801020c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010210:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010214:	bf48      	it	mi
 8010216:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801021a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801021e:	4618      	mov	r0, r3
 8010220:	e756      	b.n	80100d0 <__ieee754_sqrt+0x28>
 8010222:	4690      	mov	r8, r2
 8010224:	e7be      	b.n	80101a4 <__ieee754_sqrt+0xfc>
 8010226:	f7f0 f849 	bl	80002bc <__adddf3>
 801022a:	e9da 8900 	ldrd	r8, r9, [sl]
 801022e:	4602      	mov	r2, r0
 8010230:	460b      	mov	r3, r1
 8010232:	4640      	mov	r0, r8
 8010234:	4649      	mov	r1, r9
 8010236:	f7f0 fc69 	bl	8000b0c <__aeabi_dcmplt>
 801023a:	b120      	cbz	r0, 8010246 <__ieee754_sqrt+0x19e>
 801023c:	1ca0      	adds	r0, r4, #2
 801023e:	bf08      	it	eq
 8010240:	3601      	addeq	r6, #1
 8010242:	3402      	adds	r4, #2
 8010244:	e7df      	b.n	8010206 <__ieee754_sqrt+0x15e>
 8010246:	1c63      	adds	r3, r4, #1
 8010248:	f023 0401 	bic.w	r4, r3, #1
 801024c:	e7db      	b.n	8010206 <__ieee754_sqrt+0x15e>
 801024e:	bf00      	nop
 8010250:	7ff00000 	.word	0x7ff00000
 8010254:	200001f8 	.word	0x200001f8
 8010258:	200001f0 	.word	0x200001f0

0801025c <_init>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	bf00      	nop
 8010260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010262:	bc08      	pop	{r3}
 8010264:	469e      	mov	lr, r3
 8010266:	4770      	bx	lr

08010268 <_fini>:
 8010268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026a:	bf00      	nop
 801026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801026e:	bc08      	pop	{r3}
 8010270:	469e      	mov	lr, r3
 8010272:	4770      	bx	lr
