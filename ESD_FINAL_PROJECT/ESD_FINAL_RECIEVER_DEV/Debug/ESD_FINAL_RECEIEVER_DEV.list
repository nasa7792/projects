
ESD_FINAL_RECEIEVER_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000364c  08003628  08003628  00004628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00007c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c80  08006c80  00007c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006c84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000068  08006cec  00008068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08006cec  000081f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063b4  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b99  00000000  00000000  0000e44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004c3  00000000  00000000  00010698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d86  00000000  00000000  00010b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000885e  00000000  00000000  000278e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ff2  00000000  00000000  0003013f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021bc  00000000  00000000  000b6174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b8330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003610 	.word	0x08003610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003610 	.word	0x08003610

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <millis>:
}



uint64_t millis()
	{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000576:	b672      	cpsid	i
}
 8000578:	bf00      	nop
	__disable_irq();
	uint64_t ml=mil;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <millis+0x2c>)
 800057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000580:	e9c7 2300 	strd	r2, r3, [r7]
  __ASM volatile ("cpsie i" : : : "memory");
 8000584:	b662      	cpsie	i
}
 8000586:	bf00      	nop
	__enable_irq();
	return ml;
 8000588:	e9d7 2300 	ldrd	r2, r3, [r7]
	}
 800058c:	4610      	mov	r0, r2
 800058e:	4619      	mov	r1, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000088 	.word	0x20000088

080005a0 <delay>:



void delay(uint32_t time)
	{
 80005a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]

	uint64_t start=millis();
 80005aa:	f7ff ffe1 	bl	8000570 <millis>
 80005ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
	while((millis() - start) < time);
 80005b2:	bf00      	nop
 80005b4:	f7ff ffdc 	bl	8000570 <millis>
 80005b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005bc:	1a84      	subs	r4, r0, r2
 80005be:	eb61 0503 	sbc.w	r5, r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4698      	mov	r8, r3
 80005c8:	4691      	mov	r9, r2
 80005ca:	4544      	cmp	r4, r8
 80005cc:	eb75 0309 	sbcs.w	r3, r5, r9
 80005d0:	d3f0      	bcc.n	80005b4 <delay+0x14>

	}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080005e0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
	mil++;
 80005e4:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <SysTick_Handler+0x20>)
 80005e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ea:	1c50      	adds	r0, r2, #1
 80005ec:	f143 0100 	adc.w	r1, r3, #0
 80005f0:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <SysTick_Handler+0x20>)
 80005f2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	20000088 	.word	0x20000088

08000604 <init_CSN_CE_PINS>:
PA5->CE
PA6-> no ack led
PA7-> ack led
*/
void init_CSN_CE_PINS()
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <init_CSN_CE_PINS+0x5c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060c:	4a14      	ldr	r2, [pc, #80]	@ (8000660 <init_CSN_CE_PINS+0x5c>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	@ 0x30
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER4, ESF_GPIO_MODER_OUTPUT); // CSN pin
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <init_CSN_CE_PINS+0x60>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800061c:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <init_CSN_CE_PINS+0x60>)
 800061e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000622:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOA->MODER, GPIO_MODER_MODER0, ESF_GPIO_MODER_OUTPUT); // CE pin
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <init_CSN_CE_PINS+0x60>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 0303 	bic.w	r3, r3, #3
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <init_CSN_CE_PINS+0x60>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER6, ESF_GPIO_MODER_OUTPUT); // no ack led
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <init_CSN_CE_PINS+0x64>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800063c:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <init_CSN_CE_PINS+0x64>)
 800063e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000642:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(GPIOB->MODER, GPIO_MODER_MODER7, ESF_GPIO_MODER_OUTPUT); //  ack led
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <init_CSN_CE_PINS+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800064c:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <init_CSN_CE_PINS+0x64>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400

0800066c <CSN_SELECT_NRF>:

void CSN_SELECT_NRF()
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR_4; // pull low to enable nrf
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <CSN_SELECT_NRF+0x1c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <CSN_SELECT_NRF+0x1c>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800067a:	6193      	str	r3, [r2, #24]
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40020000 	.word	0x40020000

0800068c <CSN_UNSELECT_NRF>:

void CSN_UNSELECT_NRF()
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS_4; // make high to disable
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <CSN_UNSELECT_NRF+0x1c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <CSN_UNSELECT_NRF+0x1c>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6193      	str	r3, [r2, #24]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000

080006ac <NRF_ENABLE>:

void NRF_ENABLE()
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BS_0; // enable nrf
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <NRF_ENABLE+0x1c>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <NRF_ENABLE+0x1c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6193      	str	r3, [r2, #24]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40020000 	.word	0x40020000

080006cc <NRF_DISABLE>:

void NRF_DISABLE()
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	GPIOA->BSRR |= GPIO_BSRR_BR_0; // disable nrf
 80006d0:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <NRF_DISABLE+0x1c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <NRF_DISABLE+0x1c>)
 80006d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006da:	6193      	str	r3, [r2, #24]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40020000 	.word	0x40020000

080006ec <NRF_WRITE_REGISTER>:

void NRF_WRITE_REGISTER(uint8_t REG_ADDRESS, uint8_t data)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
	uint8_t trans_buff[2];					  // create a temporary transmit buffer
	trans_buff[0] = REG_ADDRESS | W_REGISTER; // send register address with Write command to nrf
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f043 0320 	orr.w	r3, r3, #32
 8000702:	b2db      	uxtb	r3, r3
 8000704:	733b      	strb	r3, [r7, #12]
	trans_buff[1] = data;
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	737b      	strb	r3, [r7, #13]
	CSN_SELECT_NRF();
 800070a:	f7ff ffaf 	bl	800066c <CSN_SELECT_NRF>
	SPI_TX_MULTI(trans_buff, 2); // transmit via spi
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f99b 	bl	8000a50 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 800071a:	f7ff ffb7 	bl	800068c <CSN_UNSELECT_NRF>
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <NRF_WRITE_REG_MULTI_BYTES>:

void NRF_WRITE_REG_MULTI_BYTES(uint8_t REG_ADDRESS, uint8_t *data_trans, int size_trans)
{ // this function is mainlu used to write the address of the ptx or prx node
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
	uint8_t trans_buff[2];
	trans_buff[0] = REG_ADDRESS | W_REGISTER;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	f043 0320 	orr.w	r3, r3, #32
 800073a:	b2db      	uxtb	r3, r3
 800073c:	753b      	strb	r3, [r7, #20]
	CSN_SELECT_NRF();
 800073e:	f7ff ff95 	bl	800066c <CSN_SELECT_NRF>
	SPI_TX_MULTI(trans_buff, 1);		  // send register address with Write command to nrf
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2101      	movs	r1, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f981 	bl	8000a50 <SPI_TX_MULTI>
	SPI_TX_MULTI(data_trans, size_trans); // transmit the data_trans buffer in one shot
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f000 f97d 	bl	8000a50 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 8000756:	f7ff ff99 	bl	800068c <CSN_UNSELECT_NRF>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <NRF_READ_REGISTER>:

uint8_t NRF_READ_REGISTER(uint8_t REG_ADDRESS)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b084      	sub	sp, #16
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
	uint8_t data_returned = 0; // a variable to store data read from register
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
	CSN_SELECT_NRF();
 8000770:	f7ff ff7c 	bl	800066c <CSN_SELECT_NRF>
	SPI_TX_MULTI(&REG_ADDRESS, 1); // send register address
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	2101      	movs	r1, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f969 	bl	8000a50 <SPI_TX_MULTI>
	SPI_READ_MULTI(&data_returned, 1);
 800077e:	f107 030f 	add.w	r3, r7, #15
 8000782:	2101      	movs	r1, #1
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f99b 	bl	8000ac0 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 800078a:	f7ff ff7f 	bl	800068c <CSN_UNSELECT_NRF>
	return data_returned; // return data
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <NRF_PRX_CONFIG>:
	delay(5);
	// NRF_ENABLE(); //nrf should be kept disabled
}

void NRF_PRX_CONFIG(uint8_t *Address, uint8_t channel)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	NRF_DISABLE();
 80007a4:	f7ff ff92 	bl	80006cc <NRF_DISABLE>
	NRF_WRITE_REGISTER(RF_CH, channel);				// select channel
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	4619      	mov	r1, r3
 80007ac:	2005      	movs	r0, #5
 80007ae:	f7ff ff9d 	bl	80006ec <NRF_WRITE_REGISTER>
	NRF_WRITE_REG_MULTI_BYTES(TX_ADDR, Address, 5); // set address
 80007b2:	2205      	movs	r2, #5
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	2010      	movs	r0, #16
 80007b8:	f7ff ffb5 	bl	8000726 <NRF_WRITE_REG_MULTI_BYTES>
	uint8_t current_pipe_status = NRF_READ_REGISTER(EN_RXADDR);
 80007bc:	2002      	movs	r0, #2
 80007be:	f7ff ffd0 	bl	8000762 <NRF_READ_REGISTER>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
	current_pipe_status = current_pipe_status | (1 << 0); // enable pipe 1
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
	NRF_WRITE_REGISTER(EN_RXADDR, current_pipe_status);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4619      	mov	r1, r3
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff ff8a 	bl	80006ec <NRF_WRITE_REGISTER>
	NRF_WRITE_REG_MULTI_BYTES(RX_ADDR_P0, Address, 5); // pipe address
 80007d8:	2205      	movs	r2, #5
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	200a      	movs	r0, #10
 80007de:	f7ff ffa2 	bl	8000726 <NRF_WRITE_REG_MULTI_BYTES>

	// since we have dynamic payload we dont need thus below
	// NRF_WRITE_REGISTER(RX_PW_P1,32); //data 32 bytes width
	NRF_WRITE_REGISTER(CONFIG, 0x0b); // powwr on device and keep in tx mode
 80007e2:	210b      	movs	r1, #11
 80007e4:	2000      	movs	r0, #0
 80007e6:	f7ff ff81 	bl	80006ec <NRF_WRITE_REGISTER>
	NRF_ENABLE();
 80007ea:	f7ff ff5f 	bl	80006ac <NRF_ENABLE>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <NRF_INIT>:

void NRF_INIT()
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
	SPI_INIT();			// initalize spi communication
 80007fa:	f000 f8cf 	bl	800099c <SPI_INIT>
	init_CSN_CE_PINS(); // initalize chip select and chip enable pin
 80007fe:	f7ff ff01 	bl	8000604 <init_CSN_CE_PINS>
	NRF_DISABLE();		// disable the chip
 8000802:	f7ff ff63 	bl	80006cc <NRF_DISABLE>

	NRF_WRITE_REGISTER(CONFIG, 0); // during inital config leaving it as default
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff ff6f 	bl	80006ec <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(EN_RXADDR, 0); // during inital config leaving it as defaul
 800080e:	2100      	movs	r1, #0
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff6b 	bl	80006ec <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(SETUP_AW, 0x03); // 0x03 corresponds to 5 bytes for rx/tx address
 8000816:	2103      	movs	r1, #3
 8000818:	2003      	movs	r0, #3
 800081a:	f7ff ff67 	bl	80006ec <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(RF_CH, 0); // during inital config leaving it as default
 800081e:	2100      	movs	r1, #0
 8000820:	2005      	movs	r0, #5
 8000822:	f7ff ff63 	bl	80006ec <NRF_WRITE_REGISTER>
	auto ack with payload feature of the NRF. This is crucial for setting up the
	bidirectional communication b/w the 2 boards
	*/

	// for DYNP NRF require EN_AA and Requires EN_DPL and ENAA_P0
	NRF_WRITE_REGISTER(DYNPD, 0x3f);	  // enable dynamic payload with ack
 8000826:	213f      	movs	r1, #63	@ 0x3f
 8000828:	201c      	movs	r0, #28
 800082a:	f7ff ff5f 	bl	80006ec <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(FEATURE, 0x6);	  // enable dynamic payload length
 800082e:	2106      	movs	r1, #6
 8000830:	201d      	movs	r0, #29
 8000832:	f7ff ff5b 	bl	80006ec <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(EN_AA, 0x3f);	  // enable auto ack
 8000836:	213f      	movs	r1, #63	@ 0x3f
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff ff57 	bl	80006ec <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(SETUP_RETR, 0xff); // 15 retries, 500µs delay
 800083e:	21ff      	movs	r1, #255	@ 0xff
 8000840:	2004      	movs	r0, #4
 8000842:	f7ff ff53 	bl	80006ec <NRF_WRITE_REGISTER>

	NRF_WRITE_REGISTER(RF_SETUP, 0x0e); // Power= 0db, data rate = 2Mbps
 8000846:	210e      	movs	r1, #14
 8000848:	2006      	movs	r0, #6
 800084a:	f7ff ff4f 	bl	80006ec <NRF_WRITE_REGISTER>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}

08000852 <NRD_SEND_CMD>:

void NRD_SEND_CMD(uint8_t cmd)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CSN_SELECT_NRF();
 800085c:	f7ff ff06 	bl	800066c <CSN_SELECT_NRF>

	SPI_TX_MULTI(&cmd, 1);
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f000 f8f3 	bl	8000a50 <SPI_TX_MULTI>

	// Pull the CS HIGH to release the device
	CSN_UNSELECT_NRF();
 800086a:	f7ff ff0f 	bl	800068c <CSN_UNSELECT_NRF>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <is_data_on_pipe>:

	return 0;
}

uint8_t is_data_on_pipe(uint8_t pipenum)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
	uint8_t status_reg = NRF_READ_REGISTER(STATUS);
 8000880:	2007      	movs	r0, #7
 8000882:	f7ff ff6e 	bl	8000762 <NRF_READ_REGISTER>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]
	// if 6 th bit is set and respective data pipe is set
	if (status_reg & (NEW_DATA_ON_RX_FIFO))
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <is_data_on_pipe+0x2a>
	{
		// clear rx_dr
		NRF_WRITE_REGISTER(STATUS, (NEW_DATA_ON_RX_FIFO));
 8000894:	2140      	movs	r1, #64	@ 0x40
 8000896:	2007      	movs	r0, #7
 8000898:	f7ff ff28 	bl	80006ec <NRF_WRITE_REGISTER>
		return 1; // data received
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <is_data_on_pipe+0x2c>
	}
	return 0;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <NRF_RECV_DATA>:

uint8_t NRF_RECV_DATA(uint8_t *data_ptr_RECV)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	uint8_t status_reg = NRF_READ_REGISTER(STATUS);
 80008b4:	2007      	movs	r0, #7
 80008b6:	f7ff ff54 	bl	8000762 <NRF_READ_REGISTER>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_fifo_stat = NRF_READ_REGISTER(FIFO_STATUS);
 80008be:	2017      	movs	r0, #23
 80008c0:	f7ff ff4f 	bl	8000762 <NRF_READ_REGISTER>
 80008c4:	4603      	mov	r3, r0
 80008c6:	73bb      	strb	r3, [r7, #14]
	//flush tx fifo to load fresh ack message
	uint8_t flush_tx = FLUSH_TX;
 80008c8:	23e1      	movs	r3, #225	@ 0xe1
 80008ca:	737b      	strb	r3, [r7, #13]
	NRD_SEND_CMD(flush_tx);
 80008cc:	7b7b      	ldrb	r3, [r7, #13]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ffbf 	bl	8000852 <NRD_SEND_CMD>
	delay(20);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f7ff fe63 	bl	80005a0 <delay>
	//pre-load ack packet
	CSN_SELECT_NRF();
 80008da:	f7ff fec7 	bl	800066c <CSN_SELECT_NRF>
	uint8_t ack_cmd = W_ACK_PAYLOAD;
 80008de:	23a8      	movs	r3, #168	@ 0xa8
 80008e0:	733b      	strb	r3, [r7, #12]
	SPI_TX_MULTI(&ack_cmd, 1);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f8b1 	bl	8000a50 <SPI_TX_MULTI>
	SPI_TX_MULTI(ack_payload, sizeof(ack_payload));
 80008ee:	210a      	movs	r1, #10
 80008f0:	4828      	ldr	r0, [pc, #160]	@ (8000994 <NRF_RECV_DATA+0xe8>)
 80008f2:	f000 f8ad 	bl	8000a50 <SPI_TX_MULTI>
	CSN_UNSELECT_NRF();
 80008f6:	f7ff fec9 	bl	800068c <CSN_UNSELECT_NRF>
	delay(10);
 80008fa:	200a      	movs	r0, #10
 80008fc:	f7ff fe50 	bl	80005a0 <delay>
	//get payload width 
	uint8_t cmd = R_RX_PL_WID;
 8000900:	2360      	movs	r3, #96	@ 0x60
 8000902:	72fb      	strb	r3, [r7, #11]
	uint8_t payLoad_width = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	72bb      	strb	r3, [r7, #10]
	CSN_SELECT_NRF();
 8000908:	f7ff feb0 	bl	800066c <CSN_SELECT_NRF>
	SPI_TX_MULTI(&cmd, 1);
 800090c:	f107 030b 	add.w	r3, r7, #11
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f89c 	bl	8000a50 <SPI_TX_MULTI>
	SPI_READ_MULTI(&payLoad_width, 1); // recieve width
 8000918:	f107 030a 	add.w	r3, r7, #10
 800091c:	2101      	movs	r1, #1
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f8ce 	bl	8000ac0 <SPI_READ_MULTI>
	printf("\n\rPayload Width: %d\n\r", payLoad_width);
 8000924:	7abb      	ldrb	r3, [r7, #10]
 8000926:	4619      	mov	r1, r3
 8000928:	481b      	ldr	r0, [pc, #108]	@ (8000998 <NRF_RECV_DATA+0xec>)
 800092a:	f001 ff1b 	bl	8002764 <iprintf>
	CSN_UNSELECT_NRF();
 800092e:	f7ff fead 	bl	800068c <CSN_UNSELECT_NRF>
	delay(10);
 8000932:	200a      	movs	r0, #10
 8000934:	f7ff fe34 	bl	80005a0 <delay>
	//reaed the actual payload
	CSN_SELECT_NRF();
 8000938:	f7ff fe98 	bl	800066c <CSN_SELECT_NRF>
	cmd = R_RX_PAYLOAD;
 800093c:	2361      	movs	r3, #97	@ 0x61
 800093e:	72fb      	strb	r3, [r7, #11]
	SPI_TX_MULTI(&cmd, 1);
 8000940:	f107 030b 	add.w	r3, r7, #11
 8000944:	2101      	movs	r1, #1
 8000946:	4618      	mov	r0, r3
 8000948:	f000 f882 	bl	8000a50 <SPI_TX_MULTI>
	SPI_READ_MULTI(data_ptr_RECV, payLoad_width); // recieve data
 800094c:	7abb      	ldrb	r3, [r7, #10]
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f8b5 	bl	8000ac0 <SPI_READ_MULTI>
	CSN_UNSELECT_NRF();
 8000956:	f7ff fe99 	bl	800068c <CSN_UNSELECT_NRF>

	cmd = FLUSH_RX;
 800095a:	23e2      	movs	r3, #226	@ 0xe2
 800095c:	72fb      	strb	r3, [r7, #11]
	delay(20);
 800095e:	2014      	movs	r0, #20
 8000960:	f7ff fe1e 	bl	80005a0 <delay>
	NRD_SEND_CMD(cmd); // flush rx fifo
 8000964:	7afb      	ldrb	r3, [r7, #11]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff73 	bl	8000852 <NRD_SEND_CMD>
	delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f7ff fe17 	bl	80005a0 <delay>

	if (tx_fifo_stat & (1 << 5))
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	f003 0320 	and.w	r3, r3, #32
 8000978:	2b00      	cmp	r3, #0
 800097a:	d005      	beq.n	8000988 <NRF_RECV_DATA+0xdc>
	{
		//if tx fifo is full flush it
		cmd = FLUSH_TX;
 800097c:	23e1      	movs	r3, #225	@ 0xe1
 800097e:	72fb      	strb	r3, [r7, #11]
		NRD_SEND_CMD(cmd);
 8000980:	7afb      	ldrb	r3, [r7, #11]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff65 	bl	8000852 <NRD_SEND_CMD>
	}

	return payLoad_width;
 8000988:	7abb      	ldrb	r3, [r7, #10]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000090 	.word	0x20000090
 8000998:	080036a0 	.word	0x080036a0

0800099c <SPI_INIT>:
#include"SPI.h"
#include"stdio.h"
#define AF05  (0x05)


void SPI_INIT(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 80009a0:	4b28      	ldr	r3, [pc, #160]	@ (8000a44 <SPI_INIT+0xa8>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a4:	4a27      	ldr	r2, [pc, #156]	@ (8000a44 <SPI_INIT+0xa8>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6313      	str	r3, [r2, #48]	@ 0x30
	//set PA5, PA6 and PA7 to alternate function mode
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 80009ac:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <SPI_INIT+0xac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a25      	ldr	r2, [pc, #148]	@ (8000a48 <SPI_INIT+0xac>)
 80009b2:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80009b6:	6013      	str	r3, [r2, #0]
	//set which type of alternate function is
	GPIOA->AFR[0]|=(AF05<<20)|(AF05<<24)|(AF05<<28);
 80009b8:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <SPI_INIT+0xac>)
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	4a22      	ldr	r2, [pc, #136]	@ (8000a48 <SPI_INIT+0xac>)
 80009be:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80009c2:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80009c6:	6213      	str	r3, [r2, #32]
	//enable clock access to SPI1
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <SPI_INIT+0xa8>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a44 <SPI_INIT+0xa8>)
 80009ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009d2:	6453      	str	r3, [r2, #68]	@ 0x44
	//set software slave managment
	SPI1->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <SPI_INIT+0xb0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a4c <SPI_INIT+0xb0>)
 80009da:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80009de:	6013      	str	r3, [r2, #0]
	//set SPI in master mode
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_MSTR, 1);
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <SPI_INIT+0xb0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <SPI_INIT+0xb0>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_BR,  3);
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <SPI_INIT+0xb0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80009f4:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <SPI_INIT+0xb0>)
 80009f6:	f043 0318 	orr.w	r3, r3, #24
 80009fa:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPHA, 0);
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <SPI_INIT+0xb0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_CPOL, 0);
 8000a08:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a0e:	f023 0302 	bic.w	r3, r3, #2
 8000a12:	6013      	str	r3, [r2, #0]
	//MODIFY_FIELD(SPI1->CR1, SPI_CR1_LSBFIRST, 1);
	SPI1->CR2 |= 0x4;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4a0c      	ldr	r2, [pc, #48]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6053      	str	r3, [r2, #4]
	SPI1->CR1 |= 0x40; // Enabling SPI SPI periph
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a2a:	6013      	str	r3, [r2, #0]
	MODIFY_FIELD(SPI1->CR1, SPI_CR1_SPE, 1);
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <SPI_INIT+0xb0>)
 8000a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40013000 	.word	0x40013000

08000a50 <SPI_TX_MULTI>:

//send multiple bytes in case size>1
void SPI_TX_MULTI(uint8_t *data_ptr,int size){
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
int i=0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
uint8_t temp;
while(i<size){
 8000a5e:	e00f      	b.n	8000a80 <SPI_TX_MULTI+0x30>
	while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000a60:	bf00      	nop
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <SPI_TX_MULTI+0x6c>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d0f9      	beq.n	8000a62 <SPI_TX_MULTI+0x12>
	SPI1->DR = data_ptr[i];
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <SPI_TX_MULTI+0x6c>)
 8000a78:	60da      	str	r2, [r3, #12]
	i++;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
while(i<size){
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	dbeb      	blt.n	8000a60 <SPI_TX_MULTI+0x10>
}
/*Wait until TXE is set*/
while(!(SPI1->SR & (SPI_SR_TXE))){}
 8000a88:	bf00      	nop
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <SPI_TX_MULTI+0x6c>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f9      	beq.n	8000a8a <SPI_TX_MULTI+0x3a>

/*Wait for BUSY flag to reset*/
while((SPI1->SR & (SPI_SR_BSY))){}
 8000a96:	bf00      	nop
 8000a98:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <SPI_TX_MULTI+0x6c>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d1f9      	bne.n	8000a98 <SPI_TX_MULTI+0x48>

/*Clear OVR flag*/
temp = SPI1->DR;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <SPI_TX_MULTI+0x6c>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	72fb      	strb	r3, [r7, #11]
temp = SPI1->SR;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <SPI_TX_MULTI+0x6c>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	72fb      	strb	r3, [r7, #11]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	40013000 	.word	0x40013000

08000ac0 <SPI_READ_MULTI>:


void SPI_READ_MULTI(uint8_t *data_ptr,int size){
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	while(size)
 8000aca:	e013      	b.n	8000af4 <SPI_READ_MULTI+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <SPI_READ_MULTI+0x48>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SPI_SR_RXNE))){}
 8000ad2:	bf00      	nop
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <SPI_READ_MULTI+0x48>)
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <SPI_READ_MULTI+0x14>

		/*Read data from data register*/
		*data_ptr++ = (SPI1->DR);
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <SPI_READ_MULTI+0x48>)
 8000ae2:	68d9      	ldr	r1, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	b2ca      	uxtb	r2, r1
 8000aec:	701a      	strb	r2, [r3, #0]
		size--;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	603b      	str	r3, [r7, #0]
	while(size)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1e8      	bne.n	8000acc <SPI_READ_MULTI+0xc>
	}
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	40013000 	.word	0x40013000

08000b0c <print_success>:

/* -------------------------------------------------- */
//          FUNCTION DEFINITIONS
/* -------------------------------------------------- */

void print_success(char * str){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    printf("\033[32m%s\033[0m\n \r", str); //green
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	4803      	ldr	r0, [pc, #12]	@ (8000b24 <print_success+0x18>)
 8000b18:	f001 fe24 	bl	8002764 <iprintf>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	080036b8 	.word	0x080036b8

08000b28 <print_info>:


void print_info(char * str){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
    printf("\033[33m%s\033[0m\n\r", str); //yellow
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <print_info+0x18>)
 8000b34:	f001 fe16 	bl	8002764 <iprintf>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	080036c8 	.word	0x080036c8

08000b44 <print_error>:

void print_error(char * str){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    printf("\033[31m%s\033[0m\n \r", str); //red
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4803      	ldr	r0, [pc, #12]	@ (8000b5c <print_error+0x18>)
 8000b50:	f001 fe08 	bl	8002764 <iprintf>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	080036d8 	.word	0x080036d8

08000b60 <LCD_initial_display>:
 *
 * Returns:
 * 	None
 */
void LCD_initial_display(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
	uint8_t rotate = LCD_ROTATE_VALUE;
 8000b66:	2360      	movs	r3, #96	@ 0x60
 8000b68:	71fb      	strb	r3, [r7, #7]
	LCD_write_command(ST7789_MADCTL);
 8000b6a:	2036      	movs	r0, #54	@ 0x36
 8000b6c:	f000 fbbe 	bl	80012ec <LCD_write_command>
	LCD_write_byte_data(rotate);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 fbf0 	bl	8001358 <LCD_write_byte_data>
	LCD_write_string(LCD_COLUMN_VAL_1, LCD_ROW_VAL_1, "Wireless Sensor      Communication System", Font_11x18, GREEN, LIGHT_BLUE);
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <LCD_initial_display+0x70>)
 8000b7a:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000b7e:	9202      	str	r2, [sp, #8]
 8000b80:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000b84:	9201      	str	r2, [sp, #4]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	9200      	str	r2, [sp, #0]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a11      	ldr	r2, [pc, #68]	@ (8000bd4 <LCD_initial_display+0x74>)
 8000b8e:	2114      	movs	r1, #20
 8000b90:	2014      	movs	r0, #20
 8000b92:	f000 fd4b 	bl	800162c <LCD_write_string>
	LCD_draw_image(LCD_COLUMN_VAL_1, LCD_ROW_VAL_2, LCD_IMAGE_SIZE, LCD_IMAGE_SIZE, thermo_image);
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <LCD_initial_display+0x78>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2328      	movs	r3, #40	@ 0x28
 8000b9c:	2228      	movs	r2, #40	@ 0x28
 8000b9e:	2150      	movs	r1, #80	@ 0x50
 8000ba0:	2014      	movs	r0, #20
 8000ba2:	f000 fc96 	bl	80014d2 <LCD_draw_image>
	LCD_draw_image(LCD_COLUMN_VAL_1, LCD_ROW_VAL_3, LCD_IMAGE_SIZE, LCD_IMAGE_SIZE, spo2_image);
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <LCD_initial_display+0x7c>)
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	2328      	movs	r3, #40	@ 0x28
 8000bac:	2228      	movs	r2, #40	@ 0x28
 8000bae:	2182      	movs	r1, #130	@ 0x82
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f000 fc8e 	bl	80014d2 <LCD_draw_image>
	LCD_draw_image(LCD_COLUMN_VAL_1, LCD_ROW_VAL_4, LCD_IMAGE_SIZE, LCD_IMAGE_SIZE, earth_image);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <LCD_initial_display+0x80>)
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	2328      	movs	r3, #40	@ 0x28
 8000bbc:	2228      	movs	r2, #40	@ 0x28
 8000bbe:	21b4      	movs	r1, #180	@ 0xb4
 8000bc0:	2014      	movs	r0, #20
 8000bc2:	f000 fc86 	bl	80014d2 <LCD_draw_image>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	08006b7c 	.word	0x08006b7c
 8000bd4:	080036ec 	.word	0x080036ec
 8000bd8:	080038a0 	.word	0x080038a0
 8000bdc:	080051a0 	.word	0x080051a0
 8000be0:	08004520 	.word	0x08004520

08000be4 <convert_to_str>:
 *
 * Returns:
 * 	None
 */
void convert_to_str(uint8_t RxData[], int recv_width, char str[])
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
	int i=0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
	while(recv_width--){
 8000bf4:	e00a      	b.n	8000c0c <convert_to_str+0x28>
		str[i]=RxData[i];
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	440b      	add	r3, r1
 8000c02:	7812      	ldrb	r2, [r2, #0]
 8000c04:	701a      	strb	r2, [r3, #0]
		i++;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
	while(recv_width--){
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1e5a      	subs	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1ef      	bne.n	8000bf6 <convert_to_str+0x12>
	}
	str[i]='\0';
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LCD_display_data>:
 *
 * Returns:
 * 	None
 */
void LCD_display_data(uint8_t RxData[])
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b0a2      	sub	sp, #136	@ 0x88
 8000c30:	af04      	add	r7, sp, #16
 8000c32:	6078      	str	r0, [r7, #4]
	if(is_data_on_pipe(0)== 1){
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fe1e 	bl	8000876 <is_data_on_pipe>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	f040 8137 	bne.w	8000eb0 <LCD_display_data+0x284>
		print_info("\n\rReceived Data:");
 8000c42:	489d      	ldr	r0, [pc, #628]	@ (8000eb8 <LCD_display_data+0x28c>)
 8000c44:	f7ff ff70 	bl	8000b28 <print_info>
		uint8_t recv_width = NRF_RECV_DATA(RxData);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fe2f 	bl	80008ac <NRF_RECV_DATA>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		char str[32];
		convert_to_str(RxData, recv_width,str);
 8000c54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000c58:	f107 0208 	add.w	r2, r7, #8
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffc0 	bl	8000be4 <convert_to_str>
		char *delimeter="-";
 8000c64:	4b95      	ldr	r3, [pc, #596]	@ (8000ebc <LCD_display_data+0x290>)
 8000c66:	66bb      	str	r3, [r7, #104]	@ 0x68
		char* tok=strtok(str,delimeter);
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fdd6 	bl	8002820 <strtok>
 8000c74:	6778      	str	r0, [r7, #116]	@ 0x74
		char heart_rate_data[10]={0};
 8000c76:	2300      	movs	r3, #0
 8000c78:	657b      	str	r3, [r7, #84]	@ 0x54
 8000c7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	809a      	strh	r2, [r3, #4]
		char spo2_data[10]={0};
 8000c84:	2300      	movs	r3, #0
 8000c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	809a      	strh	r2, [r3, #4]
		char gps_data_lat[10]={0};
 8000c92:	2300      	movs	r3, #0
 8000c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	809a      	strh	r2, [r3, #4]
		char gps_data_long[10]={0};
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ca4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	809a      	strh	r2, [r3, #4]
		int count_tok=0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	673b      	str	r3, [r7, #112]	@ 0x70

		while(tok != NULL){
 8000cb2:	e06a      	b.n	8000d8a <LCD_display_data+0x15e>
			count_tok++;
 8000cb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	673b      	str	r3, [r7, #112]	@ 0x70
			if(count_tok==1 && tok[0]=='T'){
 8000cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d119      	bne.n	8000cf4 <LCD_display_data+0xc8>
 8000cc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b54      	cmp	r3, #84	@ 0x54
 8000cc6:	d115      	bne.n	8000cf4 <LCD_display_data+0xc8>
				memset(heart_rate_data,0,10);
 8000cc8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ccc:	220a      	movs	r2, #10
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fd9c 	bl	800280e <memset>
				strcpy(heart_rate_data,tok+1);
 8000cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 fe6c 	bl	80029be <strcpy>
				printf("\033[32m\n\rTemperature Value: %s\033[0m\n\r", heart_rate_data);
 8000ce6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000cea:	4619      	mov	r1, r3
 8000cec:	4874      	ldr	r0, [pc, #464]	@ (8000ec0 <LCD_display_data+0x294>)
 8000cee:	f001 fd39 	bl	8002764 <iprintf>
 8000cf2:	e045      	b.n	8000d80 <LCD_display_data+0x154>
			}

			else if(count_tok==2 && tok[0]=='O'){
 8000cf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d119      	bne.n	8000d2e <LCD_display_data+0x102>
 8000cfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b4f      	cmp	r3, #79	@ 0x4f
 8000d00:	d115      	bne.n	8000d2e <LCD_display_data+0x102>
				memset(spo2_data,0,10);
 8000d02:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d06:	220a      	movs	r2, #10
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f001 fd7f 	bl	800280e <memset>
				strcpy(spo2_data,tok+1);
 8000d10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fe4f 	bl	80029be <strcpy>
				printf("\033[32mSpO2  \t: %s\033[0m\n\r", spo2_data);
 8000d20:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d24:	4619      	mov	r1, r3
 8000d26:	4867      	ldr	r0, [pc, #412]	@ (8000ec4 <LCD_display_data+0x298>)
 8000d28:	f001 fd1c 	bl	8002764 <iprintf>
 8000d2c:	e028      	b.n	8000d80 <LCD_display_data+0x154>
			}

			else if(count_tok==3 && tok[0]=='G'){
 8000d2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d125      	bne.n	8000d80 <LCD_display_data+0x154>
 8000d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b47      	cmp	r3, #71	@ 0x47
 8000d3a:	d121      	bne.n	8000d80 <LCD_display_data+0x154>
				char *delim=",";
 8000d3c:	4b62      	ldr	r3, [pc, #392]	@ (8000ec8 <LCD_display_data+0x29c>)
 8000d3e:	667b      	str	r3, [r7, #100]	@ 0x64
				char* tok2=strtok(tok+1,delim);
 8000d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d42:	3301      	adds	r3, #1
 8000d44:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fd6a 	bl	8002820 <strtok>
 8000d4c:	6638      	str	r0, [r7, #96]	@ 0x60
				strcpy(gps_data_lat,tok2);
 8000d4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d52:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fe32 	bl	80029be <strcpy>
				tok2=strtok(NULL,delim);
 8000d5a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f001 fd5f 	bl	8002820 <strtok>
 8000d62:	6638      	str	r0, [r7, #96]	@ 0x60
				strcpy(gps_data_long,tok2);
 8000d64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 fe27 	bl	80029be <strcpy>
				printf("\033[32mGPS Latitude: %s \n\rGPS Longitude: %s\033[0m\n\r", gps_data_lat, gps_data_long);
 8000d70:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000d74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4854      	ldr	r0, [pc, #336]	@ (8000ecc <LCD_display_data+0x2a0>)
 8000d7c:	f001 fcf2 	bl	8002764 <iprintf>
			}
			tok=strtok(NULL,delimeter);
 8000d80:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000d82:	2000      	movs	r0, #0
 8000d84:	f001 fd4c 	bl	8002820 <strtok>
 8000d88:	6778      	str	r0, [r7, #116]	@ 0x74
		while(tok != NULL){
 8000d8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d191      	bne.n	8000cb4 <LCD_display_data+0x88>

		}
		//first clear previous text
		char text[] = "    ";
 8000d90:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed0 <LCD_display_data+0x2a4>)
 8000d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9a:	6018      	str	r0, [r3, #0]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	7019      	strb	r1, [r3, #0]
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_5, text, Font_11x18, LIGHT_BLUE, LIGHT_BLUE); // Display Data on LCD
 8000da0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000da2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000da6:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000daa:	9202      	str	r2, [sp, #8]
 8000dac:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	460a      	mov	r2, r1
 8000dba:	215a      	movs	r1, #90	@ 0x5a
 8000dbc:	2064      	movs	r0, #100	@ 0x64
 8000dbe:	f000 fc35 	bl	800162c <LCD_write_string>
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_6, text, Font_11x18, LIGHT_BLUE, LIGHT_BLUE); // Display Data on LCD
 8000dc2:	4b44      	ldr	r3, [pc, #272]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000dc4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000dc8:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	9200      	str	r2, [sp, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	460a      	mov	r2, r1
 8000ddc:	2182      	movs	r1, #130	@ 0x82
 8000dde:	2064      	movs	r0, #100	@ 0x64
 8000de0:	f000 fc24 	bl	800162c <LCD_write_string>
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_7, text, Font_11x18, LIGHT_BLUE, LIGHT_BLUE); // Display Data on LCD
 8000de4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000de6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000dea:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000dee:	9202      	str	r2, [sp, #8]
 8000df0:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000df4:	9201      	str	r2, [sp, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	9200      	str	r2, [sp, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	21aa      	movs	r1, #170	@ 0xaa
 8000e00:	2064      	movs	r0, #100	@ 0x64
 8000e02:	f000 fc13 	bl	800162c <LCD_write_string>
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_8, text, Font_11x18, LIGHT_BLUE, LIGHT_BLUE); // Display Data on LCD
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000e08:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000e0c:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000e10:	9202      	str	r2, [sp, #8]
 8000e12:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	460a      	mov	r2, r1
 8000e20:	21be      	movs	r1, #190	@ 0xbe
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f000 fc02 	bl	800162c <LCD_write_string>

		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_5, heart_rate_data, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 8000e28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000e2a:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000e2e:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000e32:	9202      	str	r2, [sp, #8]
 8000e34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e38:	9201      	str	r2, [sp, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	9200      	str	r2, [sp, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	460a      	mov	r2, r1
 8000e42:	215a      	movs	r1, #90	@ 0x5a
 8000e44:	2064      	movs	r0, #100	@ 0x64
 8000e46:	f000 fbf1 	bl	800162c <LCD_write_string>
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_6, spo2_data, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 8000e4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000e4c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000e50:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000e54:	9202      	str	r2, [sp, #8]
 8000e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e5a:	9201      	str	r2, [sp, #4]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	9200      	str	r2, [sp, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	460a      	mov	r2, r1
 8000e64:	2182      	movs	r1, #130	@ 0x82
 8000e66:	2064      	movs	r0, #100	@ 0x64
 8000e68:	f000 fbe0 	bl	800162c <LCD_write_string>
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_7, gps_data_lat, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 8000e6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000e6e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000e72:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000e76:	9202      	str	r2, [sp, #8]
 8000e78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	9200      	str	r2, [sp, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	460a      	mov	r2, r1
 8000e86:	21aa      	movs	r1, #170	@ 0xaa
 8000e88:	2064      	movs	r0, #100	@ 0x64
 8000e8a:	f000 fbcf 	bl	800162c <LCD_write_string>
		LCD_write_string(LCD_COLUMN_VAL_2, LCD_ROW_VAL_8, gps_data_long, Font_11x18, WHITE, LIGHT_BLUE); // Display Data on LCD
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <LCD_display_data+0x2a8>)
 8000e90:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000e94:	f244 32bb 	movw	r2, #17339	@ 0x43bb
 8000e98:	9202      	str	r2, [sp, #8]
 8000e9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9e:	9201      	str	r2, [sp, #4]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	9200      	str	r2, [sp, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	460a      	mov	r2, r1
 8000ea8:	21be      	movs	r1, #190	@ 0xbe
 8000eaa:	2064      	movs	r0, #100	@ 0x64
 8000eac:	f000 fbbe 	bl	800162c <LCD_write_string>
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3778      	adds	r7, #120	@ 0x78
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	08003718 	.word	0x08003718
 8000ebc:	0800372c 	.word	0x0800372c
 8000ec0:	08003730 	.word	0x08003730
 8000ec4:	08003754 	.word	0x08003754
 8000ec8:	0800376c 	.word	0x0800376c
 8000ecc:	08003770 	.word	0x08003770
 8000ed0:	080037a0 	.word	0x080037a0
 8000ed4:	08006b7c 	.word	0x08006b7c

08000ed8 <ST7789_Init>:
 *
 * Returns:
 * 	None
 */
void ST7789_Init(void)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08b      	sub	sp, #44	@ 0x2c
 8000edc:	af00      	add	r7, sp, #0
	LCD_spi_init(); // Call the LCD SPI Initialization Function
 8000ede:	f000 f9e9 	bl	80012b4 <LCD_spi_init>
	delay(25);
 8000ee2:	2019      	movs	r0, #25
 8000ee4:	f7ff fb5c 	bl	80005a0 <delay>
	GPIOB->BSRR = GPIOB_BSRR_RESET_RST; // Reset Pin Low
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8001014 <ST7789_Init+0x13c>)
 8000eea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000eee:	619a      	str	r2, [r3, #24]
	delay(50);
 8000ef0:	2032      	movs	r0, #50	@ 0x32
 8000ef2:	f7ff fb55 	bl	80005a0 <delay>
	GPIOB->BSRR = GPIOB_BSRR_SET_RST;   // Reset Pin High
 8000ef6:	4b47      	ldr	r3, [pc, #284]	@ (8001014 <ST7789_Init+0x13c>)
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	619a      	str	r2, [r3, #24]
    delay(50);
 8000efc:	2032      	movs	r0, #50	@ 0x32
 8000efe:	f7ff fb4f 	bl	80005a0 <delay>
    LCD_write_command(ST7789_SWRESET); // Writing to the Reset Register
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 f9f2 	bl	80012ec <LCD_write_command>
    delay(100);
 8000f08:	2064      	movs	r0, #100	@ 0x64
 8000f0a:	f7ff fb49 	bl	80005a0 <delay>
    LCD_write_command(ST7789_COLMOD);		//	Set color mode
 8000f0e:	203a      	movs	r0, #58	@ 0x3a
 8000f10:	f000 f9ec 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data(ST7789_COLOR_MODE_16bit);
 8000f14:	2055      	movs	r0, #85	@ 0x55
 8000f16:	f000 fa1f 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command(0xB2);				//	Porch control
 8000f1a:	20b2      	movs	r0, #178	@ 0xb2
 8000f1c:	f000 f9e6 	bl	80012ec <LCD_write_command>
	uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000f20:	4a3d      	ldr	r2, [pc, #244]	@ (8001018 <ST7789_Init+0x140>)
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f2a:	6018      	str	r0, [r3, #0]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	7019      	strb	r1, [r3, #0]
	LCD_write_data(data, sizeof(data));
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	2105      	movs	r1, #5
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f9f4 	bl	8001324 <LCD_write_data>

	/* Internal LCD Voltage generator settings */
	LCD_write_command(0XB7);				//	Gate Control
 8000f3c:	20b7      	movs	r0, #183	@ 0xb7
 8000f3e:	f000 f9d5 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data(0x35);			//	Default value
 8000f42:	2035      	movs	r0, #53	@ 0x35
 8000f44:	f000 fa08 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command(0xBB);				//	VCOM setting
 8000f48:	20bb      	movs	r0, #187	@ 0xbb
 8000f4a:	f000 f9cf 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data(0x20);			//	0.725v (default 0.75v for 0x20)
 8000f4e:	2020      	movs	r0, #32
 8000f50:	f000 fa02 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command(0xC0);				//	LCMCTRL
 8000f54:	20c0      	movs	r0, #192	@ 0xc0
 8000f56:	f000 f9c9 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data (0x2C);			//	Default value
 8000f5a:	202c      	movs	r0, #44	@ 0x2c
 8000f5c:	f000 f9fc 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command (0xC2);				//	VDV and VRH command Enable
 8000f60:	20c2      	movs	r0, #194	@ 0xc2
 8000f62:	f000 f9c3 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data (0x01);			//	Default value
 8000f66:	2001      	movs	r0, #1
 8000f68:	f000 f9f6 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command (0xC3);				//	VRH set
 8000f6c:	20c3      	movs	r0, #195	@ 0xc3
 8000f6e:	f000 f9bd 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data (0x0b);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000f72:	200b      	movs	r0, #11
 8000f74:	f000 f9f0 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command (0xC4);				//	VDV set
 8000f78:	20c4      	movs	r0, #196	@ 0xc4
 8000f7a:	f000 f9b7 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data (0x20);			//	Default value
 8000f7e:	2020      	movs	r0, #32
 8000f80:	f000 f9ea 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command (0xC6);				//	Frame rate control in normal mode
 8000f84:	20c6      	movs	r0, #198	@ 0xc6
 8000f86:	f000 f9b1 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data (0x0F);			//	Default value (60HZ)
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f9e4 	bl	8001358 <LCD_write_byte_data>
    LCD_write_command (0xD0);				//	Power control
 8000f90:	20d0      	movs	r0, #208	@ 0xd0
 8000f92:	f000 f9ab 	bl	80012ec <LCD_write_command>
    LCD_write_byte_data (0xA4);			//	Default value
 8000f96:	20a4      	movs	r0, #164	@ 0xa4
 8000f98:	f000 f9de 	bl	8001358 <LCD_write_byte_data>
    LCD_write_byte_data (0xA1);			//	Default value
 8000f9c:	20a1      	movs	r0, #161	@ 0xa1
 8000f9e:	f000 f9db 	bl	8001358 <LCD_write_byte_data>

	LCD_write_command(0xE0);
 8000fa2:	20e0      	movs	r0, #224	@ 0xe0
 8000fa4:	f000 f9a2 	bl	80012ec <LCD_write_command>
	uint8_t data1[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <ST7789_Init+0x144>)
 8000faa:	f107 0410 	add.w	r4, r7, #16
 8000fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fb2:	8023      	strh	r3, [r4, #0]
	LCD_write_data(data1, sizeof(data1));
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	210e      	movs	r1, #14
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f9b2 	bl	8001324 <LCD_write_data>
    LCD_write_command(0xE1);
 8000fc0:	20e1      	movs	r0, #225	@ 0xe1
 8000fc2:	f000 f993 	bl	80012ec <LCD_write_command>
	uint8_t data2[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000fc6:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <ST7789_Init+0x148>)
 8000fc8:	463c      	mov	r4, r7
 8000fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000fce:	8023      	strh	r3, [r4, #0]
	LCD_write_data(data2, sizeof(data2));
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	210e      	movs	r1, #14
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f9a5 	bl	8001324 <LCD_write_data>

    LCD_write_command (ST7789_INVON);		//	Inversion ON
 8000fda:	2021      	movs	r0, #33	@ 0x21
 8000fdc:	f000 f986 	bl	80012ec <LCD_write_command>
	LCD_write_command (ST7789_SLPOUT);	//	Out of sleep mode
 8000fe0:	2011      	movs	r0, #17
 8000fe2:	f000 f983 	bl	80012ec <LCD_write_command>
  	LCD_write_command (ST7789_NORON);		//	Normal Display on
 8000fe6:	2013      	movs	r0, #19
 8000fe8:	f000 f980 	bl	80012ec <LCD_write_command>
  	LCD_write_command (ST7789_DISPON);	//	Main screen turned on
 8000fec:	2029      	movs	r0, #41	@ 0x29
 8000fee:	f000 f97d 	bl	80012ec <LCD_write_command>

  	delay(120);
 8000ff2:	2078      	movs	r0, #120	@ 0x78
 8000ff4:	f7ff fad4 	bl	80005a0 <delay>
  	GPIOB->BSRR = GPIOB_BSRR_SET_PB4;  // Set Backlight Pin On
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <ST7789_Init+0x13c>)
 8000ffa:	2210      	movs	r2, #16
 8000ffc:	619a      	str	r2, [r3, #24]
  	delay(50);
 8000ffe:	2032      	movs	r0, #50	@ 0x32
 8001000:	f7ff face 	bl	80005a0 <delay>
  	LCD_fill_screen_color(LIGHT_BLUE); // Fill the LCD screen with Light Blue Color
 8001004:	f244 30bb 	movw	r0, #17339	@ 0x43bb
 8001008:	f000 fa10 	bl	800142c <LCD_fill_screen_color>
}
 800100c:	bf00      	nop
 800100e:	372c      	adds	r7, #44	@ 0x2c
 8001010:	46bd      	mov	sp, r7
 8001012:	bd90      	pop	{r4, r7, pc}
 8001014:	40020400 	.word	0x40020400
 8001018:	080037a8 	.word	0x080037a8
 800101c:	080037b0 	.word	0x080037b0
 8001020:	080037c0 	.word	0x080037c0

08001024 <EXTI9_5_IRQHandler>:

/* -------------------------------------------------- */
//          FUNCTION DEFINITIONS
/* -------------------------------------------------- */
void EXTI9_5_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	static int i=0;
	static int j=0;
    if (EXTI->PR & EXTI_PR_PR6) { // Check if interrupt occurred on PC6
 8001028:	4b36      	ldr	r3, [pc, #216]	@ (8001104 <EXTI9_5_IRQHandler+0xe0>)
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001030:	2b00      	cmp	r3, #0
 8001032:	d02f      	beq.n	8001094 <EXTI9_5_IRQHandler+0x70>
        EXTI->PR = EXTI_PR_PR6;   // Clear interrupt flag for PC6
 8001034:	4b33      	ldr	r3, [pc, #204]	@ (8001104 <EXTI9_5_IRQHandler+0xe0>)
 8001036:	2240      	movs	r2, #64	@ 0x40
 8001038:	615a      	str	r2, [r3, #20]
    	i++;
 800103a:	4b33      	ldr	r3, [pc, #204]	@ (8001108 <EXTI9_5_IRQHandler+0xe4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a31      	ldr	r2, [pc, #196]	@ (8001108 <EXTI9_5_IRQHandler+0xe4>)
 8001042:	6013      	str	r3, [r2, #0]
        if(i%2==1){
 8001044:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <EXTI9_5_IRQHandler+0xe4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	bfb8      	it	lt
 8001050:	425b      	neglt	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10f      	bne.n	8001076 <EXTI9_5_IRQHandler+0x52>
        	print_error("\n\rDisabling GPS Module\n\r");
 8001056:	482d      	ldr	r0, [pc, #180]	@ (800110c <EXTI9_5_IRQHandler+0xe8>)
 8001058:	f7ff fd74 	bl	8000b44 <print_error>
        	GPIOA->BSRR |=MAX30102_OFF_INDICATOR;
 800105c:	4b2c      	ldr	r3, [pc, #176]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a2b      	ldr	r2, [pc, #172]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 8001062:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001066:	6193      	str	r3, [r2, #24]
        	strcpy(ack_payload, DISABLE_GPS_COMMAND);
 8001068:	4b2a      	ldr	r3, [pc, #168]	@ (8001114 <EXTI9_5_IRQHandler+0xf0>)
 800106a:	4a2b      	ldr	r2, [pc, #172]	@ (8001118 <EXTI9_5_IRQHandler+0xf4>)
 800106c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001070:	e883 0003 	stmia.w	r3, {r0, r1}
 8001074:	e00e      	b.n	8001094 <EXTI9_5_IRQHandler+0x70>
        }
        else{
        	print_success("\n\rEnabling GPS Module\n\r");
 8001076:	4829      	ldr	r0, [pc, #164]	@ (800111c <EXTI9_5_IRQHandler+0xf8>)
 8001078:	f7ff fd48 	bl	8000b0c <print_success>
        	 GPIOA->BSRR |=MAX30102_ON_INDICATOR;
 800107c:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a23      	ldr	r2, [pc, #140]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001086:	6193      	str	r3, [r2, #24]
        	 strcpy(ack_payload, ACK_DEF_COMMAND);
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <EXTI9_5_IRQHandler+0xf0>)
 800108a:	4a25      	ldr	r2, [pc, #148]	@ (8001120 <EXTI9_5_IRQHandler+0xfc>)
 800108c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001090:	e883 0003 	stmia.w	r3, {r0, r1}
        }
        // Handle PC6 button press logic here
    }

    if (EXTI->PR & EXTI_PR_PR7) { // Check if interrupt occurred on PC7
 8001094:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <EXTI9_5_IRQHandler+0xe0>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02f      	beq.n	8001100 <EXTI9_5_IRQHandler+0xdc>
    	j++;
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <EXTI9_5_IRQHandler+0x100>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001124 <EXTI9_5_IRQHandler+0x100>)
 80010a8:	6013      	str	r3, [r2, #0]
        EXTI->PR = EXTI_PR_PR7;   // Clear interrupt flag for PC7
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <EXTI9_5_IRQHandler+0xe0>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	615a      	str	r2, [r3, #20]
        if(j%2==1){
 80010b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <EXTI9_5_IRQHandler+0x100>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	bfb8      	it	lt
 80010bc:	425b      	neglt	r3, r3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d10f      	bne.n	80010e2 <EXTI9_5_IRQHandler+0xbe>
        	print_error("\n\rDisabling MAX Sensor\n\r");
 80010c2:	4819      	ldr	r0, [pc, #100]	@ (8001128 <EXTI9_5_IRQHandler+0x104>)
 80010c4:	f7ff fd3e 	bl	8000b44 <print_error>
        	GPIOA->BSRR |=GPS_OFF_INDICATOR;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 80010ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010d2:	6193      	str	r3, [r2, #24]
        	strcpy(ack_payload, DISABLE_MAX_COMMAND);
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <EXTI9_5_IRQHandler+0xf0>)
 80010d6:	4a15      	ldr	r2, [pc, #84]	@ (800112c <EXTI9_5_IRQHandler+0x108>)
 80010d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010dc:	e883 0003 	stmia.w	r3, {r0, r1}
        	GPIOA->BSRR |=GPS_ON_INDICATOR;
        	strcpy(ack_payload, ACK_DEF_COMMAND);
        }
    }

}
 80010e0:	e00e      	b.n	8001100 <EXTI9_5_IRQHandler+0xdc>
        	print_success("\n\rEnabling MAX Sensor\n\r");
 80010e2:	4813      	ldr	r0, [pc, #76]	@ (8001130 <EXTI9_5_IRQHandler+0x10c>)
 80010e4:	f7ff fd12 	bl	8000b0c <print_success>
        	GPIOA->BSRR |=GPS_ON_INDICATOR;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <EXTI9_5_IRQHandler+0xec>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f2:	6193      	str	r3, [r2, #24]
        	strcpy(ack_payload, ACK_DEF_COMMAND);
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <EXTI9_5_IRQHandler+0xf0>)
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <EXTI9_5_IRQHandler+0xfc>)
 80010f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010fc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40013c00 	.word	0x40013c00
 8001108:	2000009c 	.word	0x2000009c
 800110c:	080037d0 	.word	0x080037d0
 8001110:	40020000 	.word	0x40020000
 8001114:	20000090 	.word	0x20000090
 8001118:	080037ec 	.word	0x080037ec
 800111c:	080037f4 	.word	0x080037f4
 8001120:	0800380c 	.word	0x0800380c
 8001124:	200000a0 	.word	0x200000a0
 8001128:	08003814 	.word	0x08003814
 800112c:	08003830 	.word	0x08003830
 8001130:	08003838 	.word	0x08003838

08001134 <main>:

int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800113a:	f000 f84b 	bl	80011d4 <SystemClock_Config>
	ST7789_Init();
 800113e:	f7ff fecb 	bl	8000ed8 <ST7789_Init>
	uint8_t RxAddress[] = {0xB3, 0xB4, 0xB5, 0xB6, 0x05};
 8001142:	4a1f      	ldr	r2, [pc, #124]	@ (80011c0 <main+0x8c>)
 8001144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001148:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114c:	6018      	str	r0, [r3, #0]
 800114e:	3304      	adds	r3, #4
 8001150:	7019      	strb	r1, [r3, #0]
	uint8_t RxData[32];
	uint8_t channel=10;
 8001152:	230a      	movs	r3, #10
 8001154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	usart_init();
 8001158:	f000 fc42 	bl	80019e0 <usart_init>
	strcpy(ack_payload, ACK_DEF_COMMAND);
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <main+0x90>)
 800115e:	4a1a      	ldr	r2, [pc, #104]	@ (80011c8 <main+0x94>)
 8001160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001164:	e883 0003 	stmia.w	r3, {r0, r1}
	NRF_INIT();
 8001168:	f7ff fb45 	bl	80007f6 <NRF_INIT>
	NRF_PRX_CONFIG(RxAddress,channel);
 800116c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fb0e 	bl	8000798 <NRF_PRX_CONFIG>
	command_button_config();
 800117c:	f000 fae4 	bl	8001748 <command_button_config>
	print_info("\n\r Setting up as PRX Dynamic Payload\n\r");
 8001180:	4812      	ldr	r0, [pc, #72]	@ (80011cc <main+0x98>)
 8001182:	f7ff fcd1 	bl	8000b28 <print_info>
	for(int i=0; i<=0x1D ;i++){
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800118a:	e00d      	b.n	80011a8 <main+0x74>
		printf("\n\rRegister %x is value %x \n\r", i, NRF_READ_REGISTER(i));
 800118c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fae6 	bl	8000762 <NRF_READ_REGISTER>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <main+0x9c>)
 800119e:	f001 fae1 	bl	8002764 <iprintf>
	for(int i=0; i<=0x1D ;i++){
 80011a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011a4:	3301      	adds	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011aa:	2b1d      	cmp	r3, #29
 80011ac:	ddee      	ble.n	800118c <main+0x58>
	}

	LCD_initial_display();
 80011ae:	f7ff fcd7 	bl	8000b60 <LCD_initial_display>

	while(1)
	{
		LCD_display_data(RxData);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fd39 	bl	8000c2c <LCD_display_data>
	{
 80011ba:	bf00      	nop
 80011bc:	e7f9      	b.n	80011b2 <main+0x7e>
 80011be:	bf00      	nop
 80011c0:	08003898 	.word	0x08003898
 80011c4:	20000090 	.word	0x20000090
 80011c8:	0800380c 	.word	0x0800380c
 80011cc:	08003850 	.word	0x08003850
 80011d0:	08003878 	.word	0x08003878

080011d4 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b094      	sub	sp, #80	@ 0x50
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2230      	movs	r2, #48	@ 0x30
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fb13 	bl	800280e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <SystemClock_Config+0xcc>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a27      	ldr	r2, [pc, #156]	@ (80012a0 <SystemClock_Config+0xcc>)
 8001202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <SystemClock_Config+0xcc>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	4b22      	ldr	r3, [pc, #136]	@ (80012a4 <SystemClock_Config+0xd0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a21      	ldr	r2, [pc, #132]	@ (80012a4 <SystemClock_Config+0xd0>)
 800121e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <SystemClock_Config+0xd0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001238:	2310      	movs	r3, #16
 800123a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001244:	2308      	movs	r3, #8
 8001246:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001248:	23c0      	movs	r3, #192	@ 0xc0
 800124a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800124c:	2304      	movs	r3, #4
 800124e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001250:	2308      	movs	r3, #8
 8001252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fd5d 	bl	8001d18 <HAL_RCC_OscConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001264:	f000 f820 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001268:	230f      	movs	r3, #15
 800126a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126c:	2302      	movs	r3, #2
 800126e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001274:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2103      	movs	r1, #3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 ffbe 	bl	8002208 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001292:	f000 f809 	bl	80012a8 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	@ 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40007000 	.word	0x40007000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <LCD_spi_init>:
 *
 * Returns:
 * 	None
 */
void LCD_spi_init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
    SPI_INIT(); // Calling the common SPI Initialization Function
 80012b8:	f7ff fb70 	bl	800099c <SPI_INIT>

    /* Configure DC, RST, CS, and BL pins */
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable GPIOB clock for the Pins
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <LCD_spi_init+0x30>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c0:	4a08      	ldr	r2, [pc, #32]	@ (80012e4 <LCD_spi_init+0x30>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(GPIO_MODER_MODE5_Msk | GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk | GPIO_MODER_MODE4_Msk); // Clear the mode bits for the Pins
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <LCD_spi_init+0x34>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <LCD_spi_init+0x34>)
 80012ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80012d2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0 | GPIO_MODER_MODE4_0); // Set the Pins to output mode
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <LCD_spi_init+0x34>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a03      	ldr	r2, [pc, #12]	@ (80012e8 <LCD_spi_init+0x34>)
 80012da:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020400 	.word	0x40020400

080012ec <LCD_write_command>:
 *
 * Returns:
 * 	None
 */
void LCD_write_command(uint8_t cmd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = GPIOB_BSRR_RESET_DC; // DC Low indicating Command
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <LCD_write_command+0x34>)
 80012f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80012fc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIOB_BSRR_RESET_CS; // Chip Select Low
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <LCD_write_command+0x34>)
 8001300:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001304:	619a      	str	r2, [r3, #24]
	SPI_TX_MULTI(&cmd,  1);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	2101      	movs	r1, #1
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fba0 	bl	8000a50 <SPI_TX_MULTI>
	GPIOB->BSRR = GPIOB_BSRR_SET_CS;   // Chip Select High
 8001310:	4b03      	ldr	r3, [pc, #12]	@ (8001320 <LCD_write_command+0x34>)
 8001312:	2240      	movs	r2, #64	@ 0x40
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40020400 	.word	0x40020400

08001324 <LCD_write_data>:
 *
 * Returns:
 * 	None
 */
void LCD_write_data(uint8_t *buff, uint32_t buff_size)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	GPIOB->BSRR = GPIOB_BSRR_SET_DC;   // DC High indicating Data
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <LCD_write_data+0x30>)
 8001330:	2220      	movs	r2, #32
 8001332:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIOB_BSRR_RESET_CS; // Chip Select Low
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <LCD_write_data+0x30>)
 8001336:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800133a:	619a      	str	r2, [r3, #24]
	SPI_TX_MULTI(buff, buff_size);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fb85 	bl	8000a50 <SPI_TX_MULTI>
	GPIOB->BSRR = GPIOB_BSRR_SET_CS;   // Chip Select High
 8001346:	4b03      	ldr	r3, [pc, #12]	@ (8001354 <LCD_write_data+0x30>)
 8001348:	2240      	movs	r2, #64	@ 0x40
 800134a:	619a      	str	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40020400 	.word	0x40020400

08001358 <LCD_write_byte_data>:
*
* Returns:
* 	None
*/
void LCD_write_byte_data(uint8_t data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = GPIOB_BSRR_SET_DC;   // DC High indicating Data
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <LCD_write_byte_data+0x30>)
 8001364:	2220      	movs	r2, #32
 8001366:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = GPIOB_BSRR_RESET_CS; // Chip Select Low
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <LCD_write_byte_data+0x30>)
 800136a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800136e:	619a      	str	r2, [r3, #24]
	SPI_TX_MULTI(&data, 1);
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb6b 	bl	8000a50 <SPI_TX_MULTI>
	GPIOB->BSRR = GPIOB_BSRR_SET_CS;   // Chip Select High
 800137a:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <LCD_write_byte_data+0x30>)
 800137c:	2240      	movs	r2, #64	@ 0x40
 800137e:	619a      	str	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40020400 	.word	0x40020400

0800138c <LCD_address_window>:
*
* Returns:
* 	None
*/
void LCD_address_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	4611      	mov	r1, r2
 8001398:	461a      	mov	r2, r3
 800139a:	4623      	mov	r3, r4
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	4603      	mov	r3, r0
 80013a0:	80bb      	strh	r3, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
 80013a6:	4613      	mov	r3, r2
 80013a8:	803b      	strh	r3, [r7, #0]
    uint16_t x_start = x0;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	82fb      	strh	r3, [r7, #22]
    uint16_t x_end = x1;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	82bb      	strh	r3, [r7, #20]
    uint16_t y_start = y0;
 80013b2:	88bb      	ldrh	r3, [r7, #4]
 80013b4:	827b      	strh	r3, [r7, #18]
    uint16_t y_end = y1;
 80013b6:	883b      	ldrh	r3, [r7, #0]
 80013b8:	823b      	strh	r3, [r7, #16]

    // Set column address
    LCD_write_command(ST7789_CASET); // Column Address Set command
 80013ba:	202a      	movs	r0, #42	@ 0x2a
 80013bc:	f7ff ff96 	bl	80012ec <LCD_write_command>
    uint8_t col_data[] = {x_start >> LCD_WINDOW_MASK_1, x_start & LCD_WINDOW_MASK_2,
 80013c0:	8afb      	ldrh	r3, [r7, #22]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	733b      	strb	r3, [r7, #12]
 80013ca:	8afb      	ldrh	r3, [r7, #22]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	737b      	strb	r3, [r7, #13]
 80013d0:	8abb      	ldrh	r3, [r7, #20]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	73bb      	strb	r3, [r7, #14]
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73fb      	strb	r3, [r7, #15]
    		x_end >> LCD_WINDOW_MASK_1, x_end & LCD_WINDOW_MASK_2};
    LCD_write_data(col_data, sizeof(col_data));
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2104      	movs	r1, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff9c 	bl	8001324 <LCD_write_data>

    // Set row address
    LCD_write_command(ST7789_RASET); // Row Address Set command
 80013ec:	202b      	movs	r0, #43	@ 0x2b
 80013ee:	f7ff ff7d 	bl	80012ec <LCD_write_command>
    uint8_t row_data[] = {y_start >> LCD_WINDOW_MASK_1, y_start & LCD_WINDOW_MASK_2,
 80013f2:	8a7b      	ldrh	r3, [r7, #18]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	723b      	strb	r3, [r7, #8]
 80013fc:	8a7b      	ldrh	r3, [r7, #18]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	727b      	strb	r3, [r7, #9]
 8001402:	8a3b      	ldrh	r3, [r7, #16]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	b29b      	uxth	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	72bb      	strb	r3, [r7, #10]
 800140c:	8a3b      	ldrh	r3, [r7, #16]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	72fb      	strb	r3, [r7, #11]
    		y_end >> LCD_WINDOW_MASK_1, y_end & LCD_WINDOW_MASK_2};
    LCD_write_data(row_data, sizeof(row_data));
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff83 	bl	8001324 <LCD_write_data>

    LCD_write_command(ST7789_RAMWR); // RAM Write command
 800141e:	202c      	movs	r0, #44	@ 0x2c
 8001420:	f7ff ff64 	bl	80012ec <LCD_write_command>
}
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd90      	pop	{r4, r7, pc}

0800142c <LCD_fill_screen_color>:
*
* Returns:
* 	None
*/
void LCD_fill_screen_color(uint16_t color)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
	LCD_address_window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001436:	f240 133f 	movw	r3, #319	@ 0x13f
 800143a:	22ef      	movs	r2, #239	@ 0xef
 800143c:	2100      	movs	r1, #0
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff ffa4 	bl	800138c <LCD_address_window>
	for (uint16_t i = 0; i < LCD_WIDTH; i++){
 8001444:	2300      	movs	r3, #0
 8001446:	81fb      	strh	r3, [r7, #14]
 8001448:	e01a      	b.n	8001480 <LCD_fill_screen_color+0x54>
		for (uint16_t j = 0; j < LCD_HEIGHT; j++){
 800144a:	2300      	movs	r3, #0
 800144c:	81bb      	strh	r3, [r7, #12]
 800144e:	e010      	b.n	8001472 <LCD_fill_screen_color+0x46>
			uint8_t data[] = {color >> LCD_WINDOW_MASK_1, color & LCD_WINDOW_MASK_2};
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	723b      	strb	r3, [r7, #8]
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	727b      	strb	r3, [r7, #9]
			LCD_write_data(data, sizeof(data));
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	2102      	movs	r1, #2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff5c 	bl	8001324 <LCD_write_data>
		for (uint16_t j = 0; j < LCD_HEIGHT; j++){
 800146c:	89bb      	ldrh	r3, [r7, #12]
 800146e:	3301      	adds	r3, #1
 8001470:	81bb      	strh	r3, [r7, #12]
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001478:	d3ea      	bcc.n	8001450 <LCD_fill_screen_color+0x24>
	for (uint16_t i = 0; i < LCD_WIDTH; i++){
 800147a:	89fb      	ldrh	r3, [r7, #14]
 800147c:	3301      	adds	r3, #1
 800147e:	81fb      	strh	r3, [r7, #14]
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	2bef      	cmp	r3, #239	@ 0xef
 8001484:	d9e1      	bls.n	800144a <LCD_fill_screen_color+0x1e>
		}
	}
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <LCD_draw_pixel>:
*
* Returns:
* 	None
*/
void LCD_draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
 800149a:	460b      	mov	r3, r1
 800149c:	80bb      	strh	r3, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	807b      	strh	r3, [r7, #2]
	LCD_address_window(x, y, x, y); // Set the same boundaries of x and y for a pixel
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	88b9      	ldrh	r1, [r7, #4]
 80014a8:	88f8      	ldrh	r0, [r7, #6]
 80014aa:	f7ff ff6f 	bl	800138c <LCD_address_window>
	uint8_t data[] = {color >> LCD_WINDOW_MASK_1, color & LCD_WINDOW_MASK_2};
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	733b      	strb	r3, [r7, #12]
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	737b      	strb	r3, [r7, #13]
	LCD_write_data(data, sizeof(data));
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2102      	movs	r1, #2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff2d 	bl	8001324 <LCD_write_data>
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <LCD_draw_image>:
*
* Returns:
* 	None
*/
void LCD_draw_image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint16_t *img_bit_map)
{
 80014d2:	b590      	push	{r4, r7, lr}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4604      	mov	r4, r0
 80014da:	4608      	mov	r0, r1
 80014dc:	4611      	mov	r1, r2
 80014de:	461a      	mov	r2, r3
 80014e0:	4623      	mov	r3, r4
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	4603      	mov	r3, r0
 80014e6:	80bb      	strh	r3, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
 80014ec:	4613      	mov	r3, r2
 80014ee:	803b      	strh	r3, [r7, #0]
    for (uint16_t row = 0; row < height; row++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	81fb      	strh	r3, [r7, #14]
 80014f4:	e023      	b.n	800153e <LCD_draw_image+0x6c>
        for (uint16_t col = 0; col < width; col++) {
 80014f6:	2300      	movs	r3, #0
 80014f8:	81bb      	strh	r3, [r7, #12]
 80014fa:	e019      	b.n	8001530 <LCD_draw_image+0x5e>
            uint16_t color = img_bit_map[row * width + col];
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	fb03 f202 	mul.w	r2, r3, r2
 8001504:	89bb      	ldrh	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	6a3a      	ldr	r2, [r7, #32]
 800150c:	4413      	add	r3, r2
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	817b      	strh	r3, [r7, #10]
            LCD_draw_pixel(x + col, y + row, color);
 8001512:	88fa      	ldrh	r2, [r7, #6]
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	b298      	uxth	r0, r3
 800151a:	88ba      	ldrh	r2, [r7, #4]
 800151c:	89fb      	ldrh	r3, [r7, #14]
 800151e:	4413      	add	r3, r2
 8001520:	b29b      	uxth	r3, r3
 8001522:	897a      	ldrh	r2, [r7, #10]
 8001524:	4619      	mov	r1, r3
 8001526:	f7ff ffb3 	bl	8001490 <LCD_draw_pixel>
        for (uint16_t col = 0; col < width; col++) {
 800152a:	89bb      	ldrh	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	81bb      	strh	r3, [r7, #12]
 8001530:	89ba      	ldrh	r2, [r7, #12]
 8001532:	887b      	ldrh	r3, [r7, #2]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3e1      	bcc.n	80014fc <LCD_draw_image+0x2a>
    for (uint16_t row = 0; row < height; row++) {
 8001538:	89fb      	ldrh	r3, [r7, #14]
 800153a:	3301      	adds	r3, #1
 800153c:	81fb      	strh	r3, [r7, #14]
 800153e:	89fa      	ldrh	r2, [r7, #14]
 8001540:	883b      	ldrh	r3, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d3d7      	bcc.n	80014f6 <LCD_draw_image+0x24>
        }
    }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <LCD_write_character>:
*
* Returns:
* 	None
*/
void LCD_write_character(uint16_t x, uint16_t y, char ch, tFont font, uint16_t color, uint16_t bgcolor)
{
 8001550:	b082      	sub	sp, #8
 8001552:	b590      	push	{r4, r7, lr}
 8001554:	b089      	sub	sp, #36	@ 0x24
 8001556:	af00      	add	r7, sp, #0
 8001558:	637b      	str	r3, [r7, #52]	@ 0x34
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	460b      	mov	r3, r1
 8001560:	80bb      	strh	r3, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    // Set the address window for the character display
    LCD_address_window(x, y, x + font.width - 1, y + font.height - 1);
 8001566:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	4413      	add	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	b29c      	uxth	r4, r3
 8001572:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	88b9      	ldrh	r1, [r7, #4]
 8001580:	88f8      	ldrh	r0, [r7, #6]
 8001582:	4622      	mov	r2, r4
 8001584:	f7ff ff02 	bl	800138c <LCD_address_window>

    // Loop through each row of the character's font data
    for (i = 0; i < font.height; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	e041      	b.n	8001612 <LCD_write_character+0xc2>
        // Retrieve the bitmap data for the current row of the character
        b = font.data[(ch - LCD_WRITE_MASK_1) * font.height + i];
 800158e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	3b20      	subs	r3, #32
 8001594:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8001596:	fb01 f303 	mul.w	r3, r1, r3
 800159a:	4619      	mov	r1, r3
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	440b      	add	r3, r1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	617b      	str	r3, [r7, #20]

        // Loop through each pixel in the current row
        for (j = 0; j < font.width; j++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	e029      	b.n	8001602 <LCD_write_character+0xb2>
            // Check if the current pixel is part of the character foreground or the background
            if ((b << j) & LCD_WRITE_MASK_2) {
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00e      	beq.n	80015dc <LCD_write_character+0x8c>
                // Foreground pixel: set to the specified color
                uint8_t data[] = {color >> LCD_WINDOW_MASK_1, color & LCD_WINDOW_MASK_2};
 80015be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	743b      	strb	r3, [r7, #16]
 80015c8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	747b      	strb	r3, [r7, #17]
                LCD_write_data(data, sizeof(data));
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	2102      	movs	r1, #2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fea5 	bl	8001324 <LCD_write_data>
 80015da:	e00f      	b.n	80015fc <LCD_write_character+0xac>
            } else {
                // Background pixel: set to the specified background color
                uint8_t data[] = {bgcolor >> LCD_WINDOW_MASK_1, bgcolor & LCD_WINDOW_MASK_2};
 80015dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	733b      	strb	r3, [r7, #12]
 80015e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	737b      	strb	r3, [r7, #13]
                LCD_write_data(data, sizeof(data));
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2102      	movs	r1, #2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe94 	bl	8001324 <LCD_write_data>
        for (j = 0; j < font.width; j++) {
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001604:	461a      	mov	r2, r3
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4293      	cmp	r3, r2
 800160a:	d3d0      	bcc.n	80015ae <LCD_write_character+0x5e>
    for (i = 0; i < font.height; i++) {
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001614:	461a      	mov	r2, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4293      	cmp	r3, r2
 800161a:	d3b8      	bcc.n	800158e <LCD_write_character+0x3e>
            }
        }
    }
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	3724      	adds	r7, #36	@ 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001628:	b002      	add	sp, #8
 800162a:	4770      	bx	lr

0800162c <LCD_write_string>:
*
* Returns:
* 	None
*/
void LCD_write_string(uint16_t x, uint16_t y, const char *str, tFont font, uint16_t color, uint16_t bgcolor)
{
 800162c:	b082      	sub	sp, #8
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af04      	add	r7, sp, #16
 8001634:	603a      	str	r2, [r7, #0]
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	4603      	mov	r3, r0
 800163a:	80fb      	strh	r3, [r7, #6]
 800163c:	460b      	mov	r3, r1
 800163e:	80bb      	strh	r3, [r7, #4]
    // Loop through each character in the string
    while (*str) {
 8001640:	e02c      	b.n	800169c <LCD_write_string+0x70>
        // Move to next line if character exceeds screen width
        if (x + font.width >= LCD_WIDTH) {
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	8aba      	ldrh	r2, [r7, #20]
 8001646:	4413      	add	r3, r2
 8001648:	2bef      	cmp	r3, #239	@ 0xef
 800164a:	dd13      	ble.n	8001674 <LCD_write_string+0x48>
            x = 0; // Reset x-coordinate
 800164c:	2300      	movs	r3, #0
 800164e:	80fb      	strh	r3, [r7, #6]
            y += font.height; // Move y-coordinate down by one character height
 8001650:	8afa      	ldrh	r2, [r7, #22]
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	80bb      	strh	r3, [r7, #4]

            // Check if the new line will exceed the screen height
            if (y + font.height >= LCD_HEIGHT) {
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	8afa      	ldrh	r2, [r7, #22]
 800165c:	4413      	add	r3, r2
 800165e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001662:	da20      	bge.n	80016a6 <LCD_write_string+0x7a>
                // If there's no more vertical space, stop drawing
                break;
            }

            // Skip the character if space is detected
            if (*str == ' ') {
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b20      	cmp	r3, #32
 800166a:	d103      	bne.n	8001674 <LCD_write_string+0x48>
                str++;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	603b      	str	r3, [r7, #0]
                continue;
 8001672:	e013      	b.n	800169c <LCD_write_string+0x70>
            }
        }

        // Call the Write Character function to write the individual characters on the LCD
        LCD_write_character(x, y, *str, font, color, bgcolor);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	781a      	ldrb	r2, [r3, #0]
 8001678:	88b9      	ldrh	r1, [r7, #4]
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	8c3b      	ldrh	r3, [r7, #32]
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	8bbb      	ldrh	r3, [r7, #28]
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f7ff ff61 	bl	8001550 <LCD_write_character>

        // Move x-coordinate forward for the next character
        x += font.width;
 800168e:	8aba      	ldrh	r2, [r7, #20]
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4413      	add	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]

        // Advance to the next character in the string
        str++;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	603b      	str	r3, [r7, #0]
    while (*str) {
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ce      	bne.n	8001642 <LCD_write_string+0x16>
    }
}
 80016a4:	e000      	b.n	80016a8 <LCD_write_string+0x7c>
                break;
 80016a6:	bf00      	nop
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016b2:	b002      	add	sp, #8
 80016b4:	4770      	bx	lr
	...

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	@ (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	@ (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	@ (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <command_button_config>:
	GPIOA->BSRR |=GPS_ON_INDICATOR;
	GPIOA->BSRR |=MAX30102_ON_INDICATOR;
}


void  command_button_config(){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // Enable GPIOC clock
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <command_button_config+0x84>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <command_button_config+0x84>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6313      	str	r3, [r2, #48]	@ 0x30
	    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN; // Enable SYSCFG clock
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <command_button_config+0x84>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <command_button_config+0x84>)
 800175e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001762:	6453      	str	r3, [r2, #68]	@ 0x44

	    // Configure PC6 and PC7 as inputs with pull-up resistors
	    GPIOC->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7); // Input mode for PC6 and PC7
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <command_button_config+0x88>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a19      	ldr	r2, [pc, #100]	@ (80017d0 <command_button_config+0x88>)
 800176a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800176e:	6013      	str	r3, [r2, #0]
	    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR6 | GPIO_PUPDR_PUPDR7); // Clear pull-up/down bits
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <command_button_config+0x88>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a16      	ldr	r2, [pc, #88]	@ (80017d0 <command_button_config+0x88>)
 8001776:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800177a:	60d3      	str	r3, [r2, #12]
	    GPIOC->PUPDR |= (GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR7_0); // Enable pull-up for PC6 and PC7
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <command_button_config+0x88>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <command_button_config+0x88>)
 8001782:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 8001786:	60d3      	str	r3, [r2, #12]

	    // Configure PC6 and PC7 as sources for EXTI6 and EXTI7
	    SYSCFG->EXTICR[1] &= ~(SYSCFG_EXTICR2_EXTI6 | SYSCFG_EXTICR2_EXTI7); // Clear bits
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <command_button_config+0x8c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <command_button_config+0x8c>)
 800178e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001792:	60d3      	str	r3, [r2, #12]
	    SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC | SYSCFG_EXTICR2_EXTI7_PC); // Map PC6 and PC7
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <command_button_config+0x8c>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <command_button_config+0x8c>)
 800179a:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800179e:	60d3      	str	r3, [r2, #12]

	    // Configure EXTI lines for falling edge trigger and unmask them
	    EXTI->IMR |= (EXTI_IMR_MR6 | EXTI_IMR_MR7); // Unmask EXTI6 and EXTI7
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <command_button_config+0x90>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <command_button_config+0x90>)
 80017a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017aa:	6013      	str	r3, [r2, #0]
	    EXTI->FTSR |= (EXTI_FTSR_TR6 | EXTI_FTSR_TR7); // Falling edge trigger for EXTI6 and EXTI7
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <command_button_config+0x90>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4a09      	ldr	r2, [pc, #36]	@ (80017d8 <command_button_config+0x90>)
 80017b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80017b6:	60d3      	str	r3, [r2, #12]

	    // Enable EXTI9_5 interrupt in NVIC for PC6 and PC7
	    NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b8:	2017      	movs	r0, #23
 80017ba:	f7ff ff7d 	bl	80016b8 <__NVIC_EnableIRQ>
	    NVIC_SetPriority(EXTI9_5_IRQn, 2); // Set priority
 80017be:	2102      	movs	r1, #2
 80017c0:	2017      	movs	r0, #23
 80017c2:	f7ff ff97 	bl	80016f4 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40013c00 	.word	0x40013c00

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_kill>:

int _kill(int pid, int sig)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001848:	f001 f88c 	bl	8002964 <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	2216      	movs	r2, #22
 8001850:	601a      	str	r2, [r3, #0]
  return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_exit>:

void _exit (int status)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001866:	f04f 31ff 	mov.w	r1, #4294967295
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffe7 	bl	800183e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <_exit+0x12>

08001874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001886:	f000 f923 	bl	8001ad0 <__io_getchar>
 800188a:	4601      	mov	r1, r0
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf0      	blt.n	8001886 <_read+0x12>
  }

  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f8f3 	bl	8001ab4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <_write+0x12>
  }
  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800190e:	605a      	str	r2, [r3, #4]
  return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	@ (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	@ (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f000 fff0 	bl	8002964 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20020000 	.word	0x20020000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	200000a4 	.word	0x200000a4
 80019b8:	200001f8 	.word	0x200001f8

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <usart_init>:
 *  usart get and put and usart init
 */

#include "usart.h"

void usart_init() {
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <usart_init+0x70>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <usart_init+0x70>)
 80019ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019ee:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <usart_init+0x70>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f4:	4a16      	ldr	r2, [pc, #88]	@ (8001a50 <usart_init+0x70>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 and PA3 as alternate function
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER2_Pos);
 80019fc:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <usart_init+0x74>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <usart_init+0x74>)
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (ALTERNATE_MODE << GPIO_MODER_MODER3_Pos);
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <usart_init+0x74>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <usart_init+0x74>)
 8001a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a12:	6013      	str	r3, [r2, #0]

    // Set PA2 to USART_TX and PA3 to USART_RX
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL2_Pos); // TX alternate function
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <usart_init+0x74>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <usart_init+0x74>)
 8001a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a1e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << GPIO_AFRL_AFSEL3_Pos); // RX alternate function
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <usart_init+0x74>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	@ (8001a54 <usart_init+0x74>)
 8001a26:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001a2a:	6213      	str	r3, [r2, #32]

    // Enable USART, transmitter, and receiver
    USART2->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <usart_init+0x78>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a09      	ldr	r2, [pc, #36]	@ (8001a58 <usart_init+0x78>)
 8001a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a36:	f043 030c 	orr.w	r3, r3, #12
 8001a3a:	60d3      	str	r3, [r2, #12]

    // Set baud rate to 9600 (make sure BAUD_9600 is defined based on your clock setup)
    USART2->BRR = BAUD_9600;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <usart_init+0x78>)
 8001a3e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001a42:	609a      	str	r2, [r3, #8]

    // Test character output to verify USART setup
   // USART2->DR = 'B';
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40004400 	.word	0x40004400

08001a5c <usart_out>:

void usart_out(char ch) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)) {
 8001a66:	bf00      	nop
 8001a68:	4b07      	ldr	r3, [pc, #28]	@ (8001a88 <usart_out+0x2c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f9      	beq.n	8001a68 <usart_out+0xc>
        // Wait until transmit buffer is empty
    }
    USART2->DR = ch;
 8001a74:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <usart_out+0x2c>)
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	6053      	str	r3, [r2, #4]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40004400 	.word	0x40004400

08001a8c <usart_get>:
    while (*string) {
        usart_out(*string++);
    }
}

char usart_get() {
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {
 8001a90:	bf00      	nop
 8001a92:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <usart_get+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f9      	beq.n	8001a92 <usart_get+0x6>
        // Wait until receive buffer is not empty
    }
    return USART2->DR;
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <usart_get+0x24>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	b2db      	uxtb	r3, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <__io_putchar>:

// Override weak symbols for printf and getchar compatibility
int __io_putchar(int ch) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
    usart_out((char)ch); // Send character using USART
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ffcb 	bl	8001a5c <usart_out>
    return ch;           // Return the character for compatibility
 8001ac6:	687b      	ldr	r3, [r7, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <__io_getchar>:

int __io_getchar(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    return usart_get();  // Receive character using USART
 8001ad4:	f7ff ffda 	bl	8001a8c <usart_get>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae4:	f7ff ff6a 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f000 ff2f 	bl	8002970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff fb0f 	bl	8001134 <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b24:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 8001b28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b2c:	200001f8 	.word	0x200001f8

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_InitTick+0x54>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x58>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	4619      	mov	r1, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f8d4 	bl	8001d00 <HAL_SYSTICK_Config>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00e      	b.n	8001b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b0f      	cmp	r3, #15
 8001b66:	d80a      	bhi.n	8001b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f000 f8aa 	bl	8001cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <HAL_InitTick+0x5c>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	20000004 	.word	0x20000004

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200000a8 	.word	0x200000a8

08001bac <__NVIC_GetPriorityGrouping>:
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cda:	f7ff ff67 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	6978      	ldr	r0, [r7, #20]
 8001ce6:	f7ff ff99 	bl	8001c1c <NVIC_EncodePriority>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff68 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffbb 	bl	8001c84 <SysTick_Config>
 8001d0e:	4603      	mov	r3, r0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e267      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d075      	beq.n	8001e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d36:	4b88      	ldr	r3, [pc, #544]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d00c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d42:	4b85      	ldr	r3, [pc, #532]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d112      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4e:	4b82      	ldr	r3, [pc, #520]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d05b      	beq.n	8001e20 <HAL_RCC_OscConfig+0x108>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d157      	bne.n	8001e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e242      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x74>
 8001d7e:	4b76      	ldr	r3, [pc, #472]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a75      	ldr	r2, [pc, #468]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xb0>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b70      	ldr	r3, [pc, #448]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6c      	ldr	r2, [pc, #432]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xb0>
 8001db0:	4b69      	ldr	r3, [pc, #420]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a68      	ldr	r2, [pc, #416]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b66      	ldr	r3, [pc, #408]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a65      	ldr	r2, [pc, #404]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff fee0 	bl	8001b94 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff fedc 	bl	8001b94 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	@ 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e207      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b5b      	ldr	r3, [pc, #364]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xc0>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df8:	f7ff fecc 	bl	8001b94 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fec8 	bl	8001b94 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	@ 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1f3      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b51      	ldr	r3, [pc, #324]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0xe8>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d063      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3a:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e46:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b41      	ldr	r3, [pc, #260]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x152>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1c7      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4937      	ldr	r1, [pc, #220]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e03a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_OscConfig+0x244>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fe81 	bl	8001b94 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fe7d 	bl	8001b94 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1a8      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4925      	ldr	r1, [pc, #148]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eca:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_RCC_OscConfig+0x244>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fe60 	bl	8001b94 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fe5c 	bl	8001b94 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e187      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d036      	beq.n	8001f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_RCC_OscConfig+0x248>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f10:	f7ff fe40 	bl	8001b94 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7ff fe3c 	bl	8001b94 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e167      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x200>
 8001f36:	e01b      	b.n	8001f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_RCC_OscConfig+0x248>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fe29 	bl	8001b94 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	e00e      	b.n	8001f64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f46:	f7ff fe25 	bl	8001b94 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d907      	bls.n	8001f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e150      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	42470000 	.word	0x42470000
 8001f60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	4b88      	ldr	r3, [pc, #544]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1ea      	bne.n	8001f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 8097 	beq.w	80020ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f82:	4b81      	ldr	r3, [pc, #516]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b7d      	ldr	r3, [pc, #500]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a7c      	ldr	r2, [pc, #496]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f9e:	4b7a      	ldr	r3, [pc, #488]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001faa:	2301      	movs	r3, #1
 8001fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fae:	4b77      	ldr	r3, [pc, #476]	@ (800218c <HAL_RCC_OscConfig+0x474>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d118      	bne.n	8001fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fba:	4b74      	ldr	r3, [pc, #464]	@ (800218c <HAL_RCC_OscConfig+0x474>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a73      	ldr	r2, [pc, #460]	@ (800218c <HAL_RCC_OscConfig+0x474>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc6:	f7ff fde5 	bl	8001b94 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7ff fde1 	bl	8001b94 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e10c      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	@ (800218c <HAL_RCC_OscConfig+0x474>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x2ea>
 8001ff4:	4b64      	ldr	r3, [pc, #400]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff8:	4a63      	ldr	r2, [pc, #396]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x324>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b05      	cmp	r3, #5
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0x30c>
 800200a:	4b5f      	ldr	r3, [pc, #380]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800200e:	4a5e      	ldr	r2, [pc, #376]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	6713      	str	r3, [r2, #112]	@ 0x70
 8002016:	4b5c      	ldr	r3, [pc, #368]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201a:	4a5b      	ldr	r2, [pc, #364]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6713      	str	r3, [r2, #112]	@ 0x70
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0x324>
 8002024:	4b58      	ldr	r3, [pc, #352]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002028:	4a57      	ldr	r2, [pc, #348]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002030:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002034:	4a54      	ldr	r2, [pc, #336]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002036:	f023 0304 	bic.w	r3, r3, #4
 800203a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d015      	beq.n	8002070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff fda6 	bl	8001b94 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204a:	e00a      	b.n	8002062 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204c:	f7ff fda2 	bl	8001b94 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0cb      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002062:	4b49      	ldr	r3, [pc, #292]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0ee      	beq.n	800204c <HAL_RCC_OscConfig+0x334>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fd90 	bl	8001b94 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff fd8c 	bl	8001b94 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0b5      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208e:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ee      	bne.n	8002078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a0:	4b39      	ldr	r3, [pc, #228]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	4a38      	ldr	r2, [pc, #224]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a1 	beq.w	80021f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d05c      	beq.n	800217c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d141      	bne.n	800214e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_RCC_OscConfig+0x478>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fd60 	bl	8001b94 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff fd5c 	bl	8001b94 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e087      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69da      	ldr	r2, [r3, #28]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	019b      	lsls	r3, r3, #6
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	3b01      	subs	r3, #1
 8002110:	041b      	lsls	r3, r3, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	491b      	ldr	r1, [pc, #108]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x478>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff fd35 	bl	8001b94 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7ff fd31 	bl	8001b94 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e05c      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002140:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x416>
 800214c:	e054      	b.n	80021f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x478>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fd1e 	bl	8001b94 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fd1a 	bl	8001b94 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e045      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_RCC_OscConfig+0x470>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
 800217a:	e03d      	b.n	80021f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e038      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000
 8002190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002194:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x4ec>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d028      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d121      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d11a      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021c4:	4013      	ands	r3, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d111      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021da:	085b      	lsrs	r3, r3, #1
 80021dc:	3b01      	subs	r3, #1
 80021de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0cc      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800221c:	4b68      	ldr	r3, [pc, #416]	@ (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d90c      	bls.n	8002244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b65      	ldr	r3, [pc, #404]	@ (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b63      	ldr	r3, [pc, #396]	@ (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0b8      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b59      	ldr	r3, [pc, #356]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002274:	4b53      	ldr	r3, [pc, #332]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a52      	ldr	r2, [pc, #328]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800227e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	4b50      	ldr	r3, [pc, #320]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	494d      	ldr	r1, [pc, #308]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d044      	beq.n	8002328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	4b47      	ldr	r3, [pc, #284]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d119      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e07f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c6:	4b3f      	ldr	r3, [pc, #252]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e067      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e6:	4b37      	ldr	r3, [pc, #220]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 0203 	bic.w	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4934      	ldr	r1, [pc, #208]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f8:	f7ff fc4c 	bl	8001b94 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002300:	f7ff fc48 	bl	8001b94 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e04f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 020c 	and.w	r2, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	429a      	cmp	r2, r3
 8002326:	d1eb      	bne.n	8002300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002328:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d20c      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e032      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4916      	ldr	r1, [pc, #88]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490e      	ldr	r1, [pc, #56]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800238e:	f000 f821 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490a      	ldr	r1, [pc, #40]	@ (80023c8 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a09      	ldr	r2, [pc, #36]	@ (80023cc <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023aa:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fbc0 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08006b84 	.word	0x08006b84
 80023cc:	20000000 	.word	0x20000000
 80023d0:	20000004 	.word	0x20000004

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d8:	b094      	sub	sp, #80	@ 0x50
 80023da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ec:	4b79      	ldr	r3, [pc, #484]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d00d      	beq.n	8002414 <HAL_RCC_GetSysClockFreq+0x40>
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	f200 80e1 	bhi.w	80025c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x34>
 8002402:	2b04      	cmp	r3, #4
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x3a>
 8002406:	e0db      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b73      	ldr	r3, [pc, #460]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800240c:	e0db      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240e:	4b73      	ldr	r3, [pc, #460]	@ (80025dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002412:	e0d8      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002414:	4b6f      	ldr	r3, [pc, #444]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241e:	4b6d      	ldr	r3, [pc, #436]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242a:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	2200      	movs	r2, #0
 8002432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002434:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243c:	633b      	str	r3, [r7, #48]	@ 0x30
 800243e:	2300      	movs	r3, #0
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34
 8002442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002446:	4622      	mov	r2, r4
 8002448:	462b      	mov	r3, r5
 800244a:	f04f 0000 	mov.w	r0, #0
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	0159      	lsls	r1, r3, #5
 8002454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002458:	0150      	lsls	r0, r2, #5
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4621      	mov	r1, r4
 8002460:	1a51      	subs	r1, r2, r1
 8002462:	6139      	str	r1, [r7, #16]
 8002464:	4629      	mov	r1, r5
 8002466:	eb63 0301 	sbc.w	r3, r3, r1
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002478:	4659      	mov	r1, fp
 800247a:	018b      	lsls	r3, r1, #6
 800247c:	4651      	mov	r1, sl
 800247e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002482:	4651      	mov	r1, sl
 8002484:	018a      	lsls	r2, r1, #6
 8002486:	4651      	mov	r1, sl
 8002488:	ebb2 0801 	subs.w	r8, r2, r1
 800248c:	4659      	mov	r1, fp
 800248e:	eb63 0901 	sbc.w	r9, r3, r1
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800249e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024a6:	4690      	mov	r8, r2
 80024a8:	4699      	mov	r9, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	eb18 0303 	adds.w	r3, r8, r3
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	462b      	mov	r3, r5
 80024b4:	eb49 0303 	adc.w	r3, r9, r3
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024c6:	4629      	mov	r1, r5
 80024c8:	024b      	lsls	r3, r1, #9
 80024ca:	4621      	mov	r1, r4
 80024cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024d0:	4621      	mov	r1, r4
 80024d2:	024a      	lsls	r2, r1, #9
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024da:	2200      	movs	r2, #0
 80024dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024e4:	f7fd fecc 	bl	8000280 <__aeabi_uldivmod>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4613      	mov	r3, r2
 80024ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f0:	e058      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	099b      	lsrs	r3, r3, #6
 80024f8:	2200      	movs	r2, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	4611      	mov	r1, r2
 80024fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
 8002508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800250c:	4642      	mov	r2, r8
 800250e:	464b      	mov	r3, r9
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	0159      	lsls	r1, r3, #5
 800251a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800251e:	0150      	lsls	r0, r2, #5
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4641      	mov	r1, r8
 8002526:	ebb2 0a01 	subs.w	sl, r2, r1
 800252a:	4649      	mov	r1, r9
 800252c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800253c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002544:	ebb2 040a 	subs.w	r4, r2, sl
 8002548:	eb63 050b 	sbc.w	r5, r3, fp
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	00eb      	lsls	r3, r5, #3
 8002556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800255a:	00e2      	lsls	r2, r4, #3
 800255c:	4614      	mov	r4, r2
 800255e:	461d      	mov	r5, r3
 8002560:	4643      	mov	r3, r8
 8002562:	18e3      	adds	r3, r4, r3
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	464b      	mov	r3, r9
 8002568:	eb45 0303 	adc.w	r3, r5, r3
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800257a:	4629      	mov	r1, r5
 800257c:	028b      	lsls	r3, r1, #10
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002584:	4621      	mov	r1, r4
 8002586:	028a      	lsls	r2, r1, #10
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800258e:	2200      	movs	r2, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	61fa      	str	r2, [r7, #28]
 8002594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002598:	f7fd fe72 	bl	8000280 <__aeabi_uldivmod>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4613      	mov	r3, r2
 80025a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3750      	adds	r7, #80	@ 0x50
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	00f42400 	.word	0x00f42400
 80025dc:	007a1200 	.word	0x007a1200

080025e0 <std>:
 80025e0:	2300      	movs	r3, #0
 80025e2:	b510      	push	{r4, lr}
 80025e4:	4604      	mov	r4, r0
 80025e6:	e9c0 3300 	strd	r3, r3, [r0]
 80025ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025ee:	6083      	str	r3, [r0, #8]
 80025f0:	8181      	strh	r1, [r0, #12]
 80025f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80025f4:	81c2      	strh	r2, [r0, #14]
 80025f6:	6183      	str	r3, [r0, #24]
 80025f8:	4619      	mov	r1, r3
 80025fa:	2208      	movs	r2, #8
 80025fc:	305c      	adds	r0, #92	@ 0x5c
 80025fe:	f000 f906 	bl	800280e <memset>
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <std+0x58>)
 8002604:	6263      	str	r3, [r4, #36]	@ 0x24
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <std+0x5c>)
 8002608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <std+0x60>)
 800260c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <std+0x64>)
 8002610:	6323      	str	r3, [r4, #48]	@ 0x30
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <std+0x68>)
 8002614:	6224      	str	r4, [r4, #32]
 8002616:	429c      	cmp	r4, r3
 8002618:	d006      	beq.n	8002628 <std+0x48>
 800261a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800261e:	4294      	cmp	r4, r2
 8002620:	d002      	beq.n	8002628 <std+0x48>
 8002622:	33d0      	adds	r3, #208	@ 0xd0
 8002624:	429c      	cmp	r4, r3
 8002626:	d105      	bne.n	8002634 <std+0x54>
 8002628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800262c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002630:	f000 b9c2 	b.w	80029b8 <__retarget_lock_init_recursive>
 8002634:	bd10      	pop	{r4, pc}
 8002636:	bf00      	nop
 8002638:	08002789 	.word	0x08002789
 800263c:	080027ab 	.word	0x080027ab
 8002640:	080027e3 	.word	0x080027e3
 8002644:	08002807 	.word	0x08002807
 8002648:	200000ac 	.word	0x200000ac

0800264c <stdio_exit_handler>:
 800264c:	4a02      	ldr	r2, [pc, #8]	@ (8002658 <stdio_exit_handler+0xc>)
 800264e:	4903      	ldr	r1, [pc, #12]	@ (800265c <stdio_exit_handler+0x10>)
 8002650:	4803      	ldr	r0, [pc, #12]	@ (8002660 <stdio_exit_handler+0x14>)
 8002652:	f000 b869 	b.w	8002728 <_fwalk_sglue>
 8002656:	bf00      	nop
 8002658:	2000000c 	.word	0x2000000c
 800265c:	080032b5 	.word	0x080032b5
 8002660:	2000001c 	.word	0x2000001c

08002664 <cleanup_stdio>:
 8002664:	6841      	ldr	r1, [r0, #4]
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <cleanup_stdio+0x34>)
 8002668:	4299      	cmp	r1, r3
 800266a:	b510      	push	{r4, lr}
 800266c:	4604      	mov	r4, r0
 800266e:	d001      	beq.n	8002674 <cleanup_stdio+0x10>
 8002670:	f000 fe20 	bl	80032b4 <_fflush_r>
 8002674:	68a1      	ldr	r1, [r4, #8]
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <cleanup_stdio+0x38>)
 8002678:	4299      	cmp	r1, r3
 800267a:	d002      	beq.n	8002682 <cleanup_stdio+0x1e>
 800267c:	4620      	mov	r0, r4
 800267e:	f000 fe19 	bl	80032b4 <_fflush_r>
 8002682:	68e1      	ldr	r1, [r4, #12]
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <cleanup_stdio+0x3c>)
 8002686:	4299      	cmp	r1, r3
 8002688:	d004      	beq.n	8002694 <cleanup_stdio+0x30>
 800268a:	4620      	mov	r0, r4
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002690:	f000 be10 	b.w	80032b4 <_fflush_r>
 8002694:	bd10      	pop	{r4, pc}
 8002696:	bf00      	nop
 8002698:	200000ac 	.word	0x200000ac
 800269c:	20000114 	.word	0x20000114
 80026a0:	2000017c 	.word	0x2000017c

080026a4 <global_stdio_init.part.0>:
 80026a4:	b510      	push	{r4, lr}
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <global_stdio_init.part.0+0x30>)
 80026a8:	4c0b      	ldr	r4, [pc, #44]	@ (80026d8 <global_stdio_init.part.0+0x34>)
 80026aa:	4a0c      	ldr	r2, [pc, #48]	@ (80026dc <global_stdio_init.part.0+0x38>)
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	4620      	mov	r0, r4
 80026b0:	2200      	movs	r2, #0
 80026b2:	2104      	movs	r1, #4
 80026b4:	f7ff ff94 	bl	80025e0 <std>
 80026b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80026bc:	2201      	movs	r2, #1
 80026be:	2109      	movs	r1, #9
 80026c0:	f7ff ff8e 	bl	80025e0 <std>
 80026c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026c8:	2202      	movs	r2, #2
 80026ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ce:	2112      	movs	r1, #18
 80026d0:	f7ff bf86 	b.w	80025e0 <std>
 80026d4:	200001e4 	.word	0x200001e4
 80026d8:	200000ac 	.word	0x200000ac
 80026dc:	0800264d 	.word	0x0800264d

080026e0 <__sfp_lock_acquire>:
 80026e0:	4801      	ldr	r0, [pc, #4]	@ (80026e8 <__sfp_lock_acquire+0x8>)
 80026e2:	f000 b96a 	b.w	80029ba <__retarget_lock_acquire_recursive>
 80026e6:	bf00      	nop
 80026e8:	200001ed 	.word	0x200001ed

080026ec <__sfp_lock_release>:
 80026ec:	4801      	ldr	r0, [pc, #4]	@ (80026f4 <__sfp_lock_release+0x8>)
 80026ee:	f000 b965 	b.w	80029bc <__retarget_lock_release_recursive>
 80026f2:	bf00      	nop
 80026f4:	200001ed 	.word	0x200001ed

080026f8 <__sinit>:
 80026f8:	b510      	push	{r4, lr}
 80026fa:	4604      	mov	r4, r0
 80026fc:	f7ff fff0 	bl	80026e0 <__sfp_lock_acquire>
 8002700:	6a23      	ldr	r3, [r4, #32]
 8002702:	b11b      	cbz	r3, 800270c <__sinit+0x14>
 8002704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002708:	f7ff bff0 	b.w	80026ec <__sfp_lock_release>
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <__sinit+0x28>)
 800270e:	6223      	str	r3, [r4, #32]
 8002710:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <__sinit+0x2c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f5      	bne.n	8002704 <__sinit+0xc>
 8002718:	f7ff ffc4 	bl	80026a4 <global_stdio_init.part.0>
 800271c:	e7f2      	b.n	8002704 <__sinit+0xc>
 800271e:	bf00      	nop
 8002720:	08002665 	.word	0x08002665
 8002724:	200001e4 	.word	0x200001e4

08002728 <_fwalk_sglue>:
 8002728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800272c:	4607      	mov	r7, r0
 800272e:	4688      	mov	r8, r1
 8002730:	4614      	mov	r4, r2
 8002732:	2600      	movs	r6, #0
 8002734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002738:	f1b9 0901 	subs.w	r9, r9, #1
 800273c:	d505      	bpl.n	800274a <_fwalk_sglue+0x22>
 800273e:	6824      	ldr	r4, [r4, #0]
 8002740:	2c00      	cmp	r4, #0
 8002742:	d1f7      	bne.n	8002734 <_fwalk_sglue+0xc>
 8002744:	4630      	mov	r0, r6
 8002746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274a:	89ab      	ldrh	r3, [r5, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d907      	bls.n	8002760 <_fwalk_sglue+0x38>
 8002750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002754:	3301      	adds	r3, #1
 8002756:	d003      	beq.n	8002760 <_fwalk_sglue+0x38>
 8002758:	4629      	mov	r1, r5
 800275a:	4638      	mov	r0, r7
 800275c:	47c0      	blx	r8
 800275e:	4306      	orrs	r6, r0
 8002760:	3568      	adds	r5, #104	@ 0x68
 8002762:	e7e9      	b.n	8002738 <_fwalk_sglue+0x10>

08002764 <iprintf>:
 8002764:	b40f      	push	{r0, r1, r2, r3}
 8002766:	b507      	push	{r0, r1, r2, lr}
 8002768:	4906      	ldr	r1, [pc, #24]	@ (8002784 <iprintf+0x20>)
 800276a:	ab04      	add	r3, sp, #16
 800276c:	6808      	ldr	r0, [r1, #0]
 800276e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002772:	6881      	ldr	r1, [r0, #8]
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	f000 fa73 	bl	8002c60 <_vfiprintf_r>
 800277a:	b003      	add	sp, #12
 800277c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002780:	b004      	add	sp, #16
 8002782:	4770      	bx	lr
 8002784:	20000018 	.word	0x20000018

08002788 <__sread>:
 8002788:	b510      	push	{r4, lr}
 800278a:	460c      	mov	r4, r1
 800278c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002790:	f000 f8c4 	bl	800291c <_read_r>
 8002794:	2800      	cmp	r0, #0
 8002796:	bfab      	itete	ge
 8002798:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800279a:	89a3      	ldrhlt	r3, [r4, #12]
 800279c:	181b      	addge	r3, r3, r0
 800279e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027a2:	bfac      	ite	ge
 80027a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027a6:	81a3      	strhlt	r3, [r4, #12]
 80027a8:	bd10      	pop	{r4, pc}

080027aa <__swrite>:
 80027aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027ae:	461f      	mov	r7, r3
 80027b0:	898b      	ldrh	r3, [r1, #12]
 80027b2:	05db      	lsls	r3, r3, #23
 80027b4:	4605      	mov	r5, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	4616      	mov	r6, r2
 80027ba:	d505      	bpl.n	80027c8 <__swrite+0x1e>
 80027bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027c0:	2302      	movs	r3, #2
 80027c2:	2200      	movs	r2, #0
 80027c4:	f000 f898 	bl	80028f8 <_lseek_r>
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027d2:	81a3      	strh	r3, [r4, #12]
 80027d4:	4632      	mov	r2, r6
 80027d6:	463b      	mov	r3, r7
 80027d8:	4628      	mov	r0, r5
 80027da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027de:	f000 b8af 	b.w	8002940 <_write_r>

080027e2 <__sseek>:
 80027e2:	b510      	push	{r4, lr}
 80027e4:	460c      	mov	r4, r1
 80027e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ea:	f000 f885 	bl	80028f8 <_lseek_r>
 80027ee:	1c43      	adds	r3, r0, #1
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	bf15      	itete	ne
 80027f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80027f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80027fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80027fe:	81a3      	strheq	r3, [r4, #12]
 8002800:	bf18      	it	ne
 8002802:	81a3      	strhne	r3, [r4, #12]
 8002804:	bd10      	pop	{r4, pc}

08002806 <__sclose>:
 8002806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800280a:	f000 b865 	b.w	80028d8 <_close_r>

0800280e <memset>:
 800280e:	4402      	add	r2, r0
 8002810:	4603      	mov	r3, r0
 8002812:	4293      	cmp	r3, r2
 8002814:	d100      	bne.n	8002818 <memset+0xa>
 8002816:	4770      	bx	lr
 8002818:	f803 1b01 	strb.w	r1, [r3], #1
 800281c:	e7f9      	b.n	8002812 <memset+0x4>
	...

08002820 <strtok>:
 8002820:	4b16      	ldr	r3, [pc, #88]	@ (800287c <strtok+0x5c>)
 8002822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002826:	681f      	ldr	r7, [r3, #0]
 8002828:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800282a:	4605      	mov	r5, r0
 800282c:	460e      	mov	r6, r1
 800282e:	b9ec      	cbnz	r4, 800286c <strtok+0x4c>
 8002830:	2050      	movs	r0, #80	@ 0x50
 8002832:	f000 f935 	bl	8002aa0 <malloc>
 8002836:	4602      	mov	r2, r0
 8002838:	6478      	str	r0, [r7, #68]	@ 0x44
 800283a:	b920      	cbnz	r0, 8002846 <strtok+0x26>
 800283c:	4b10      	ldr	r3, [pc, #64]	@ (8002880 <strtok+0x60>)
 800283e:	4811      	ldr	r0, [pc, #68]	@ (8002884 <strtok+0x64>)
 8002840:	215b      	movs	r1, #91	@ 0x5b
 8002842:	f000 f8c5 	bl	80029d0 <__assert_func>
 8002846:	e9c0 4400 	strd	r4, r4, [r0]
 800284a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800284e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002852:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8002856:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800285a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800285e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8002862:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8002866:	6184      	str	r4, [r0, #24]
 8002868:	7704      	strb	r4, [r0, #28]
 800286a:	6244      	str	r4, [r0, #36]	@ 0x24
 800286c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800286e:	4631      	mov	r1, r6
 8002870:	4628      	mov	r0, r5
 8002872:	2301      	movs	r3, #1
 8002874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002878:	f000 b806 	b.w	8002888 <__strtok_r>
 800287c:	20000018 	.word	0x20000018
 8002880:	08006b94 	.word	0x08006b94
 8002884:	08006bab 	.word	0x08006bab

08002888 <__strtok_r>:
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	4604      	mov	r4, r0
 800288c:	b908      	cbnz	r0, 8002892 <__strtok_r+0xa>
 800288e:	6814      	ldr	r4, [r2, #0]
 8002890:	b144      	cbz	r4, 80028a4 <__strtok_r+0x1c>
 8002892:	4620      	mov	r0, r4
 8002894:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002898:	460f      	mov	r7, r1
 800289a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800289e:	b91e      	cbnz	r6, 80028a8 <__strtok_r+0x20>
 80028a0:	b965      	cbnz	r5, 80028bc <__strtok_r+0x34>
 80028a2:	6015      	str	r5, [r2, #0]
 80028a4:	2000      	movs	r0, #0
 80028a6:	e005      	b.n	80028b4 <__strtok_r+0x2c>
 80028a8:	42b5      	cmp	r5, r6
 80028aa:	d1f6      	bne.n	800289a <__strtok_r+0x12>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <__strtok_r+0xa>
 80028b0:	6014      	str	r4, [r2, #0]
 80028b2:	7003      	strb	r3, [r0, #0]
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b6:	461c      	mov	r4, r3
 80028b8:	e00c      	b.n	80028d4 <__strtok_r+0x4c>
 80028ba:	b915      	cbnz	r5, 80028c2 <__strtok_r+0x3a>
 80028bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80028c0:	460e      	mov	r6, r1
 80028c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80028c6:	42ab      	cmp	r3, r5
 80028c8:	d1f7      	bne.n	80028ba <__strtok_r+0x32>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f3      	beq.n	80028b6 <__strtok_r+0x2e>
 80028ce:	2300      	movs	r3, #0
 80028d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80028d4:	6014      	str	r4, [r2, #0]
 80028d6:	e7ed      	b.n	80028b4 <__strtok_r+0x2c>

080028d8 <_close_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	4d06      	ldr	r5, [pc, #24]	@ (80028f4 <_close_r+0x1c>)
 80028dc:	2300      	movs	r3, #0
 80028de:	4604      	mov	r4, r0
 80028e0:	4608      	mov	r0, r1
 80028e2:	602b      	str	r3, [r5, #0]
 80028e4:	f7fe ffff 	bl	80018e6 <_close>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	d102      	bne.n	80028f2 <_close_r+0x1a>
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	b103      	cbz	r3, 80028f2 <_close_r+0x1a>
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	200001e8 	.word	0x200001e8

080028f8 <_lseek_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4d07      	ldr	r5, [pc, #28]	@ (8002918 <_lseek_r+0x20>)
 80028fc:	4604      	mov	r4, r0
 80028fe:	4608      	mov	r0, r1
 8002900:	4611      	mov	r1, r2
 8002902:	2200      	movs	r2, #0
 8002904:	602a      	str	r2, [r5, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	f7ff f814 	bl	8001934 <_lseek>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d102      	bne.n	8002916 <_lseek_r+0x1e>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b103      	cbz	r3, 8002916 <_lseek_r+0x1e>
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	bd38      	pop	{r3, r4, r5, pc}
 8002918:	200001e8 	.word	0x200001e8

0800291c <_read_r>:
 800291c:	b538      	push	{r3, r4, r5, lr}
 800291e:	4d07      	ldr	r5, [pc, #28]	@ (800293c <_read_r+0x20>)
 8002920:	4604      	mov	r4, r0
 8002922:	4608      	mov	r0, r1
 8002924:	4611      	mov	r1, r2
 8002926:	2200      	movs	r2, #0
 8002928:	602a      	str	r2, [r5, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	f7fe ffa2 	bl	8001874 <_read>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d102      	bne.n	800293a <_read_r+0x1e>
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	b103      	cbz	r3, 800293a <_read_r+0x1e>
 8002938:	6023      	str	r3, [r4, #0]
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	200001e8 	.word	0x200001e8

08002940 <_write_r>:
 8002940:	b538      	push	{r3, r4, r5, lr}
 8002942:	4d07      	ldr	r5, [pc, #28]	@ (8002960 <_write_r+0x20>)
 8002944:	4604      	mov	r4, r0
 8002946:	4608      	mov	r0, r1
 8002948:	4611      	mov	r1, r2
 800294a:	2200      	movs	r2, #0
 800294c:	602a      	str	r2, [r5, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	f7fe ffad 	bl	80018ae <_write>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d102      	bne.n	800295e <_write_r+0x1e>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	b103      	cbz	r3, 800295e <_write_r+0x1e>
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	bd38      	pop	{r3, r4, r5, pc}
 8002960:	200001e8 	.word	0x200001e8

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	@ (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000018 	.word	0x20000018

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4d0d      	ldr	r5, [pc, #52]	@ (80029a8 <__libc_init_array+0x38>)
 8002974:	4c0d      	ldr	r4, [pc, #52]	@ (80029ac <__libc_init_array+0x3c>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	2600      	movs	r6, #0
 800297c:	42a6      	cmp	r6, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	4d0b      	ldr	r5, [pc, #44]	@ (80029b0 <__libc_init_array+0x40>)
 8002982:	4c0c      	ldr	r4, [pc, #48]	@ (80029b4 <__libc_init_array+0x44>)
 8002984:	f000 fe44 	bl	8003610 <_init>
 8002988:	1b64      	subs	r4, r4, r5
 800298a:	10a4      	asrs	r4, r4, #2
 800298c:	2600      	movs	r6, #0
 800298e:	42a6      	cmp	r6, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	f855 3b04 	ldr.w	r3, [r5], #4
 8002998:	4798      	blx	r3
 800299a:	3601      	adds	r6, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a2:	4798      	blx	r3
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	08006c7c 	.word	0x08006c7c
 80029ac:	08006c7c 	.word	0x08006c7c
 80029b0:	08006c7c 	.word	0x08006c7c
 80029b4:	08006c80 	.word	0x08006c80

080029b8 <__retarget_lock_init_recursive>:
 80029b8:	4770      	bx	lr

080029ba <__retarget_lock_acquire_recursive>:
 80029ba:	4770      	bx	lr

080029bc <__retarget_lock_release_recursive>:
 80029bc:	4770      	bx	lr

080029be <strcpy>:
 80029be:	4603      	mov	r3, r0
 80029c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029c4:	f803 2b01 	strb.w	r2, [r3], #1
 80029c8:	2a00      	cmp	r2, #0
 80029ca:	d1f9      	bne.n	80029c0 <strcpy+0x2>
 80029cc:	4770      	bx	lr
	...

080029d0 <__assert_func>:
 80029d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80029d2:	4614      	mov	r4, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <__assert_func+0x2c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4605      	mov	r5, r0
 80029dc:	68d8      	ldr	r0, [r3, #12]
 80029de:	b954      	cbnz	r4, 80029f6 <__assert_func+0x26>
 80029e0:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <__assert_func+0x30>)
 80029e2:	461c      	mov	r4, r3
 80029e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80029e8:	9100      	str	r1, [sp, #0]
 80029ea:	462b      	mov	r3, r5
 80029ec:	4905      	ldr	r1, [pc, #20]	@ (8002a04 <__assert_func+0x34>)
 80029ee:	f000 fc89 	bl	8003304 <fiprintf>
 80029f2:	f000 fd3d 	bl	8003470 <abort>
 80029f6:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <__assert_func+0x38>)
 80029f8:	e7f4      	b.n	80029e4 <__assert_func+0x14>
 80029fa:	bf00      	nop
 80029fc:	20000018 	.word	0x20000018
 8002a00:	08006c40 	.word	0x08006c40
 8002a04:	08006c12 	.word	0x08006c12
 8002a08:	08006c05 	.word	0x08006c05

08002a0c <_free_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4605      	mov	r5, r0
 8002a10:	2900      	cmp	r1, #0
 8002a12:	d041      	beq.n	8002a98 <_free_r+0x8c>
 8002a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a18:	1f0c      	subs	r4, r1, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bfb8      	it	lt
 8002a1e:	18e4      	addlt	r4, r4, r3
 8002a20:	f000 f8e8 	bl	8002bf4 <__malloc_lock>
 8002a24:	4a1d      	ldr	r2, [pc, #116]	@ (8002a9c <_free_r+0x90>)
 8002a26:	6813      	ldr	r3, [r2, #0]
 8002a28:	b933      	cbnz	r3, 8002a38 <_free_r+0x2c>
 8002a2a:	6063      	str	r3, [r4, #4]
 8002a2c:	6014      	str	r4, [r2, #0]
 8002a2e:	4628      	mov	r0, r5
 8002a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a34:	f000 b8e4 	b.w	8002c00 <__malloc_unlock>
 8002a38:	42a3      	cmp	r3, r4
 8002a3a:	d908      	bls.n	8002a4e <_free_r+0x42>
 8002a3c:	6820      	ldr	r0, [r4, #0]
 8002a3e:	1821      	adds	r1, r4, r0
 8002a40:	428b      	cmp	r3, r1
 8002a42:	bf01      	itttt	eq
 8002a44:	6819      	ldreq	r1, [r3, #0]
 8002a46:	685b      	ldreq	r3, [r3, #4]
 8002a48:	1809      	addeq	r1, r1, r0
 8002a4a:	6021      	streq	r1, [r4, #0]
 8002a4c:	e7ed      	b.n	8002a2a <_free_r+0x1e>
 8002a4e:	461a      	mov	r2, r3
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	b10b      	cbz	r3, 8002a58 <_free_r+0x4c>
 8002a54:	42a3      	cmp	r3, r4
 8002a56:	d9fa      	bls.n	8002a4e <_free_r+0x42>
 8002a58:	6811      	ldr	r1, [r2, #0]
 8002a5a:	1850      	adds	r0, r2, r1
 8002a5c:	42a0      	cmp	r0, r4
 8002a5e:	d10b      	bne.n	8002a78 <_free_r+0x6c>
 8002a60:	6820      	ldr	r0, [r4, #0]
 8002a62:	4401      	add	r1, r0
 8002a64:	1850      	adds	r0, r2, r1
 8002a66:	4283      	cmp	r3, r0
 8002a68:	6011      	str	r1, [r2, #0]
 8002a6a:	d1e0      	bne.n	8002a2e <_free_r+0x22>
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	6053      	str	r3, [r2, #4]
 8002a72:	4408      	add	r0, r1
 8002a74:	6010      	str	r0, [r2, #0]
 8002a76:	e7da      	b.n	8002a2e <_free_r+0x22>
 8002a78:	d902      	bls.n	8002a80 <_free_r+0x74>
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	602b      	str	r3, [r5, #0]
 8002a7e:	e7d6      	b.n	8002a2e <_free_r+0x22>
 8002a80:	6820      	ldr	r0, [r4, #0]
 8002a82:	1821      	adds	r1, r4, r0
 8002a84:	428b      	cmp	r3, r1
 8002a86:	bf04      	itt	eq
 8002a88:	6819      	ldreq	r1, [r3, #0]
 8002a8a:	685b      	ldreq	r3, [r3, #4]
 8002a8c:	6063      	str	r3, [r4, #4]
 8002a8e:	bf04      	itt	eq
 8002a90:	1809      	addeq	r1, r1, r0
 8002a92:	6021      	streq	r1, [r4, #0]
 8002a94:	6054      	str	r4, [r2, #4]
 8002a96:	e7ca      	b.n	8002a2e <_free_r+0x22>
 8002a98:	bd38      	pop	{r3, r4, r5, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200001f4 	.word	0x200001f4

08002aa0 <malloc>:
 8002aa0:	4b02      	ldr	r3, [pc, #8]	@ (8002aac <malloc+0xc>)
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	f000 b825 	b.w	8002af4 <_malloc_r>
 8002aaa:	bf00      	nop
 8002aac:	20000018 	.word	0x20000018

08002ab0 <sbrk_aligned>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8002af0 <sbrk_aligned+0x40>)
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	6831      	ldr	r1, [r6, #0]
 8002ab8:	4605      	mov	r5, r0
 8002aba:	b911      	cbnz	r1, 8002ac2 <sbrk_aligned+0x12>
 8002abc:	f000 fcc8 	bl	8003450 <_sbrk_r>
 8002ac0:	6030      	str	r0, [r6, #0]
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f000 fcc3 	bl	8003450 <_sbrk_r>
 8002aca:	1c43      	adds	r3, r0, #1
 8002acc:	d103      	bne.n	8002ad6 <sbrk_aligned+0x26>
 8002ace:	f04f 34ff 	mov.w	r4, #4294967295
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
 8002ad6:	1cc4      	adds	r4, r0, #3
 8002ad8:	f024 0403 	bic.w	r4, r4, #3
 8002adc:	42a0      	cmp	r0, r4
 8002ade:	d0f8      	beq.n	8002ad2 <sbrk_aligned+0x22>
 8002ae0:	1a21      	subs	r1, r4, r0
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f000 fcb4 	bl	8003450 <_sbrk_r>
 8002ae8:	3001      	adds	r0, #1
 8002aea:	d1f2      	bne.n	8002ad2 <sbrk_aligned+0x22>
 8002aec:	e7ef      	b.n	8002ace <sbrk_aligned+0x1e>
 8002aee:	bf00      	nop
 8002af0:	200001f0 	.word	0x200001f0

08002af4 <_malloc_r>:
 8002af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002af8:	1ccd      	adds	r5, r1, #3
 8002afa:	f025 0503 	bic.w	r5, r5, #3
 8002afe:	3508      	adds	r5, #8
 8002b00:	2d0c      	cmp	r5, #12
 8002b02:	bf38      	it	cc
 8002b04:	250c      	movcc	r5, #12
 8002b06:	2d00      	cmp	r5, #0
 8002b08:	4606      	mov	r6, r0
 8002b0a:	db01      	blt.n	8002b10 <_malloc_r+0x1c>
 8002b0c:	42a9      	cmp	r1, r5
 8002b0e:	d904      	bls.n	8002b1a <_malloc_r+0x26>
 8002b10:	230c      	movs	r3, #12
 8002b12:	6033      	str	r3, [r6, #0]
 8002b14:	2000      	movs	r0, #0
 8002b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bf0 <_malloc_r+0xfc>
 8002b1e:	f000 f869 	bl	8002bf4 <__malloc_lock>
 8002b22:	f8d8 3000 	ldr.w	r3, [r8]
 8002b26:	461c      	mov	r4, r3
 8002b28:	bb44      	cbnz	r4, 8002b7c <_malloc_r+0x88>
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	f7ff ffbf 	bl	8002ab0 <sbrk_aligned>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	4604      	mov	r4, r0
 8002b36:	d158      	bne.n	8002bea <_malloc_r+0xf6>
 8002b38:	f8d8 4000 	ldr.w	r4, [r8]
 8002b3c:	4627      	mov	r7, r4
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d143      	bne.n	8002bca <_malloc_r+0xd6>
 8002b42:	2c00      	cmp	r4, #0
 8002b44:	d04b      	beq.n	8002bde <_malloc_r+0xea>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	4639      	mov	r1, r7
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	eb04 0903 	add.w	r9, r4, r3
 8002b50:	f000 fc7e 	bl	8003450 <_sbrk_r>
 8002b54:	4581      	cmp	r9, r0
 8002b56:	d142      	bne.n	8002bde <_malloc_r+0xea>
 8002b58:	6821      	ldr	r1, [r4, #0]
 8002b5a:	1a6d      	subs	r5, r5, r1
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	4630      	mov	r0, r6
 8002b60:	f7ff ffa6 	bl	8002ab0 <sbrk_aligned>
 8002b64:	3001      	adds	r0, #1
 8002b66:	d03a      	beq.n	8002bde <_malloc_r+0xea>
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	442b      	add	r3, r5
 8002b6c:	6023      	str	r3, [r4, #0]
 8002b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	bb62      	cbnz	r2, 8002bd0 <_malloc_r+0xdc>
 8002b76:	f8c8 7000 	str.w	r7, [r8]
 8002b7a:	e00f      	b.n	8002b9c <_malloc_r+0xa8>
 8002b7c:	6822      	ldr	r2, [r4, #0]
 8002b7e:	1b52      	subs	r2, r2, r5
 8002b80:	d420      	bmi.n	8002bc4 <_malloc_r+0xd0>
 8002b82:	2a0b      	cmp	r2, #11
 8002b84:	d917      	bls.n	8002bb6 <_malloc_r+0xc2>
 8002b86:	1961      	adds	r1, r4, r5
 8002b88:	42a3      	cmp	r3, r4
 8002b8a:	6025      	str	r5, [r4, #0]
 8002b8c:	bf18      	it	ne
 8002b8e:	6059      	strne	r1, [r3, #4]
 8002b90:	6863      	ldr	r3, [r4, #4]
 8002b92:	bf08      	it	eq
 8002b94:	f8c8 1000 	streq.w	r1, [r8]
 8002b98:	5162      	str	r2, [r4, r5]
 8002b9a:	604b      	str	r3, [r1, #4]
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f000 f82f 	bl	8002c00 <__malloc_unlock>
 8002ba2:	f104 000b 	add.w	r0, r4, #11
 8002ba6:	1d23      	adds	r3, r4, #4
 8002ba8:	f020 0007 	bic.w	r0, r0, #7
 8002bac:	1ac2      	subs	r2, r0, r3
 8002bae:	bf1c      	itt	ne
 8002bb0:	1a1b      	subne	r3, r3, r0
 8002bb2:	50a3      	strne	r3, [r4, r2]
 8002bb4:	e7af      	b.n	8002b16 <_malloc_r+0x22>
 8002bb6:	6862      	ldr	r2, [r4, #4]
 8002bb8:	42a3      	cmp	r3, r4
 8002bba:	bf0c      	ite	eq
 8002bbc:	f8c8 2000 	streq.w	r2, [r8]
 8002bc0:	605a      	strne	r2, [r3, #4]
 8002bc2:	e7eb      	b.n	8002b9c <_malloc_r+0xa8>
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	6864      	ldr	r4, [r4, #4]
 8002bc8:	e7ae      	b.n	8002b28 <_malloc_r+0x34>
 8002bca:	463c      	mov	r4, r7
 8002bcc:	687f      	ldr	r7, [r7, #4]
 8002bce:	e7b6      	b.n	8002b3e <_malloc_r+0x4a>
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	d1fb      	bne.n	8002bd0 <_malloc_r+0xdc>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	6053      	str	r3, [r2, #4]
 8002bdc:	e7de      	b.n	8002b9c <_malloc_r+0xa8>
 8002bde:	230c      	movs	r3, #12
 8002be0:	6033      	str	r3, [r6, #0]
 8002be2:	4630      	mov	r0, r6
 8002be4:	f000 f80c 	bl	8002c00 <__malloc_unlock>
 8002be8:	e794      	b.n	8002b14 <_malloc_r+0x20>
 8002bea:	6005      	str	r5, [r0, #0]
 8002bec:	e7d6      	b.n	8002b9c <_malloc_r+0xa8>
 8002bee:	bf00      	nop
 8002bf0:	200001f4 	.word	0x200001f4

08002bf4 <__malloc_lock>:
 8002bf4:	4801      	ldr	r0, [pc, #4]	@ (8002bfc <__malloc_lock+0x8>)
 8002bf6:	f7ff bee0 	b.w	80029ba <__retarget_lock_acquire_recursive>
 8002bfa:	bf00      	nop
 8002bfc:	200001ec 	.word	0x200001ec

08002c00 <__malloc_unlock>:
 8002c00:	4801      	ldr	r0, [pc, #4]	@ (8002c08 <__malloc_unlock+0x8>)
 8002c02:	f7ff bedb 	b.w	80029bc <__retarget_lock_release_recursive>
 8002c06:	bf00      	nop
 8002c08:	200001ec 	.word	0x200001ec

08002c0c <__sfputc_r>:
 8002c0c:	6893      	ldr	r3, [r2, #8]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	b410      	push	{r4}
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	da08      	bge.n	8002c2a <__sfputc_r+0x1e>
 8002c18:	6994      	ldr	r4, [r2, #24]
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	db01      	blt.n	8002c22 <__sfputc_r+0x16>
 8002c1e:	290a      	cmp	r1, #10
 8002c20:	d103      	bne.n	8002c2a <__sfputc_r+0x1e>
 8002c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c26:	f000 bb7f 	b.w	8003328 <__swbuf_r>
 8002c2a:	6813      	ldr	r3, [r2, #0]
 8002c2c:	1c58      	adds	r0, r3, #1
 8002c2e:	6010      	str	r0, [r2, #0]
 8002c30:	7019      	strb	r1, [r3, #0]
 8002c32:	4608      	mov	r0, r1
 8002c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <__sfputs_r>:
 8002c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	460f      	mov	r7, r1
 8002c40:	4614      	mov	r4, r2
 8002c42:	18d5      	adds	r5, r2, r3
 8002c44:	42ac      	cmp	r4, r5
 8002c46:	d101      	bne.n	8002c4c <__sfputs_r+0x12>
 8002c48:	2000      	movs	r0, #0
 8002c4a:	e007      	b.n	8002c5c <__sfputs_r+0x22>
 8002c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c50:	463a      	mov	r2, r7
 8002c52:	4630      	mov	r0, r6
 8002c54:	f7ff ffda 	bl	8002c0c <__sfputc_r>
 8002c58:	1c43      	adds	r3, r0, #1
 8002c5a:	d1f3      	bne.n	8002c44 <__sfputs_r+0xa>
 8002c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c60 <_vfiprintf_r>:
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	460d      	mov	r5, r1
 8002c66:	b09d      	sub	sp, #116	@ 0x74
 8002c68:	4614      	mov	r4, r2
 8002c6a:	4698      	mov	r8, r3
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	b118      	cbz	r0, 8002c78 <_vfiprintf_r+0x18>
 8002c70:	6a03      	ldr	r3, [r0, #32]
 8002c72:	b90b      	cbnz	r3, 8002c78 <_vfiprintf_r+0x18>
 8002c74:	f7ff fd40 	bl	80026f8 <__sinit>
 8002c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c7a:	07d9      	lsls	r1, r3, #31
 8002c7c:	d405      	bmi.n	8002c8a <_vfiprintf_r+0x2a>
 8002c7e:	89ab      	ldrh	r3, [r5, #12]
 8002c80:	059a      	lsls	r2, r3, #22
 8002c82:	d402      	bmi.n	8002c8a <_vfiprintf_r+0x2a>
 8002c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c86:	f7ff fe98 	bl	80029ba <__retarget_lock_acquire_recursive>
 8002c8a:	89ab      	ldrh	r3, [r5, #12]
 8002c8c:	071b      	lsls	r3, r3, #28
 8002c8e:	d501      	bpl.n	8002c94 <_vfiprintf_r+0x34>
 8002c90:	692b      	ldr	r3, [r5, #16]
 8002c92:	b99b      	cbnz	r3, 8002cbc <_vfiprintf_r+0x5c>
 8002c94:	4629      	mov	r1, r5
 8002c96:	4630      	mov	r0, r6
 8002c98:	f000 fb84 	bl	80033a4 <__swsetup_r>
 8002c9c:	b170      	cbz	r0, 8002cbc <_vfiprintf_r+0x5c>
 8002c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ca0:	07dc      	lsls	r4, r3, #31
 8002ca2:	d504      	bpl.n	8002cae <_vfiprintf_r+0x4e>
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	b01d      	add	sp, #116	@ 0x74
 8002caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cae:	89ab      	ldrh	r3, [r5, #12]
 8002cb0:	0598      	lsls	r0, r3, #22
 8002cb2:	d4f7      	bmi.n	8002ca4 <_vfiprintf_r+0x44>
 8002cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cb6:	f7ff fe81 	bl	80029bc <__retarget_lock_release_recursive>
 8002cba:	e7f3      	b.n	8002ca4 <_vfiprintf_r+0x44>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cca:	2330      	movs	r3, #48	@ 0x30
 8002ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e7c <_vfiprintf_r+0x21c>
 8002cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cd4:	f04f 0901 	mov.w	r9, #1
 8002cd8:	4623      	mov	r3, r4
 8002cda:	469a      	mov	sl, r3
 8002cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ce0:	b10a      	cbz	r2, 8002ce6 <_vfiprintf_r+0x86>
 8002ce2:	2a25      	cmp	r2, #37	@ 0x25
 8002ce4:	d1f9      	bne.n	8002cda <_vfiprintf_r+0x7a>
 8002ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cea:	d00b      	beq.n	8002d04 <_vfiprintf_r+0xa4>
 8002cec:	465b      	mov	r3, fp
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f7ff ffa1 	bl	8002c3a <__sfputs_r>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	f000 80a7 	beq.w	8002e4c <_vfiprintf_r+0x1ec>
 8002cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d00:	445a      	add	r2, fp
 8002d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d04:	f89a 3000 	ldrb.w	r3, [sl]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 809f 	beq.w	8002e4c <_vfiprintf_r+0x1ec>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d18:	f10a 0a01 	add.w	sl, sl, #1
 8002d1c:	9304      	str	r3, [sp, #16]
 8002d1e:	9307      	str	r3, [sp, #28]
 8002d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d26:	4654      	mov	r4, sl
 8002d28:	2205      	movs	r2, #5
 8002d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d2e:	4853      	ldr	r0, [pc, #332]	@ (8002e7c <_vfiprintf_r+0x21c>)
 8002d30:	f7fd fa56 	bl	80001e0 <memchr>
 8002d34:	9a04      	ldr	r2, [sp, #16]
 8002d36:	b9d8      	cbnz	r0, 8002d70 <_vfiprintf_r+0x110>
 8002d38:	06d1      	lsls	r1, r2, #27
 8002d3a:	bf44      	itt	mi
 8002d3c:	2320      	movmi	r3, #32
 8002d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d42:	0713      	lsls	r3, r2, #28
 8002d44:	bf44      	itt	mi
 8002d46:	232b      	movmi	r3, #43	@ 0x2b
 8002d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d52:	d015      	beq.n	8002d80 <_vfiprintf_r+0x120>
 8002d54:	9a07      	ldr	r2, [sp, #28]
 8002d56:	4654      	mov	r4, sl
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f04f 0c0a 	mov.w	ip, #10
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d64:	3b30      	subs	r3, #48	@ 0x30
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	d94b      	bls.n	8002e02 <_vfiprintf_r+0x1a2>
 8002d6a:	b1b0      	cbz	r0, 8002d9a <_vfiprintf_r+0x13a>
 8002d6c:	9207      	str	r2, [sp, #28]
 8002d6e:	e014      	b.n	8002d9a <_vfiprintf_r+0x13a>
 8002d70:	eba0 0308 	sub.w	r3, r0, r8
 8002d74:	fa09 f303 	lsl.w	r3, r9, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	9304      	str	r3, [sp, #16]
 8002d7c:	46a2      	mov	sl, r4
 8002d7e:	e7d2      	b.n	8002d26 <_vfiprintf_r+0xc6>
 8002d80:	9b03      	ldr	r3, [sp, #12]
 8002d82:	1d19      	adds	r1, r3, #4
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	9103      	str	r1, [sp, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bfbb      	ittet	lt
 8002d8c:	425b      	neglt	r3, r3
 8002d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d92:	9307      	strge	r3, [sp, #28]
 8002d94:	9307      	strlt	r3, [sp, #28]
 8002d96:	bfb8      	it	lt
 8002d98:	9204      	strlt	r2, [sp, #16]
 8002d9a:	7823      	ldrb	r3, [r4, #0]
 8002d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d9e:	d10a      	bne.n	8002db6 <_vfiprintf_r+0x156>
 8002da0:	7863      	ldrb	r3, [r4, #1]
 8002da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002da4:	d132      	bne.n	8002e0c <_vfiprintf_r+0x1ac>
 8002da6:	9b03      	ldr	r3, [sp, #12]
 8002da8:	1d1a      	adds	r2, r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	9203      	str	r2, [sp, #12]
 8002dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002db2:	3402      	adds	r4, #2
 8002db4:	9305      	str	r3, [sp, #20]
 8002db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002e8c <_vfiprintf_r+0x22c>
 8002dba:	7821      	ldrb	r1, [r4, #0]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	4650      	mov	r0, sl
 8002dc0:	f7fd fa0e 	bl	80001e0 <memchr>
 8002dc4:	b138      	cbz	r0, 8002dd6 <_vfiprintf_r+0x176>
 8002dc6:	9b04      	ldr	r3, [sp, #16]
 8002dc8:	eba0 000a 	sub.w	r0, r0, sl
 8002dcc:	2240      	movs	r2, #64	@ 0x40
 8002dce:	4082      	lsls	r2, r0
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	3401      	adds	r4, #1
 8002dd4:	9304      	str	r3, [sp, #16]
 8002dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dda:	4829      	ldr	r0, [pc, #164]	@ (8002e80 <_vfiprintf_r+0x220>)
 8002ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002de0:	2206      	movs	r2, #6
 8002de2:	f7fd f9fd 	bl	80001e0 <memchr>
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d03f      	beq.n	8002e6a <_vfiprintf_r+0x20a>
 8002dea:	4b26      	ldr	r3, [pc, #152]	@ (8002e84 <_vfiprintf_r+0x224>)
 8002dec:	bb1b      	cbnz	r3, 8002e36 <_vfiprintf_r+0x1d6>
 8002dee:	9b03      	ldr	r3, [sp, #12]
 8002df0:	3307      	adds	r3, #7
 8002df2:	f023 0307 	bic.w	r3, r3, #7
 8002df6:	3308      	adds	r3, #8
 8002df8:	9303      	str	r3, [sp, #12]
 8002dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dfc:	443b      	add	r3, r7
 8002dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e00:	e76a      	b.n	8002cd8 <_vfiprintf_r+0x78>
 8002e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e06:	460c      	mov	r4, r1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	e7a8      	b.n	8002d5e <_vfiprintf_r+0xfe>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	3401      	adds	r4, #1
 8002e10:	9305      	str	r3, [sp, #20]
 8002e12:	4619      	mov	r1, r3
 8002e14:	f04f 0c0a 	mov.w	ip, #10
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e1e:	3a30      	subs	r2, #48	@ 0x30
 8002e20:	2a09      	cmp	r2, #9
 8002e22:	d903      	bls.n	8002e2c <_vfiprintf_r+0x1cc>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0c6      	beq.n	8002db6 <_vfiprintf_r+0x156>
 8002e28:	9105      	str	r1, [sp, #20]
 8002e2a:	e7c4      	b.n	8002db6 <_vfiprintf_r+0x156>
 8002e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e30:	4604      	mov	r4, r0
 8002e32:	2301      	movs	r3, #1
 8002e34:	e7f0      	b.n	8002e18 <_vfiprintf_r+0x1b8>
 8002e36:	ab03      	add	r3, sp, #12
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	462a      	mov	r2, r5
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <_vfiprintf_r+0x228>)
 8002e3e:	a904      	add	r1, sp, #16
 8002e40:	4630      	mov	r0, r6
 8002e42:	f3af 8000 	nop.w
 8002e46:	4607      	mov	r7, r0
 8002e48:	1c78      	adds	r0, r7, #1
 8002e4a:	d1d6      	bne.n	8002dfa <_vfiprintf_r+0x19a>
 8002e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e4e:	07d9      	lsls	r1, r3, #31
 8002e50:	d405      	bmi.n	8002e5e <_vfiprintf_r+0x1fe>
 8002e52:	89ab      	ldrh	r3, [r5, #12]
 8002e54:	059a      	lsls	r2, r3, #22
 8002e56:	d402      	bmi.n	8002e5e <_vfiprintf_r+0x1fe>
 8002e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e5a:	f7ff fdaf 	bl	80029bc <__retarget_lock_release_recursive>
 8002e5e:	89ab      	ldrh	r3, [r5, #12]
 8002e60:	065b      	lsls	r3, r3, #25
 8002e62:	f53f af1f 	bmi.w	8002ca4 <_vfiprintf_r+0x44>
 8002e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e68:	e71e      	b.n	8002ca8 <_vfiprintf_r+0x48>
 8002e6a:	ab03      	add	r3, sp, #12
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	462a      	mov	r2, r5
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <_vfiprintf_r+0x228>)
 8002e72:	a904      	add	r1, sp, #16
 8002e74:	4630      	mov	r0, r6
 8002e76:	f000 f879 	bl	8002f6c <_printf_i>
 8002e7a:	e7e4      	b.n	8002e46 <_vfiprintf_r+0x1e6>
 8002e7c:	08006c41 	.word	0x08006c41
 8002e80:	08006c4b 	.word	0x08006c4b
 8002e84:	00000000 	.word	0x00000000
 8002e88:	08002c3b 	.word	0x08002c3b
 8002e8c:	08006c47 	.word	0x08006c47

08002e90 <_printf_common>:
 8002e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e94:	4616      	mov	r6, r2
 8002e96:	4698      	mov	r8, r3
 8002e98:	688a      	ldr	r2, [r1, #8]
 8002e9a:	690b      	ldr	r3, [r1, #16]
 8002e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bfb8      	it	lt
 8002ea4:	4613      	movlt	r3, r2
 8002ea6:	6033      	str	r3, [r6, #0]
 8002ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002eac:	4607      	mov	r7, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	b10a      	cbz	r2, 8002eb6 <_printf_common+0x26>
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	6033      	str	r3, [r6, #0]
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	0699      	lsls	r1, r3, #26
 8002eba:	bf42      	ittt	mi
 8002ebc:	6833      	ldrmi	r3, [r6, #0]
 8002ebe:	3302      	addmi	r3, #2
 8002ec0:	6033      	strmi	r3, [r6, #0]
 8002ec2:	6825      	ldr	r5, [r4, #0]
 8002ec4:	f015 0506 	ands.w	r5, r5, #6
 8002ec8:	d106      	bne.n	8002ed8 <_printf_common+0x48>
 8002eca:	f104 0a19 	add.w	sl, r4, #25
 8002ece:	68e3      	ldr	r3, [r4, #12]
 8002ed0:	6832      	ldr	r2, [r6, #0]
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	42ab      	cmp	r3, r5
 8002ed6:	dc26      	bgt.n	8002f26 <_printf_common+0x96>
 8002ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	3b00      	subs	r3, #0
 8002ee0:	bf18      	it	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	0692      	lsls	r2, r2, #26
 8002ee6:	d42b      	bmi.n	8002f40 <_printf_common+0xb0>
 8002ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002eec:	4641      	mov	r1, r8
 8002eee:	4638      	mov	r0, r7
 8002ef0:	47c8      	blx	r9
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d01e      	beq.n	8002f34 <_printf_common+0xa4>
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	6922      	ldr	r2, [r4, #16]
 8002efa:	f003 0306 	and.w	r3, r3, #6
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf02      	ittt	eq
 8002f02:	68e5      	ldreq	r5, [r4, #12]
 8002f04:	6833      	ldreq	r3, [r6, #0]
 8002f06:	1aed      	subeq	r5, r5, r3
 8002f08:	68a3      	ldr	r3, [r4, #8]
 8002f0a:	bf0c      	ite	eq
 8002f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f10:	2500      	movne	r5, #0
 8002f12:	4293      	cmp	r3, r2
 8002f14:	bfc4      	itt	gt
 8002f16:	1a9b      	subgt	r3, r3, r2
 8002f18:	18ed      	addgt	r5, r5, r3
 8002f1a:	2600      	movs	r6, #0
 8002f1c:	341a      	adds	r4, #26
 8002f1e:	42b5      	cmp	r5, r6
 8002f20:	d11a      	bne.n	8002f58 <_printf_common+0xc8>
 8002f22:	2000      	movs	r0, #0
 8002f24:	e008      	b.n	8002f38 <_printf_common+0xa8>
 8002f26:	2301      	movs	r3, #1
 8002f28:	4652      	mov	r2, sl
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	47c8      	blx	r9
 8002f30:	3001      	adds	r0, #1
 8002f32:	d103      	bne.n	8002f3c <_printf_common+0xac>
 8002f34:	f04f 30ff 	mov.w	r0, #4294967295
 8002f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f3c:	3501      	adds	r5, #1
 8002f3e:	e7c6      	b.n	8002ece <_printf_common+0x3e>
 8002f40:	18e1      	adds	r1, r4, r3
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	2030      	movs	r0, #48	@ 0x30
 8002f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f4a:	4422      	add	r2, r4
 8002f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f54:	3302      	adds	r3, #2
 8002f56:	e7c7      	b.n	8002ee8 <_printf_common+0x58>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	4638      	mov	r0, r7
 8002f60:	47c8      	blx	r9
 8002f62:	3001      	adds	r0, #1
 8002f64:	d0e6      	beq.n	8002f34 <_printf_common+0xa4>
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7d9      	b.n	8002f1e <_printf_common+0x8e>
	...

08002f6c <_printf_i>:
 8002f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	7e0f      	ldrb	r7, [r1, #24]
 8002f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f74:	2f78      	cmp	r7, #120	@ 0x78
 8002f76:	4691      	mov	r9, r2
 8002f78:	4680      	mov	r8, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	469a      	mov	sl, r3
 8002f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f82:	d807      	bhi.n	8002f94 <_printf_i+0x28>
 8002f84:	2f62      	cmp	r7, #98	@ 0x62
 8002f86:	d80a      	bhi.n	8002f9e <_printf_i+0x32>
 8002f88:	2f00      	cmp	r7, #0
 8002f8a:	f000 80d2 	beq.w	8003132 <_printf_i+0x1c6>
 8002f8e:	2f58      	cmp	r7, #88	@ 0x58
 8002f90:	f000 80b9 	beq.w	8003106 <_printf_i+0x19a>
 8002f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f9c:	e03a      	b.n	8003014 <_printf_i+0xa8>
 8002f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fa2:	2b15      	cmp	r3, #21
 8002fa4:	d8f6      	bhi.n	8002f94 <_printf_i+0x28>
 8002fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8002fac <_printf_i+0x40>)
 8002fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fac:	08003005 	.word	0x08003005
 8002fb0:	08003019 	.word	0x08003019
 8002fb4:	08002f95 	.word	0x08002f95
 8002fb8:	08002f95 	.word	0x08002f95
 8002fbc:	08002f95 	.word	0x08002f95
 8002fc0:	08002f95 	.word	0x08002f95
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08002f95 	.word	0x08002f95
 8002fcc:	08002f95 	.word	0x08002f95
 8002fd0:	08002f95 	.word	0x08002f95
 8002fd4:	08002f95 	.word	0x08002f95
 8002fd8:	08003119 	.word	0x08003119
 8002fdc:	08003043 	.word	0x08003043
 8002fe0:	080030d3 	.word	0x080030d3
 8002fe4:	08002f95 	.word	0x08002f95
 8002fe8:	08002f95 	.word	0x08002f95
 8002fec:	0800313b 	.word	0x0800313b
 8002ff0:	08002f95 	.word	0x08002f95
 8002ff4:	08003043 	.word	0x08003043
 8002ff8:	08002f95 	.word	0x08002f95
 8002ffc:	08002f95 	.word	0x08002f95
 8003000:	080030db 	.word	0x080030db
 8003004:	6833      	ldr	r3, [r6, #0]
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6032      	str	r2, [r6, #0]
 800300c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003014:	2301      	movs	r3, #1
 8003016:	e09d      	b.n	8003154 <_printf_i+0x1e8>
 8003018:	6833      	ldr	r3, [r6, #0]
 800301a:	6820      	ldr	r0, [r4, #0]
 800301c:	1d19      	adds	r1, r3, #4
 800301e:	6031      	str	r1, [r6, #0]
 8003020:	0606      	lsls	r6, r0, #24
 8003022:	d501      	bpl.n	8003028 <_printf_i+0xbc>
 8003024:	681d      	ldr	r5, [r3, #0]
 8003026:	e003      	b.n	8003030 <_printf_i+0xc4>
 8003028:	0645      	lsls	r5, r0, #25
 800302a:	d5fb      	bpl.n	8003024 <_printf_i+0xb8>
 800302c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003030:	2d00      	cmp	r5, #0
 8003032:	da03      	bge.n	800303c <_printf_i+0xd0>
 8003034:	232d      	movs	r3, #45	@ 0x2d
 8003036:	426d      	negs	r5, r5
 8003038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800303c:	4859      	ldr	r0, [pc, #356]	@ (80031a4 <_printf_i+0x238>)
 800303e:	230a      	movs	r3, #10
 8003040:	e011      	b.n	8003066 <_printf_i+0xfa>
 8003042:	6821      	ldr	r1, [r4, #0]
 8003044:	6833      	ldr	r3, [r6, #0]
 8003046:	0608      	lsls	r0, r1, #24
 8003048:	f853 5b04 	ldr.w	r5, [r3], #4
 800304c:	d402      	bmi.n	8003054 <_printf_i+0xe8>
 800304e:	0649      	lsls	r1, r1, #25
 8003050:	bf48      	it	mi
 8003052:	b2ad      	uxthmi	r5, r5
 8003054:	2f6f      	cmp	r7, #111	@ 0x6f
 8003056:	4853      	ldr	r0, [pc, #332]	@ (80031a4 <_printf_i+0x238>)
 8003058:	6033      	str	r3, [r6, #0]
 800305a:	bf14      	ite	ne
 800305c:	230a      	movne	r3, #10
 800305e:	2308      	moveq	r3, #8
 8003060:	2100      	movs	r1, #0
 8003062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003066:	6866      	ldr	r6, [r4, #4]
 8003068:	60a6      	str	r6, [r4, #8]
 800306a:	2e00      	cmp	r6, #0
 800306c:	bfa2      	ittt	ge
 800306e:	6821      	ldrge	r1, [r4, #0]
 8003070:	f021 0104 	bicge.w	r1, r1, #4
 8003074:	6021      	strge	r1, [r4, #0]
 8003076:	b90d      	cbnz	r5, 800307c <_printf_i+0x110>
 8003078:	2e00      	cmp	r6, #0
 800307a:	d04b      	beq.n	8003114 <_printf_i+0x1a8>
 800307c:	4616      	mov	r6, r2
 800307e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003082:	fb03 5711 	mls	r7, r3, r1, r5
 8003086:	5dc7      	ldrb	r7, [r0, r7]
 8003088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800308c:	462f      	mov	r7, r5
 800308e:	42bb      	cmp	r3, r7
 8003090:	460d      	mov	r5, r1
 8003092:	d9f4      	bls.n	800307e <_printf_i+0x112>
 8003094:	2b08      	cmp	r3, #8
 8003096:	d10b      	bne.n	80030b0 <_printf_i+0x144>
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	07df      	lsls	r7, r3, #31
 800309c:	d508      	bpl.n	80030b0 <_printf_i+0x144>
 800309e:	6923      	ldr	r3, [r4, #16]
 80030a0:	6861      	ldr	r1, [r4, #4]
 80030a2:	4299      	cmp	r1, r3
 80030a4:	bfde      	ittt	le
 80030a6:	2330      	movle	r3, #48	@ 0x30
 80030a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030b0:	1b92      	subs	r2, r2, r6
 80030b2:	6122      	str	r2, [r4, #16]
 80030b4:	f8cd a000 	str.w	sl, [sp]
 80030b8:	464b      	mov	r3, r9
 80030ba:	aa03      	add	r2, sp, #12
 80030bc:	4621      	mov	r1, r4
 80030be:	4640      	mov	r0, r8
 80030c0:	f7ff fee6 	bl	8002e90 <_printf_common>
 80030c4:	3001      	adds	r0, #1
 80030c6:	d14a      	bne.n	800315e <_printf_i+0x1f2>
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	b004      	add	sp, #16
 80030ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	f043 0320 	orr.w	r3, r3, #32
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	4833      	ldr	r0, [pc, #204]	@ (80031a8 <_printf_i+0x23c>)
 80030dc:	2778      	movs	r7, #120	@ 0x78
 80030de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	6831      	ldr	r1, [r6, #0]
 80030e6:	061f      	lsls	r7, r3, #24
 80030e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80030ec:	d402      	bmi.n	80030f4 <_printf_i+0x188>
 80030ee:	065f      	lsls	r7, r3, #25
 80030f0:	bf48      	it	mi
 80030f2:	b2ad      	uxthmi	r5, r5
 80030f4:	6031      	str	r1, [r6, #0]
 80030f6:	07d9      	lsls	r1, r3, #31
 80030f8:	bf44      	itt	mi
 80030fa:	f043 0320 	orrmi.w	r3, r3, #32
 80030fe:	6023      	strmi	r3, [r4, #0]
 8003100:	b11d      	cbz	r5, 800310a <_printf_i+0x19e>
 8003102:	2310      	movs	r3, #16
 8003104:	e7ac      	b.n	8003060 <_printf_i+0xf4>
 8003106:	4827      	ldr	r0, [pc, #156]	@ (80031a4 <_printf_i+0x238>)
 8003108:	e7e9      	b.n	80030de <_printf_i+0x172>
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	f023 0320 	bic.w	r3, r3, #32
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	e7f6      	b.n	8003102 <_printf_i+0x196>
 8003114:	4616      	mov	r6, r2
 8003116:	e7bd      	b.n	8003094 <_printf_i+0x128>
 8003118:	6833      	ldr	r3, [r6, #0]
 800311a:	6825      	ldr	r5, [r4, #0]
 800311c:	6961      	ldr	r1, [r4, #20]
 800311e:	1d18      	adds	r0, r3, #4
 8003120:	6030      	str	r0, [r6, #0]
 8003122:	062e      	lsls	r6, r5, #24
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	d501      	bpl.n	800312c <_printf_i+0x1c0>
 8003128:	6019      	str	r1, [r3, #0]
 800312a:	e002      	b.n	8003132 <_printf_i+0x1c6>
 800312c:	0668      	lsls	r0, r5, #25
 800312e:	d5fb      	bpl.n	8003128 <_printf_i+0x1bc>
 8003130:	8019      	strh	r1, [r3, #0]
 8003132:	2300      	movs	r3, #0
 8003134:	6123      	str	r3, [r4, #16]
 8003136:	4616      	mov	r6, r2
 8003138:	e7bc      	b.n	80030b4 <_printf_i+0x148>
 800313a:	6833      	ldr	r3, [r6, #0]
 800313c:	1d1a      	adds	r2, r3, #4
 800313e:	6032      	str	r2, [r6, #0]
 8003140:	681e      	ldr	r6, [r3, #0]
 8003142:	6862      	ldr	r2, [r4, #4]
 8003144:	2100      	movs	r1, #0
 8003146:	4630      	mov	r0, r6
 8003148:	f7fd f84a 	bl	80001e0 <memchr>
 800314c:	b108      	cbz	r0, 8003152 <_printf_i+0x1e6>
 800314e:	1b80      	subs	r0, r0, r6
 8003150:	6060      	str	r0, [r4, #4]
 8003152:	6863      	ldr	r3, [r4, #4]
 8003154:	6123      	str	r3, [r4, #16]
 8003156:	2300      	movs	r3, #0
 8003158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800315c:	e7aa      	b.n	80030b4 <_printf_i+0x148>
 800315e:	6923      	ldr	r3, [r4, #16]
 8003160:	4632      	mov	r2, r6
 8003162:	4649      	mov	r1, r9
 8003164:	4640      	mov	r0, r8
 8003166:	47d0      	blx	sl
 8003168:	3001      	adds	r0, #1
 800316a:	d0ad      	beq.n	80030c8 <_printf_i+0x15c>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	079b      	lsls	r3, r3, #30
 8003170:	d413      	bmi.n	800319a <_printf_i+0x22e>
 8003172:	68e0      	ldr	r0, [r4, #12]
 8003174:	9b03      	ldr	r3, [sp, #12]
 8003176:	4298      	cmp	r0, r3
 8003178:	bfb8      	it	lt
 800317a:	4618      	movlt	r0, r3
 800317c:	e7a6      	b.n	80030cc <_printf_i+0x160>
 800317e:	2301      	movs	r3, #1
 8003180:	4632      	mov	r2, r6
 8003182:	4649      	mov	r1, r9
 8003184:	4640      	mov	r0, r8
 8003186:	47d0      	blx	sl
 8003188:	3001      	adds	r0, #1
 800318a:	d09d      	beq.n	80030c8 <_printf_i+0x15c>
 800318c:	3501      	adds	r5, #1
 800318e:	68e3      	ldr	r3, [r4, #12]
 8003190:	9903      	ldr	r1, [sp, #12]
 8003192:	1a5b      	subs	r3, r3, r1
 8003194:	42ab      	cmp	r3, r5
 8003196:	dcf2      	bgt.n	800317e <_printf_i+0x212>
 8003198:	e7eb      	b.n	8003172 <_printf_i+0x206>
 800319a:	2500      	movs	r5, #0
 800319c:	f104 0619 	add.w	r6, r4, #25
 80031a0:	e7f5      	b.n	800318e <_printf_i+0x222>
 80031a2:	bf00      	nop
 80031a4:	08006c52 	.word	0x08006c52
 80031a8:	08006c63 	.word	0x08006c63

080031ac <__sflush_r>:
 80031ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b4:	0716      	lsls	r6, r2, #28
 80031b6:	4605      	mov	r5, r0
 80031b8:	460c      	mov	r4, r1
 80031ba:	d454      	bmi.n	8003266 <__sflush_r+0xba>
 80031bc:	684b      	ldr	r3, [r1, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	dc02      	bgt.n	80031c8 <__sflush_r+0x1c>
 80031c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	dd48      	ble.n	800325a <__sflush_r+0xae>
 80031c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031ca:	2e00      	cmp	r6, #0
 80031cc:	d045      	beq.n	800325a <__sflush_r+0xae>
 80031ce:	2300      	movs	r3, #0
 80031d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031d4:	682f      	ldr	r7, [r5, #0]
 80031d6:	6a21      	ldr	r1, [r4, #32]
 80031d8:	602b      	str	r3, [r5, #0]
 80031da:	d030      	beq.n	800323e <__sflush_r+0x92>
 80031dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	0759      	lsls	r1, r3, #29
 80031e2:	d505      	bpl.n	80031f0 <__sflush_r+0x44>
 80031e4:	6863      	ldr	r3, [r4, #4]
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031ea:	b10b      	cbz	r3, 80031f0 <__sflush_r+0x44>
 80031ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	2300      	movs	r3, #0
 80031f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031f4:	6a21      	ldr	r1, [r4, #32]
 80031f6:	4628      	mov	r0, r5
 80031f8:	47b0      	blx	r6
 80031fa:	1c43      	adds	r3, r0, #1
 80031fc:	89a3      	ldrh	r3, [r4, #12]
 80031fe:	d106      	bne.n	800320e <__sflush_r+0x62>
 8003200:	6829      	ldr	r1, [r5, #0]
 8003202:	291d      	cmp	r1, #29
 8003204:	d82b      	bhi.n	800325e <__sflush_r+0xb2>
 8003206:	4a2a      	ldr	r2, [pc, #168]	@ (80032b0 <__sflush_r+0x104>)
 8003208:	410a      	asrs	r2, r1
 800320a:	07d6      	lsls	r6, r2, #31
 800320c:	d427      	bmi.n	800325e <__sflush_r+0xb2>
 800320e:	2200      	movs	r2, #0
 8003210:	6062      	str	r2, [r4, #4]
 8003212:	04d9      	lsls	r1, r3, #19
 8003214:	6922      	ldr	r2, [r4, #16]
 8003216:	6022      	str	r2, [r4, #0]
 8003218:	d504      	bpl.n	8003224 <__sflush_r+0x78>
 800321a:	1c42      	adds	r2, r0, #1
 800321c:	d101      	bne.n	8003222 <__sflush_r+0x76>
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	b903      	cbnz	r3, 8003224 <__sflush_r+0x78>
 8003222:	6560      	str	r0, [r4, #84]	@ 0x54
 8003224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003226:	602f      	str	r7, [r5, #0]
 8003228:	b1b9      	cbz	r1, 800325a <__sflush_r+0xae>
 800322a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800322e:	4299      	cmp	r1, r3
 8003230:	d002      	beq.n	8003238 <__sflush_r+0x8c>
 8003232:	4628      	mov	r0, r5
 8003234:	f7ff fbea 	bl	8002a0c <_free_r>
 8003238:	2300      	movs	r3, #0
 800323a:	6363      	str	r3, [r4, #52]	@ 0x34
 800323c:	e00d      	b.n	800325a <__sflush_r+0xae>
 800323e:	2301      	movs	r3, #1
 8003240:	4628      	mov	r0, r5
 8003242:	47b0      	blx	r6
 8003244:	4602      	mov	r2, r0
 8003246:	1c50      	adds	r0, r2, #1
 8003248:	d1c9      	bne.n	80031de <__sflush_r+0x32>
 800324a:	682b      	ldr	r3, [r5, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0c6      	beq.n	80031de <__sflush_r+0x32>
 8003250:	2b1d      	cmp	r3, #29
 8003252:	d001      	beq.n	8003258 <__sflush_r+0xac>
 8003254:	2b16      	cmp	r3, #22
 8003256:	d11e      	bne.n	8003296 <__sflush_r+0xea>
 8003258:	602f      	str	r7, [r5, #0]
 800325a:	2000      	movs	r0, #0
 800325c:	e022      	b.n	80032a4 <__sflush_r+0xf8>
 800325e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003262:	b21b      	sxth	r3, r3
 8003264:	e01b      	b.n	800329e <__sflush_r+0xf2>
 8003266:	690f      	ldr	r7, [r1, #16]
 8003268:	2f00      	cmp	r7, #0
 800326a:	d0f6      	beq.n	800325a <__sflush_r+0xae>
 800326c:	0793      	lsls	r3, r2, #30
 800326e:	680e      	ldr	r6, [r1, #0]
 8003270:	bf08      	it	eq
 8003272:	694b      	ldreq	r3, [r1, #20]
 8003274:	600f      	str	r7, [r1, #0]
 8003276:	bf18      	it	ne
 8003278:	2300      	movne	r3, #0
 800327a:	eba6 0807 	sub.w	r8, r6, r7
 800327e:	608b      	str	r3, [r1, #8]
 8003280:	f1b8 0f00 	cmp.w	r8, #0
 8003284:	dde9      	ble.n	800325a <__sflush_r+0xae>
 8003286:	6a21      	ldr	r1, [r4, #32]
 8003288:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800328a:	4643      	mov	r3, r8
 800328c:	463a      	mov	r2, r7
 800328e:	4628      	mov	r0, r5
 8003290:	47b0      	blx	r6
 8003292:	2800      	cmp	r0, #0
 8003294:	dc08      	bgt.n	80032a8 <__sflush_r+0xfc>
 8003296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800329a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800329e:	81a3      	strh	r3, [r4, #12]
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a8:	4407      	add	r7, r0
 80032aa:	eba8 0800 	sub.w	r8, r8, r0
 80032ae:	e7e7      	b.n	8003280 <__sflush_r+0xd4>
 80032b0:	dfbffffe 	.word	0xdfbffffe

080032b4 <_fflush_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	690b      	ldr	r3, [r1, #16]
 80032b8:	4605      	mov	r5, r0
 80032ba:	460c      	mov	r4, r1
 80032bc:	b913      	cbnz	r3, 80032c4 <_fflush_r+0x10>
 80032be:	2500      	movs	r5, #0
 80032c0:	4628      	mov	r0, r5
 80032c2:	bd38      	pop	{r3, r4, r5, pc}
 80032c4:	b118      	cbz	r0, 80032ce <_fflush_r+0x1a>
 80032c6:	6a03      	ldr	r3, [r0, #32]
 80032c8:	b90b      	cbnz	r3, 80032ce <_fflush_r+0x1a>
 80032ca:	f7ff fa15 	bl	80026f8 <__sinit>
 80032ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f3      	beq.n	80032be <_fflush_r+0xa>
 80032d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032d8:	07d0      	lsls	r0, r2, #31
 80032da:	d404      	bmi.n	80032e6 <_fflush_r+0x32>
 80032dc:	0599      	lsls	r1, r3, #22
 80032de:	d402      	bmi.n	80032e6 <_fflush_r+0x32>
 80032e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032e2:	f7ff fb6a 	bl	80029ba <__retarget_lock_acquire_recursive>
 80032e6:	4628      	mov	r0, r5
 80032e8:	4621      	mov	r1, r4
 80032ea:	f7ff ff5f 	bl	80031ac <__sflush_r>
 80032ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032f0:	07da      	lsls	r2, r3, #31
 80032f2:	4605      	mov	r5, r0
 80032f4:	d4e4      	bmi.n	80032c0 <_fflush_r+0xc>
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	059b      	lsls	r3, r3, #22
 80032fa:	d4e1      	bmi.n	80032c0 <_fflush_r+0xc>
 80032fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032fe:	f7ff fb5d 	bl	80029bc <__retarget_lock_release_recursive>
 8003302:	e7dd      	b.n	80032c0 <_fflush_r+0xc>

08003304 <fiprintf>:
 8003304:	b40e      	push	{r1, r2, r3}
 8003306:	b503      	push	{r0, r1, lr}
 8003308:	4601      	mov	r1, r0
 800330a:	ab03      	add	r3, sp, #12
 800330c:	4805      	ldr	r0, [pc, #20]	@ (8003324 <fiprintf+0x20>)
 800330e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003312:	6800      	ldr	r0, [r0, #0]
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	f7ff fca3 	bl	8002c60 <_vfiprintf_r>
 800331a:	b002      	add	sp, #8
 800331c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003320:	b003      	add	sp, #12
 8003322:	4770      	bx	lr
 8003324:	20000018 	.word	0x20000018

08003328 <__swbuf_r>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	460e      	mov	r6, r1
 800332c:	4614      	mov	r4, r2
 800332e:	4605      	mov	r5, r0
 8003330:	b118      	cbz	r0, 800333a <__swbuf_r+0x12>
 8003332:	6a03      	ldr	r3, [r0, #32]
 8003334:	b90b      	cbnz	r3, 800333a <__swbuf_r+0x12>
 8003336:	f7ff f9df 	bl	80026f8 <__sinit>
 800333a:	69a3      	ldr	r3, [r4, #24]
 800333c:	60a3      	str	r3, [r4, #8]
 800333e:	89a3      	ldrh	r3, [r4, #12]
 8003340:	071a      	lsls	r2, r3, #28
 8003342:	d501      	bpl.n	8003348 <__swbuf_r+0x20>
 8003344:	6923      	ldr	r3, [r4, #16]
 8003346:	b943      	cbnz	r3, 800335a <__swbuf_r+0x32>
 8003348:	4621      	mov	r1, r4
 800334a:	4628      	mov	r0, r5
 800334c:	f000 f82a 	bl	80033a4 <__swsetup_r>
 8003350:	b118      	cbz	r0, 800335a <__swbuf_r+0x32>
 8003352:	f04f 37ff 	mov.w	r7, #4294967295
 8003356:	4638      	mov	r0, r7
 8003358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	6922      	ldr	r2, [r4, #16]
 800335e:	1a98      	subs	r0, r3, r2
 8003360:	6963      	ldr	r3, [r4, #20]
 8003362:	b2f6      	uxtb	r6, r6
 8003364:	4283      	cmp	r3, r0
 8003366:	4637      	mov	r7, r6
 8003368:	dc05      	bgt.n	8003376 <__swbuf_r+0x4e>
 800336a:	4621      	mov	r1, r4
 800336c:	4628      	mov	r0, r5
 800336e:	f7ff ffa1 	bl	80032b4 <_fflush_r>
 8003372:	2800      	cmp	r0, #0
 8003374:	d1ed      	bne.n	8003352 <__swbuf_r+0x2a>
 8003376:	68a3      	ldr	r3, [r4, #8]
 8003378:	3b01      	subs	r3, #1
 800337a:	60a3      	str	r3, [r4, #8]
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	6022      	str	r2, [r4, #0]
 8003382:	701e      	strb	r6, [r3, #0]
 8003384:	6962      	ldr	r2, [r4, #20]
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	429a      	cmp	r2, r3
 800338a:	d004      	beq.n	8003396 <__swbuf_r+0x6e>
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	07db      	lsls	r3, r3, #31
 8003390:	d5e1      	bpl.n	8003356 <__swbuf_r+0x2e>
 8003392:	2e0a      	cmp	r6, #10
 8003394:	d1df      	bne.n	8003356 <__swbuf_r+0x2e>
 8003396:	4621      	mov	r1, r4
 8003398:	4628      	mov	r0, r5
 800339a:	f7ff ff8b 	bl	80032b4 <_fflush_r>
 800339e:	2800      	cmp	r0, #0
 80033a0:	d0d9      	beq.n	8003356 <__swbuf_r+0x2e>
 80033a2:	e7d6      	b.n	8003352 <__swbuf_r+0x2a>

080033a4 <__swsetup_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4b29      	ldr	r3, [pc, #164]	@ (800344c <__swsetup_r+0xa8>)
 80033a8:	4605      	mov	r5, r0
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	460c      	mov	r4, r1
 80033ae:	b118      	cbz	r0, 80033b8 <__swsetup_r+0x14>
 80033b0:	6a03      	ldr	r3, [r0, #32]
 80033b2:	b90b      	cbnz	r3, 80033b8 <__swsetup_r+0x14>
 80033b4:	f7ff f9a0 	bl	80026f8 <__sinit>
 80033b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033bc:	0719      	lsls	r1, r3, #28
 80033be:	d422      	bmi.n	8003406 <__swsetup_r+0x62>
 80033c0:	06da      	lsls	r2, r3, #27
 80033c2:	d407      	bmi.n	80033d4 <__swsetup_r+0x30>
 80033c4:	2209      	movs	r2, #9
 80033c6:	602a      	str	r2, [r5, #0]
 80033c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033cc:	81a3      	strh	r3, [r4, #12]
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295
 80033d2:	e033      	b.n	800343c <__swsetup_r+0x98>
 80033d4:	0758      	lsls	r0, r3, #29
 80033d6:	d512      	bpl.n	80033fe <__swsetup_r+0x5a>
 80033d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033da:	b141      	cbz	r1, 80033ee <__swsetup_r+0x4a>
 80033dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033e0:	4299      	cmp	r1, r3
 80033e2:	d002      	beq.n	80033ea <__swsetup_r+0x46>
 80033e4:	4628      	mov	r0, r5
 80033e6:	f7ff fb11 	bl	8002a0c <_free_r>
 80033ea:	2300      	movs	r3, #0
 80033ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80033f4:	81a3      	strh	r3, [r4, #12]
 80033f6:	2300      	movs	r3, #0
 80033f8:	6063      	str	r3, [r4, #4]
 80033fa:	6923      	ldr	r3, [r4, #16]
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	81a3      	strh	r3, [r4, #12]
 8003406:	6923      	ldr	r3, [r4, #16]
 8003408:	b94b      	cbnz	r3, 800341e <__swsetup_r+0x7a>
 800340a:	89a3      	ldrh	r3, [r4, #12]
 800340c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003414:	d003      	beq.n	800341e <__swsetup_r+0x7a>
 8003416:	4621      	mov	r1, r4
 8003418:	4628      	mov	r0, r5
 800341a:	f000 f856 	bl	80034ca <__smakebuf_r>
 800341e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003422:	f013 0201 	ands.w	r2, r3, #1
 8003426:	d00a      	beq.n	800343e <__swsetup_r+0x9a>
 8003428:	2200      	movs	r2, #0
 800342a:	60a2      	str	r2, [r4, #8]
 800342c:	6962      	ldr	r2, [r4, #20]
 800342e:	4252      	negs	r2, r2
 8003430:	61a2      	str	r2, [r4, #24]
 8003432:	6922      	ldr	r2, [r4, #16]
 8003434:	b942      	cbnz	r2, 8003448 <__swsetup_r+0xa4>
 8003436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800343a:	d1c5      	bne.n	80033c8 <__swsetup_r+0x24>
 800343c:	bd38      	pop	{r3, r4, r5, pc}
 800343e:	0799      	lsls	r1, r3, #30
 8003440:	bf58      	it	pl
 8003442:	6962      	ldrpl	r2, [r4, #20]
 8003444:	60a2      	str	r2, [r4, #8]
 8003446:	e7f4      	b.n	8003432 <__swsetup_r+0x8e>
 8003448:	2000      	movs	r0, #0
 800344a:	e7f7      	b.n	800343c <__swsetup_r+0x98>
 800344c:	20000018 	.word	0x20000018

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4d06      	ldr	r5, [pc, #24]	@ (800346c <_sbrk_r+0x1c>)
 8003454:	2300      	movs	r3, #0
 8003456:	4604      	mov	r4, r0
 8003458:	4608      	mov	r0, r1
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	f7fe fa78 	bl	8001950 <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200001e8 	.word	0x200001e8

08003470 <abort>:
 8003470:	b508      	push	{r3, lr}
 8003472:	2006      	movs	r0, #6
 8003474:	f000 f88e 	bl	8003594 <raise>
 8003478:	2001      	movs	r0, #1
 800347a:	f7fe f9f0 	bl	800185e <_exit>

0800347e <__swhatbuf_r>:
 800347e:	b570      	push	{r4, r5, r6, lr}
 8003480:	460c      	mov	r4, r1
 8003482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003486:	2900      	cmp	r1, #0
 8003488:	b096      	sub	sp, #88	@ 0x58
 800348a:	4615      	mov	r5, r2
 800348c:	461e      	mov	r6, r3
 800348e:	da0d      	bge.n	80034ac <__swhatbuf_r+0x2e>
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	bf14      	ite	ne
 800349c:	2340      	movne	r3, #64	@ 0x40
 800349e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80034a2:	2000      	movs	r0, #0
 80034a4:	6031      	str	r1, [r6, #0]
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	b016      	add	sp, #88	@ 0x58
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	466a      	mov	r2, sp
 80034ae:	f000 f879 	bl	80035a4 <_fstat_r>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	dbec      	blt.n	8003490 <__swhatbuf_r+0x12>
 80034b6:	9901      	ldr	r1, [sp, #4]
 80034b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80034bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80034c0:	4259      	negs	r1, r3
 80034c2:	4159      	adcs	r1, r3
 80034c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034c8:	e7eb      	b.n	80034a2 <__swhatbuf_r+0x24>

080034ca <__smakebuf_r>:
 80034ca:	898b      	ldrh	r3, [r1, #12]
 80034cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034ce:	079d      	lsls	r5, r3, #30
 80034d0:	4606      	mov	r6, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	d507      	bpl.n	80034e6 <__smakebuf_r+0x1c>
 80034d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	6123      	str	r3, [r4, #16]
 80034de:	2301      	movs	r3, #1
 80034e0:	6163      	str	r3, [r4, #20]
 80034e2:	b003      	add	sp, #12
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e6:	ab01      	add	r3, sp, #4
 80034e8:	466a      	mov	r2, sp
 80034ea:	f7ff ffc8 	bl	800347e <__swhatbuf_r>
 80034ee:	9f00      	ldr	r7, [sp, #0]
 80034f0:	4605      	mov	r5, r0
 80034f2:	4639      	mov	r1, r7
 80034f4:	4630      	mov	r0, r6
 80034f6:	f7ff fafd 	bl	8002af4 <_malloc_r>
 80034fa:	b948      	cbnz	r0, 8003510 <__smakebuf_r+0x46>
 80034fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003500:	059a      	lsls	r2, r3, #22
 8003502:	d4ee      	bmi.n	80034e2 <__smakebuf_r+0x18>
 8003504:	f023 0303 	bic.w	r3, r3, #3
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	81a3      	strh	r3, [r4, #12]
 800350e:	e7e2      	b.n	80034d6 <__smakebuf_r+0xc>
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	6020      	str	r0, [r4, #0]
 8003514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	9b01      	ldr	r3, [sp, #4]
 800351c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003520:	b15b      	cbz	r3, 800353a <__smakebuf_r+0x70>
 8003522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003526:	4630      	mov	r0, r6
 8003528:	f000 f84e 	bl	80035c8 <_isatty_r>
 800352c:	b128      	cbz	r0, 800353a <__smakebuf_r+0x70>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	f023 0303 	bic.w	r3, r3, #3
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	81a3      	strh	r3, [r4, #12]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	431d      	orrs	r5, r3
 800353e:	81a5      	strh	r5, [r4, #12]
 8003540:	e7cf      	b.n	80034e2 <__smakebuf_r+0x18>

08003542 <_raise_r>:
 8003542:	291f      	cmp	r1, #31
 8003544:	b538      	push	{r3, r4, r5, lr}
 8003546:	4605      	mov	r5, r0
 8003548:	460c      	mov	r4, r1
 800354a:	d904      	bls.n	8003556 <_raise_r+0x14>
 800354c:	2316      	movs	r3, #22
 800354e:	6003      	str	r3, [r0, #0]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	bd38      	pop	{r3, r4, r5, pc}
 8003556:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003558:	b112      	cbz	r2, 8003560 <_raise_r+0x1e>
 800355a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800355e:	b94b      	cbnz	r3, 8003574 <_raise_r+0x32>
 8003560:	4628      	mov	r0, r5
 8003562:	f000 f853 	bl	800360c <_getpid_r>
 8003566:	4622      	mov	r2, r4
 8003568:	4601      	mov	r1, r0
 800356a:	4628      	mov	r0, r5
 800356c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003570:	f000 b83a 	b.w	80035e8 <_kill_r>
 8003574:	2b01      	cmp	r3, #1
 8003576:	d00a      	beq.n	800358e <_raise_r+0x4c>
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	d103      	bne.n	8003584 <_raise_r+0x42>
 800357c:	2316      	movs	r3, #22
 800357e:	6003      	str	r3, [r0, #0]
 8003580:	2001      	movs	r0, #1
 8003582:	e7e7      	b.n	8003554 <_raise_r+0x12>
 8003584:	2100      	movs	r1, #0
 8003586:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800358a:	4620      	mov	r0, r4
 800358c:	4798      	blx	r3
 800358e:	2000      	movs	r0, #0
 8003590:	e7e0      	b.n	8003554 <_raise_r+0x12>
	...

08003594 <raise>:
 8003594:	4b02      	ldr	r3, [pc, #8]	@ (80035a0 <raise+0xc>)
 8003596:	4601      	mov	r1, r0
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	f7ff bfd2 	b.w	8003542 <_raise_r>
 800359e:	bf00      	nop
 80035a0:	20000018 	.word	0x20000018

080035a4 <_fstat_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4d07      	ldr	r5, [pc, #28]	@ (80035c4 <_fstat_r+0x20>)
 80035a8:	2300      	movs	r3, #0
 80035aa:	4604      	mov	r4, r0
 80035ac:	4608      	mov	r0, r1
 80035ae:	4611      	mov	r1, r2
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	f7fe f9a4 	bl	80018fe <_fstat>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	d102      	bne.n	80035c0 <_fstat_r+0x1c>
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	b103      	cbz	r3, 80035c0 <_fstat_r+0x1c>
 80035be:	6023      	str	r3, [r4, #0]
 80035c0:	bd38      	pop	{r3, r4, r5, pc}
 80035c2:	bf00      	nop
 80035c4:	200001e8 	.word	0x200001e8

080035c8 <_isatty_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4d06      	ldr	r5, [pc, #24]	@ (80035e4 <_isatty_r+0x1c>)
 80035cc:	2300      	movs	r3, #0
 80035ce:	4604      	mov	r4, r0
 80035d0:	4608      	mov	r0, r1
 80035d2:	602b      	str	r3, [r5, #0]
 80035d4:	f7fe f9a3 	bl	800191e <_isatty>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d102      	bne.n	80035e2 <_isatty_r+0x1a>
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	b103      	cbz	r3, 80035e2 <_isatty_r+0x1a>
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	bd38      	pop	{r3, r4, r5, pc}
 80035e4:	200001e8 	.word	0x200001e8

080035e8 <_kill_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4d07      	ldr	r5, [pc, #28]	@ (8003608 <_kill_r+0x20>)
 80035ec:	2300      	movs	r3, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	602b      	str	r3, [r5, #0]
 80035f6:	f7fe f922 	bl	800183e <_kill>
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d102      	bne.n	8003604 <_kill_r+0x1c>
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	b103      	cbz	r3, 8003604 <_kill_r+0x1c>
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	bd38      	pop	{r3, r4, r5, pc}
 8003606:	bf00      	nop
 8003608:	200001e8 	.word	0x200001e8

0800360c <_getpid_r>:
 800360c:	f7fe b90f 	b.w	800182e <_getpid>

08003610 <_init>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	bf00      	nop
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr

0800361c <_fini>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	bf00      	nop
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr
